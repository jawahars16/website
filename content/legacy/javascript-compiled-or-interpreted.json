{"meta":{"featuredImage":"https://storage.googleapis.com/jawahar-tech/1560609621463.jpg","published_date":"2018-06-06T18:30:00.000Z","postId":"javascript-compiled-or-interpreted","title":"Javascript - Compiled or Interpreted?","excerpt":"I started my career with .NET. I was a WPF developer and use Visual Studio as the primary IDE. Though I am a desktop application developer, I was aware of JavaScript programming. But I thought Javascript is a toy language and its primary purpose is to manipulate web pages.But the evolution of Javasc","tags":[]},"content":"<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>I started my career with .NET. I was a WPF developer and use Visual Studio as the primary IDE. Though I am a desktop application developer, I was aware of JavaScript programming. But I thought Javascript is a toy language and its primary purpose is to manipulate web pages.</p><div></div><p>But the evolution of Javascript is tremendous. When I started learning JavaScript throughout the learning i used to compare Javascript with c#. </p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2><strong>Browser as runtime</strong></h2> <div></div><blockquote> <div>Browser is for JavaScript as CLR is for .NET.</div></blockquote> <div></div><p>The runtime of .NET is CLR (Common Language Runtime) whereas the runtime of Javascript is browser. CLR cannot interpret C# as it is. CLR needs C# to be compiled down to intermediate language (IL) to interpret. But browsers can interpret Javascript as it is.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1658x738.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610907.png\" class=\"large\"></div></div></div><div></div><p>So it&apos;s obvious that Javascript is an interpreted language. But unlike other scripting languages JavaScript possess some characteristics of a compiled language.</p><div></div><h2><strong>Compile time errors</strong></h2> <div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/919x269.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612358.png\"></div></div></div><div></div><style data-emotion-css=\"1pq57dj\"> .css-1pq57dj{font-size: 22px !important;}</style> <p>Unlike other interpreted languages Javascript produces errors upfront. Usually interpreted languages will be executed line by line. So if there is an error at line 100, all 99 lines will be executed before it gets aware of the issue in 100th line.</p><div></div><h3>For an example consider the below shell script. </h3> <div> <div> <pre><code>#!/bin/bash<br># GNU bash, version 4.3.46<br><br>a=\"Hello\"<br>b=\"World\"<br>echo $a $b<br>int a = 2 + 2<br></code></pre> </div></div><p>The output of the above script will produce &quot;Hello World&quot; along with an error saying &quot;int: Command not found&quot;. So it is able to execute valid statements ignoring the invalid statement. As an interpreted language, Javascript also expected to work in the same way, but it wont.</p><div></div><p>Consider the below Javascript code.</p><div> <div> <pre><code>a=\"Hello\"<br>b=\"World\"<br>console.log(a + b)<br>int a = 2 + 2;<br></code></pre> </div></div><p>The above code will not produce any output except saying &quot;Syntax error. Unexpected token&quot; at line 4. The reason for this behavior is that Javascript undergo one other process before it gets executed - Parsing. The code will be transformed into abstract syntax tree. Abstract syntax trees are data structures widely used in compilers, due to their property of representing the structure of program code. An AST is usually the result of the syntax analysis phase of a compiler. Even thought Javascript is not compiled, it goes through one of the crucial step in a typical compilation process.</p><div></div><p>So it is not the right term to call these errors as compiler errors. Instead these are parser errors. And this behavior applicable only to syntax errors. So the process parsing can only catch syntax errors upfront. Other errors like type errors cannot be caught before and it will be thrown when that line is interpreted.</p><div></div><p>Kyle Simpson explains the behavior in below tweet.</p><div> <div> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Looks like javascript is interpreted line by line. Any thoughts ? <a href=\"https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw\">#javascript</a> <a href=\"https://twitter.com/getify?ref_src=twsrc%5Etfw\">@getify</a> <a href=\"https://twitter.com/YDKJS?ref_src=twsrc%5Etfw\">@YDKJS</a> <a href=\"https://twitter.com/FrontendMasters?ref_src=twsrc%5Etfw\">@FrontendMasters</a> <a href=\"https://t.co/yF8YBrW8KU\">pic.twitter.com/yF8YBrW8KU</a></p>&mdash; Jawahar (@jawahars_16) <a href=\"https://twitter.com/jawahars_16/status/1030298998463062016?ref_src=twsrc%5Etfw\">August 17, 2018</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </div></div><h2><strong>Functions can be invoked before declaring</strong></h2> <div></div><p>In a typical interpreted language, it is not possible to invoke a method before declaring it. Order of declaring and invoking a method does matter in interpreted languages. The below code will fail for the same reason. At the time of executing line number 4, it has no idea of the method &quot;say_hello&quot; and will fail.</p><div> <div> <pre><code>#!/bin/bash<br># GNU bash, version 4.3.46<br><br>say_hello<br><br>say_hello()<br>{<br>    echo \"Hello World\"<br>}<br></code></pre> </div></div><p>But for surprise, Javascript never worried about the order of declaring and invoking a function. The below code will work without any issue.</p><div> <div> <pre><code>sayHello()<br><br>function sayHello () {<br>  console.log('Hello World!')<br>}<br></code></pre> </div></div><p>The reason for this behavior is Javascript go though a different process called <u>hoisting</u> before it gets executed. Hoisting is the default behavior of moving all the declarations at the top of the scope (to the top of the current script or the current function). In other words, a variable can be used before it has been declared. But keep in mind that hoisting can only move declarations to the top and not the assignments.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/742x308.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613706.png\"></div></div></div><div></div><div></div><h2><strong>Babel - a Javascript compiler</strong></h2> <blockquote> <div>If Javascript is not compiled, then why there are so many Javascript compilers around? </div></blockquote> <p>As any other programming languages, Javascript also has different versions. ECMA is the term used to specify a particular version of Javascript. In reality ECMA is specification and Javascript is one of the implementation of it. As we already discussed, browser is the runtime for Javascript. </p><div></div><p>When Javascript gets evolved with advanced features and new syntax, browsers should also evolve to support the new syntax. But not all the browsers support the latest version of Javascript. The level of compatibility is also not same across browsers. For example some browsers support 90% and some support 10%.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1340x567.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609614812.png\" class=\"large\"></div></div></div><div></div><p>Javascript compilers now comes into picture. It transforms the non-compatible latest Javascript code into compatible code (mostly ES5) that can be recognised by all browsers. Ideally this process cannot be called compiling, since the input and output format has the same level of abstraction. So the actual term is <u>Transpiler</u>.</p><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1792x844.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609616177.png\" class=\"large\"></div></div></div><div></div><h2><strong>Conclusion</strong></h2> <div></div><p>We can conclude saying that Javascript is an interpreted language. But Javascript is already advancing very fast and some of the modern browsers actually compile Javascript for better performance. V8 engine is one of that. The V8 Engine which is built by Google is open source and written in C++. This engine is used inside Google Chrome. Unlike the rest of the engines, however, V8 is also used for the popular Node.js runtime.</p><div></div><p>V8 was first designed to increase the performance of JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines do such as SpiderMonkey or Rhino (Mozilla). The main difference here is that V8 doesn&#x2019;t produce byte code or any intermediate code.</p></div></div></div>"}