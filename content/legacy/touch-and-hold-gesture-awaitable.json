{"meta":{"title":"Touch and Hold Gesture – Awaitable","excerpt":"\t\t\tTouch and Hold gesture can not be identified using any built-in API. Surface SDKs may provide one. But I will show a simple awaitable way to detect this gesture. Using a timer, we can wait for a particular seconds and return the method once the timer elapsed. If user took his hand before timer el","tags":["async","await","hold","touch","wpf","xaml"],"featuredImage":"https://s0.wp.com/i/blank.jpg","published_date":"2014-08-07T00:00:00.000Z","postId":"touch-and-hold-gesture-awaitable"},"content":"\n\t\t\t\t<p>Touch and Hold gesture can not be identified using&#xA0;any built-in API. Surface SDKs may provide one. But I will show a simple awaitable way to detect this gesture. Using a timer, we can wait for a particular seconds and return the method once the timer elapsed. If user took his hand before timer elapsed, then immediately return the method with a false flag.</p>\n<p><span id=\"more-434\"></span></p>\n<pre><code>public static Task&lt;bool&gt;TouchHold(this FrameworkElement element, TimeSpan duration)<br>{<br>    DispatcherTimer timer = new DispatcherTimer();<br>    TaskCompletionSource&lt;bool&gt; task = new TaskCompletionSource&lt;bool&gt;();<br>    timer.Interval = duration;<br><br>    MouseButtonEventHandler touchUpHandler = delegate<br>    {<br>        timer.Stop();<br>        if (task.Task.Status == TaskStatus.Running)<br>        {<br>            task.SetResult(false);<br>        }<br>    };<br><br>    element.PreviewMouseUp += touchUpHandler;<br><br>    timer.Tick += delegate<br>    {<br>        element.PreviewMouseUp -= touchUpHandler;<br>        timer.Stop();<br>        task.SetResult(true);<br>    };<br><br>    timer.Start();<br>    return task.Task;<br>}<br></code></pre>\n<p>I made it as an extension method, which is easy to use. The seconds to wait can be configurable. The following code shows, how to use it.</p>\n<pre><code>        protected async override void OnMouseDown(MouseButtonEventArgs e)<br>        {<br>            base.OnMouseDown(e);<br><br>            bool isHold = await this.TouchHold(TimeSpan.FromSeconds(1));<br>            if (isHold)<br>            {<br>                MessageBox.Show(&quot;Touch and Hold detected!!&quot;);<br>            }<br>        }<br></code></pre>\n<p>Happy coding!!</p>\n\t\t\t"}