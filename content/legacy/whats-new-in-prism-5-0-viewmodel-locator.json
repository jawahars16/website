{"meta":{"featuredImage":"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png","published_date":"2014-12-04T00:00:00.000Z","postId":"whats-new-in-prism-5-0-viewmodel-locator","title":"Whats new in PRISM 5.0 – ViewModel Locator","excerpt":"\t\t\tViewModels are usually resolved and injected through DI containers. We will set the viewmodel as DataContext of View. But still there are some frameworks like Caliburn Micro who provided a conventional way of resolving the view models. Now Microsoft added this feature into the PRISM framework. Th","tags":["locator","mvvm","PRISM","unity","view","viewmodel","wpf"]},"content":"\n\t\t\t\t<p>ViewModels are usually resolved and injected through DI containers. We will set the viewmodel as DataContext of View. But&#xA0;still there are some frameworks like <a href=\"https://caliburnmicro.codeplex.com/\">Caliburn Micro</a> who provided a conventional way of resolving the view models. Now Microsoft added this feature into the PRISM framework. The View and ViewModels can be wired together&#xA0;by a naming convention.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png\"><img data-attachment-id=\"539\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/04/whats-new-in-prism-5-0-viewmodel-locator/mvvm/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png\" data-orig-size=\"222,167\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"mvvm\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=222\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=222\" src=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=736\" alt=\"mvvm\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png 222w, https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=150 150w\" sizes=\"(max-width: 222px) 100vw, 222px\"></a></p>\n<p>In this project the Views and ViewModels followed a naming convention, which can be identified by the framework.</p>\n<p><em><strong>&lt;ViewName&gt;</strong>&#xA0;=&gt; Home</em><br>\n<em><strong> &lt;ViewName&gt; + ViewModel</strong>&#xA0;=&gt; HomeViewModel</em></p>\n<p><span id=\"more-533\"></span></p>\n<p>To&#xA0;initialize this view model location,&#xA0;view should implement the IView interface and AutoWire property should be true for the View.</p>\n<pre><code>    public partial class Home : UserControl, IView<br>    {<br>        public Home()<br>        {<br>            InitializeComponent();<br>        }<br>    }<br></code></pre>\n<pre><code>&lt;UserControl x:Class=&quot;WpfApplication16.Views.Home&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:prism=&quot;clr-namespace:Microsoft.Practices.Prism.Mvvm;assembly=Microsoft.Practices.Prism.Mvvm.Desktop&quot;<br>             prism:ViewModelLocator.AutoWireViewModel=&quot;True&quot;&gt;<br>    &lt;Grid&gt;<br>        &lt;TextBlock Text=&quot;{Binding Message}&quot; /&gt;<br>    &lt;/Grid&gt;<br>&lt;/UserControl&gt;<br></code></pre>\n<p>Sometimes this naming convention may not suitable for some applications. So if people want to follow a different convention, still they can consume this awesome feature. It means, it is possible to override the ViewModel locating logic. How cool it is.. huh..!!!</p>\n<p>I usually want to add View suffix to my Views (HomeView). So the locator code should change a bit like this,</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png\"><img data-attachment-id=\"549\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/04/whats-new-in-prism-5-0-viewmodel-locator/mvvm-2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png\" data-orig-size=\"237,168\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"mvvm\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=237\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=237\" src=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=736\" alt=\"mvvm\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png 237w, https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=150 150w\" sizes=\"(max-width: 237px) 100vw, 237px\"></a></p>\n<pre><code>    public partial class App : Application<br>    {<br>        private const string ViewNamespace = &quot;Views&quot;;<br>        private const string ViewModelNamespace = &quot;ViewModels&quot;;<br><br>        protected override void OnStartup(StartupEventArgs e)<br>        {<br>            base.OnStartup(e);<br>            ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) =&gt;<br>            {<br>                var friendlyName = viewType.FullName.Remove(viewType.FullName.Length - 4);<br>                friendlyName = friendlyName.Replace(ViewNamespace, ViewModelNamespace);<br>                var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;<br>                var viewModelName = String.Format(CultureInfo.InvariantCulture, &quot;{0}ViewModel, {1}&quot;, friendlyName, viewAssemblyName);<br>                return Type.GetType(viewModelName);<br>            });<br>        }<br>    }<br></code></pre>\n<p>Also it is possible to let your DI container resolve your viewmodel. Just the ViewModel locator will change something like this. I used UnityContainer here.</p>\n<pre><code>        protected override void OnStartup(StartupEventArgs e)<br>        {<br>            base.OnStartup(e);<br>            IUnityContainer _container = new UnityContainer();<br>            ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) =&gt;<br>            {<br>                return _container.Resolve(type);<br>            });<br>        }<br></code></pre>\n\t\t\t"}