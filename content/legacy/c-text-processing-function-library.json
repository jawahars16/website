{"meta":{"title":"C# Text Processing FunctionÂ Library","excerpt":"\t\t\t  \nString Functions in C#.NET\n\nC#.NET comes with a lot of great string processing functions like Substring, Compare, IndexOf. But the truth is the built-in .NET string functions are very limited. Programmers constantly have to rewrite similar text processing functions over and over.\nLuckily we ca","tags":[],"featuredImage":"https://s0.wp.com/i/blank.jpg","published_date":"2011-10-01T00:00:00.000Z","postId":"c-text-processing-function-library"},"content":"\n\t\t\t\t<div dir=\"ltr\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><b><span>String Functions in C#.NET</span></b></div>\n<div></div>\n<div><span>C#.NET comes with a lot of great string processing functions like </span><span>Substring</span><span>, </span><span>Compare</span><span>, </span><span>IndexOf</span><span>. But the truth is the built-in .NET string functions are very limited. Programmers constantly have to rewrite similar text processing functions over and over.</span></div>\n<div><span>Luckily we can expand on them and create all kinds of <b>C# advanced string functions</b>. As for a matter of speed, there are is one thing to consider: </span><span>String</span><span> vs </span><span>StringBuilder</span></div>\n<div></div>\n<div><b><span>.NET &#x2013; String vs StringBuilder</span></b></div>\n<div></div>\n<div><span>Appending text to a string object is done in this fashion:</span></div>\n<div></div>\n<div>\n<div><span>stringObject += </span><span>&#x201C;more text&#x201D;</span><span>;</span></div>\n</div>\n<div></div>\n<div><span>Concating strings like that is very fast and reliable when it is done for a small amount of C# strings. In fact it can be significantly simpler and faster than using the </span><span>StringBuilder</span><span> class.</span></div>\n<div><span>The </span><span>StringBuilder</span><span> class on the other hand is excellent for processing text for a lot of iterations since it avoids creating new instances of a string each time the output string is modified. To add a string to a </span><span>StringBuilder</span><span> goes like this:</span></div>\n<div></div>\n<div>\n<div><span>stringBuilderObject.Append(</span><span>&#x201C;more text&#x201D;</span><span>);</span></div>\n</div>\n<div></div>\n<div><span>The downside to the </span><span>StringBuilder</span><span> is the overhead of initializing a class. However if we are going to need to create some C# functions that will processes large amounts of text, then StringBuilder saves processing time in the long run.</span></div>\n<div><span>In the <b>C# String Processing Library</b> functions are divided into two sections, the </span><span>StringProcessing</span><span> and the </span><span>StringBuilderProcess</span><span> classes, so you can run whichever one is more fitting.</span></div>\n<div></div>\n<div><b><span>Advanced Csharp String Functions</span></b></div>\n<div></div>\n<table border=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td width=\"50%\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><span>Capitalize</span></div>\n<div></div>\n<div><span>This C# function takes the first letter of a string an capitalizes it:<br>word -&gt; Word<br>this is a sentence -&gt; This is a sentence</span></div>\n<div></div>\n<div><span>IsCapitalized</span></div>\n<div></div>\n<div><span>This C# function checks to see if the first letter of a string is capitalized:<br>Word -&gt; True<br>word -&gt; False</span></div>\n<div></div>\n<div><span>IsLowerCase</span></div>\n<div></div>\n<div><span>Checks to see that an entire string is in lower cases<br>word -&gt; True<br>Word -&gt; False</span></div>\n<div></div>\n<div><span>IsUpperCase</span></div>\n<div></div>\n<div><span>Checks to see that an entire string is in upper cases<br>Word -&gt; False<br>WORD -&gt; True</span></div>\n<div></div>\n<div><span>SwapCases</span></div>\n<div></div>\n<div><span>This C# function swaps the cases of a string<br>word -&gt; WORD<br>Word -&gt; wORD</span></div>\n<div></div>\n<div><span>AlternateCases</span></div>\n<div></div>\n<div><span>Takes the first character&#x2019;s casing an alternates the casing of the rest of the string<br>Hi -&gt; Hi<br>helloworld -&gt; hElLoWoRlD</span></div>\n<div></div>\n<div><span>AlternateCases</span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></div>\n<div></div>\n<div><span>This C# string function works exactly the same except the user specifies on which case the string will start (Upper case or Lower case)</span></div>\n<div></div>\n<div><span>IsAlternateCases</span></div>\n<div></div>\n<div><span>Checks to see whether a string has alternating cases</span></div>\n<div></div>\n<div><span>CountTotal</span></div>\n<div></div>\n<div><span>Counts the total number of occurances of a string within another string<br>hello, l -&gt; 2<br>hello, el -&gt; 1</span></div>\n<div></div>\n<div><span>RemoveVowels</span></div>\n<div></div>\n<div><span>This C# string function removes the vowels in a string<br>hello -&gt; hll</span></div>\n<div></div>\n<div><span>KeepVowels</span></div>\n<div></div>\n<div><span>This C# string function removes everything but the vowels in a string<br>hello -&gt; eo</span></div>\n<div></div>\n<div><span>HasVowels</span></div>\n<div></div>\n<div><span>Checks to see if there is any vowel psent in a string</span></div>\n<div></div>\n<div><span>IsSpaces</span></div>\n<div></div>\n<div><span>Quickly and effortlessly checks to see if a string is nothing but spaces</span></div>\n<div></div>\n<div><span>IsRepeatedChar</span></div>\n<div></div>\n<div><span>Quickly and effortlessly checks to see if a string is nothing but the same letter repeated<br>aaaaaaaaaa -&gt; True<br>aaaaaaaaad -&gt; False</span></div>\n<div></div>\n<div><span>IsNumeric</span></div>\n<div></div>\n<div><span>Processes a string to see if it contains only numbers</span></div>\n<div></div>\n<div><span>HasNumbers</span></div>\n<div></div>\n<div><span>Checks a string to see if it contains any numbers.</span></div>\n<div></div>\n<div><span>IsAlphaNumberic</span></div>\n<div></div>\n<div><span>This C# function evaluates whether a string contains only numbers and letters (no symbols).</span></div>\n<div></div>\n<div><span>isLetters</span></div>\n<div></div>\n<div><span>Checks for a string to contain nothing but letters, no numbers or symbols.</span></div>\n<div></div>\n<div><span>GetInitials</span></div>\n<div></div>\n<div><span>Converts a string, like a name, into its initials<br>Bob Landon -&gt; B.L.</span></div>\n<div></div>\n<div><span>GetTitle</span></div>\n<div></div>\n<div><span>Capitalizes the first letter of every word in a string<br>the good story -&gt; The Good Story</span></div>\n<div></div>\n<div><span>GetNameCasing</span></div>\n<div></div>\n<div><span>Similar to the GetTitle function, capitalizes the first letter of every word, but has some additional rules for names<br>mcdonald -&gt; McDonald<br>macdonald -&gt; MacDonald<br>Credits to ShutlOrbit&#xA0;</span></div>\n<div><span>(<a href=\"http://www.thirdstagesoftware.com/\" target=\"_blank\"><span>http://www.thirdstagesoftware.com</span></a>) from <a href=\"http://www.codeproject.com/\" target=\"_blank\"><span>CodeProject</span></a></span></div>\n<div></div>\n<div><span>IsTitle</span></div>\n<div></div>\n<div><span>This C# string function checks if the first letter of every word is capitalized<br>The Big Story -&gt; True<br>The big story -&gt; False</span></div>\n<div></div>\n<div><span>IsEmailAddress</span></div>\n<div></div>\n<div><span>Verifies that an email address is written in the correct format. Useful for checking email addressed entered in a web application.</span></div>\n<div></div>\n<div><span>IndexOfAll</span></div>\n<div></div>\n<div><span>This very useful C# function returns all the indicies of a string in another string. As opposed to IndexOf which only returns the first index.</span></div>\n<div></div>\n<div><span>ArrayToString</span></div>\n<div></div>\n<div><span>This C# string function is a must for all developers. Quickly turns any array into a single string that can be displayed to survey an array&#x2019;s data. Check out a more complete <a href=\"http://www.vcskicks.com/array-to-string.php\" target=\"_blank\"><span>array to string function</span></a> right here on Visual C# Kicks.</span></div>\n<div><span>PasswordStrength</span></div>\n<div></div>\n<div><span>Evaluate the effectiveness of a string as a password. Original idea credits go to D. Rijmenants. (If there are any copyright issues please contact us).</span></div>\n<div></div>\n<div><span>CharRight</span></div>\n<div></div>\n<div><span>Basically a Substring function that works backwards. Programmers from older languages will appciate this missing C# function.</span></div>\n<div></div>\n<div><span>CharMid</span></div>\n<div></div>\n<div><span>Another function that is missing from the original C# Net string processing list. Works like Substring but starts from a specified position.</span></div>\n<div></div>\n<div><span>InsertSeparator</span></div>\n<div></div>\n<div><span>Inserts a separator after each letter in a string, excluding the last letter<br>hello, &#x2013; -&gt; h-e-l-l-o</span></div>\n<div></div>\n<div><span>InsertSeparatorEvery</span></div>\n<div></div>\n<div><span>Inserts a separator after a specified number of letters, excluding the last letter</span></div>\n<div></div>\n<div><span>SubstringEnd</span></div>\n<div></div>\n<div><span>This C# function works exactly like the built-in Substring. The only difference is it takes in a Start and End parameter instead of the default Start and Length. (Basically the Java version of Substring)</span></div>\n<div></div>\n<div><span>Reverse</span></div>\n<div></div>\n<div><span>Reverses a string without the need for a recursive function.</span></div>\n<div></div>\n<div><span>SplitQuotes</span></div>\n<div></div>\n<div><span>This C# function works like the built-in Split function. The only difference is it will respect parts of a string surrounded by quotes. For example the string </span><span>This is a &#x201C;very long&#x201D; string</span><span> would get split into: <br></span><span>This<br>is<br>a<br>very long<br>string</span><span><br>Careful however, the function does not work with nested quotes.</span></div>\n</td>\n<td valign=\"top\" width=\"50%\"></td>\n</tr>\n</tbody>\n</table>\n<div></div>\n</div>\n\t\t\t"}