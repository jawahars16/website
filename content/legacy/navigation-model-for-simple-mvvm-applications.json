{"meta":{"featuredImage":"https://wpfplayground.files.wordpress.com/2014/06/navigation.png","published_date":"2014-06-04T00:00:00.000Z","postId":"navigation-model-for-simple-mvvm-applications","title":"Navigation Model for simple MVVM applications","excerpt":"\t\t\tNot all the WPF applications are huge. A very few are still used as utilities, installers and simple tools to achieve a specific task. Navigation is very trivial in applications. PRISM supports a very nice navigation framework. To develop such simple WPF applications, developers really hesitate t","tags":["mvvm","navigation","PRISM","wpf"]},"content":"\n\t\t\t\t<p>Not all the WPF applications are huge. A very few are still used as utilities, installers and simple tools to achieve a specific task. Navigation is very trivial in applications. PRISM supports a very nice navigation framework.&#xA0;To develop such simple WPF applications, developers really hesitate to use big frameworks like PRISM, Caliburn Micro, etc.</p>\n<p>So I thought of develop a simple helpers which achieve navigation in small MVVM applications without need of any enterprise frameworks. Let us develop a simple application looks like below, using this simple navigation model.</p>\n<p><span id=\"more-273\"></span></p>\n<p>Download the sample and you will find a Navigation library with simple helper classes.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png\"><img data-attachment-id=\"276\" data-permalink=\"https://wpfplayground.wordpress.com/2014/06/04/navigation-model-for-simple-mvvm-applications/navigation/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png\" data-orig-size=\"525,350\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"navigation\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=525\" src=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=736\" alt=\"navigation\" srcset=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png 525w, https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=300 300w\" sizes=\"(max-width: 525px) 100vw, 525px\"></a></p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>Declare regions in the shell, where the views needs to be injected at run time.&#xA0;Following is the way to declare a region in XAML.</p>\n<pre><code>&lt;ContentControl<br>nav:NavigationRegion.RegionName=&quot;{x:Static constants:RegionNames.MainRegion}&quot; /&gt;<br></code></pre>\n<p>This ContentControl will act as a region and views will be injected as content. NavigationService is a static class which contains the following methods.</p>\n<ul>\n<li>NavigateTo (Method which helps to inject a view into specific region)</li>\n<li>GoBack (Method helps to navigate back to previous view)</li>\n<li>CanGoBack (Method decides whether the region has the ability to go back)</li>\n<li>ClearViews (Method used to clear all views from the region)</li>\n</ul>\n<p>NavigateTo method accepts two parameters, the region name and the view object. The NavigationService will keep a record of registered regions. Also it keep track of views history in a stack.</p>\n<p>Here is how navigate and go back will work,</p>\n<pre><code>    public class ShellViewModel<br>    {<br>        public ShellViewModel()<br>        {<br>            NavigationService.NavigateTo(RegionNames.HeaderRegion, new HeaderView(new HeaderViewModel()));<br>            NavigationService.NavigateTo(RegionNames.NavigationRegion, new NavigationView(new NavigationViewModel()));<br>            NavigationService.NavigateTo(RegionNames.MainRegion, new FirstView());<br>        }<br>    }<br></code></pre>\n<p>The back button in the header region will be disabled, if there is no possibility for back navigation.</p>\n<pre><code>        public DelegateCommand&lt;object&gt; BackCommand<br>        {<br>            get<br>            {<br>                return new DelegateCommand&lt;object&gt;(this.OnGoBack, this.CanGoBack);<br>            }<br>        }<br><br>        private void OnGoBack(object obj)<br>        {<br>            NavigationService.GoBack(RegionNames.MainRegion);<br>        }<br><br>        private bool CanGoBack(object arg)<br>        {<br>            return NavigationService.CanGoBack(RegionNames.MainRegion);<br>        }<br></code></pre>\n<p><a title=\"Download Sample\" href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/NavigationDemo.zip\">Download Sample</a></p>\n<p>Happy Coding!!!</p>\n<p>&#xA0;</p>\n\t\t\t"}