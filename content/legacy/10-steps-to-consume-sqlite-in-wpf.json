{"meta":{"featuredImage":"http://lh5.ggpht.com/-VRpjFrDEIA0/Uhi4n8O1Y4I/AAAAAAAABTM/Mnkm6ii2fs4/Capture_thumb%25255B6%25255D.png?imgmax=800","published_date":"2013-08-24T00:00:00.000Z","postId":"10-steps-to-consume-sqlite-in-wpf","title":"10 Steps to consume SQLite in WPF","excerpt":"\t\t\tSQL Lite is the compact database system used by more client applications to manage local data. It is more lightweight and easy to use. This article will explain how to create SQL Lite DB and connect it to a WPF client application. Let’s create a simple client app which read employees data from lo","tags":[]},"content":"\n\t\t\t\t<p>SQL Lite is the compact database system used by more client applications to manage local data. It is more lightweight and easy to use. This article will explain how to create SQL Lite DB and connect it to a WPF client application. Let&#x2019;s create a simple client app which read employees data from local SQL Lite DB.</p>\n<p>1. SQL Lite Adminstrator tool can be downloaded from the following link. From where we can manage our tables, queries, triggers and stored procedures.</p>\n<p><span id=\"more-6\"></span></p>\n<p><a href=\"http://sqliteadmin.orbmu2k.de/\">http://sqliteadmin.orbmu2k.de/</a></p>\n<p>2. SQL Lite binaries can be downloaded from below link. (The following assemblies compiled against .NET 2.0).</p>\n<p><a title=\"http://sourceforge.net/projects/sqlite-dotnet2/\" href=\"http://sourceforge.net/projects/sqlite-dotnet2/\">http://sourceforge.net/projects/sqlite-dotnet2/</a></p>\n<p>3. Now let&#x2019;s jump into WPF client application. We can go ahead with MVVM pattern. Our application will contain a main view where we can have a DataGrid to list the employees. And we need a viewmodel class which holds the EmployeeCollection property. Also we need a model class class which can store details of Employee</p>\n<p><a href=\"http://lh4.ggpht.com/-PAEDXd1zP8Y/Uhi2bVn-bSI/AAAAAAAABSw/5tD_pZDtFn4/s1600-h/Project%25255B2%25255D.png\"><img title=\"Project\" alt=\"Project\" src=\"https://i1.wp.com/lh6.ggpht.com/-usNi5jEn17Y/Uhi2cZJMB7I/AAAAAAAABS4/UBcOpvaX2o8/Project_thumb.png\" width=\"208\" height=\"244\" border=\"0\"></a></p>\n<p>4. Now lets&#x2019; create the data. Open the SQL Lite Admin tool. Create a new database. (DB.Employee). Run the following query to create a new table (Employee).</p>\n<div><span><span><span>CREATE</span><span>&#xA0;</span><span>TABLE</span><span>&#xA0;</span><span>Employee(</span></span></span><span><br>\n</span><span><span><span>EmployeeID</span><span>&#xA0;</span><span>NUMERIC</span><span>&#xA0;</span><span>PRIMARY</span><span>&#xA0;</span><span>KEY</span><span>,</span></span></span><span><br>\n</span><span><span><span>Name</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>),</span></span></span><span><br>\n</span><span><span><span>Email</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>),</span></span></span><span><br>\n</span><span><span><span>Phone</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>))</span> ;</span></span></div>\n<div></div>\n<div><a href=\"http://lh3.ggpht.com/-onB4aXG4VX4/Uhi4mrCUyQI/AAAAAAAABTE/RnCmDJb6FVE/s1600-h/Capture%25255B8%25255D.png\"><img title=\"Capture\" alt=\"Capture\" src=\"https://i1.wp.com/lh5.ggpht.com/-VRpjFrDEIA0/Uhi4n8O1Y4I/AAAAAAAABTM/Mnkm6ii2fs4/Capture_thumb%25255B6%25255D.png\" width=\"454\" height=\"230\" border=\"0\"></a></div>\n<div>5. Add a new configuration file to your project to add connection string as below. Since the SQLLite assemblies compiled against 2.0 it will not work under .NET 4.0 environment. To make it compatible, set the attribute useLegacyV2RuntimeActivationPolicy to true. Otherwise it will crash the application.</div>\n<div><span><span><span>&lt;</span><span>connectionStrings</span><span>&gt;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0; </span></span><span><span><span>&lt;</span><span>add</span><span> name</span><span>=&#x201D;SQLiteDb&#x201D;</span><span> connectionString</span><span>=&#x201D;Data Source=AppData/DB.Employee.s3db;Version=3;&#x201D;</span><span>&#xA0;</span></span></span><span><span><span>/&gt;<br>\n&lt;/</span><span>connectionStrings</span><span>&gt;</span></span></span></div>\n<div>6. EmployeeService class will have static methods to query the DB. We are going to use this class from our viewmodel.</div>\n<div><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span><span><span>public</span><span>&#xA0;</span><span>static</span><span>&#xA0;</span><span>string</span><span>&#xA0;</span><span>ConnectionString</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>get</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>return</span><span>&#xA0;</span><span>ConfigurationManager.ConnectionStrings[</span><span>&#x201C;SQLiteDb&#x201D;</span><span>].ConnectionString</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><p></p>\n<p><span><span><span>public</span><span>&#xA0;</span><span>static</span><span>&#xA0;</span><span>List</span><span>&#xA0;</span><span>GetEmployees()</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>var</span><span>&#xA0;</span><span>list</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>List</span><span>()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>string</span><span>&#xA0;</span><span>query</span><span>&#xA0;</span><span>=</span><span> &#x201C;Select * from Employee&#x201D;</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>using</span><span>&#xA0;</span><span>(</span><span>var</span><span>&#xA0;</span><span>connection</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>SQLiteConnection(ConnectionString))</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>using</span><span>&#xA0;</span><span>(</span><span>var</span><span>&#xA0;</span><span>command</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>SQLiteCommand(query,</span><span>&#xA0;</span><span>connection))</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>connection.Open()</span><span>;</span></span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></p>\n<p><span><span><span>SQLiteDataReader</span><span>&#xA0;</span><span>rd</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>command.ExecuteReader()</span><span>;</span></span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></p>\n<p><span><span><span>while</span><span>&#xA0;</span><span>(rd.Read())</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>var</span><span>&#xA0;</span><span>model</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>EmployeeModel()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Name</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>1</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Email</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>2</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Phone</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>3</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>list.Add(model)</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>return</span><span>&#xA0;</span><span>list</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>}</span> </span></span></p></div>\n<div>\n<p>7. On constructor of ViewModel, call the GetEmployees method to populate the collection.</p>\n</div>\n<div><span><span><span>this</span><span>.Employees</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>EmployeeService.GetEmployees()</span><span>;</span></span></span></div>\n<div>8. Set EmployeeViewModel as DataContext for shell window.9. Bind Employees property to DataGrid ItemsSource property.<p></p>\n</div>\n<div><span><span><span>&lt;</span><span>DataGrid</span><span> Margin</span><span>=&#x201D;5&#x2033;</span><span> ItemsSource</span><span>=&#x201D;{Binding Employees}&#x201D;</span></span></span><span><span>/&gt;</span><br>\n</span><br>\n10. Run the application. That&#x2019;s it.Stay tuned for more articles on SQL Lite.<p></p>\n</div>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/SQLLiteDemo.zip\">Download Sample</a></p>\n\t\t\t"}