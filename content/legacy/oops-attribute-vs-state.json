{"meta":{"tags":[],"featuredImage":"https://storage.googleapis.com/jawahar-tech/1560609615997.jpg","published_date":"2019-02-16T18:30:00.000Z","postId":"oops-attribute-vs-state","title":"OOPS - Attribute vs State","excerpt":"In Object oriented programming objects are the fundamental unit. Usually an object is defined to have two characteristics. State and behaviorState is defined through variables, properties or functions (getter and setter) depends on the language. Behavior is usually defined through functions. Most of"},"content":"<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>In Object oriented programming objects are the fundamental unit. Usually an object is defined to have two characteristics. </p><div></div><blockquote> <div>State and behavior</div></blockquote> <div></div><p>State is defined through variables, properties or functions (getter and setter) depends on the language. </p><div></div><p>Behavior is usually defined through functions. </p><div></div><p>Most of the times, the term <strong>state represent both attribute and state</strong> of an object. But state and attribute are not same.</p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2>Attribute</h2> <div></div><p>Attributes are immutable. When you create an object you set attributes. And those attribute values most likely do not change throughout the lifetime of object. </p><div></div><p>For example consider the below pseudocode.</p><div> <div> <pre><code>class Dog {<br>  // Attributes<br>  color;<br>  age;<br><br>  // State<br>  isThirsty;<br><br> // Behavior<br>  run();<br>}<br></code></pre> </div></div><p>The object dog here holds two attributes color and age. When you create a dog object you define the age and color. Actually you can create an object with colour attribute set to Black. So logically you are creating a Black dog. And the dog remains Black throughout the object lifetime. If you want to create a red dog you may have to create another dog object with red colour. </p><div></div><p>The way of creating objects with immutable attributes varies from language to language. Typical method is to create properties with private set function. </p><div></div><p>In above example color is an attribute. That doesn&apos;t mean color has to be an attribute in all cases. It will change based on the context. For example consider consider traffic light as an object, where color is not an attribute but a state.</p><div></div><h2>State</h2> <div></div><p>States are mutable. The state of an object changes several times throughout it&apos;s lifetime. The state gets changes either by some function applied on the object or through an event outside of the object. There are other scenarios but these are the typical cases. For example if the run function called frequently in dog object the thirsty state may toggle to true. </p><div></div><div> <hr/> </div><div></div><p>Sometimes in programming you may need to create an object without state but only attributes. Those objects are actually passive and do not have any behaviours. It is literally representing a group of logically related attributes. </p><div></div><p>Every object oriented programming language must have an option to create such objects. We can use structs in C# and objects with private set functions in Java. </p><div></div><p>This is one of the criteria to decide between struct and class in C#. When we create such structures in C#, make sure it is always immutable. Because mutable structures and public fields are always dangerous. </p><div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/500x649.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610701.jpg\"></div></div></div><div></div><div></div><p><a href=\"https://techiesimon.com/2017/02/18/mutable-structs-are-evil-yes-really/\" target=\"_blank\" rel=\"noopener\">Understand why mutable structs are evil. </a></p><p><a href=\"https://www.reddit.com/r/java/comments/2pqq1r/why_are_public_fields_so_demonized_in_java/\" target=\"_blank\" rel=\"noopener\">Why public fields are demonized in Java?</a></p><div></div></div></div></div>"}