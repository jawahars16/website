{"meta":{"featuredImage":"http://www.codeproject.com/KB/WPF/374887/Eyedropper_control.png","published_date":"2012-04-28T00:00:00.000Z","postId":"eye-dropper-control-in-wpf","title":"Eye Dropper control in WPF","excerpt":"\t\t\t\n   Introduction \n(View this article in Code Project)\n\nUsually we come across different types of eye dropper controls in designers. We can move the mouse over the desktop and other applications to pick the color under the mouse. A normal eye dropper will pick color only within the application lik","tags":[]},"content":"\n\t\t\t\t<div dir=\"ltr\"><p></p>\n<h2>   Introduction&#xA0;</h2>\n<div><a href=\"http://www.codeproject.com/Articles/374887/Eye-Dropper-control-in-WPF\" target=\"_blank\">(View this article in Code Project)</a></div>\n<div></div>\n<div align=\"baseline\">Usually we come across different types of eye dropper controls in designers. We can move the mouse over the desktop and other applications to pick the color under the mouse.&#xA0;A normal eye dropper will pick color only within the application like the one in Adobe Illustrator or Photoshop. But the control I posted here will helps you to choose color from anywhere even outside your application like the one in Expression Blend or Visual Studio Designer.&#xA0;</div>\n<div><img height=\"259\" src=\"https://i1.wp.com/www.codeproject.com/KB/WPF/374887/Eyedropper_control.png\" width=\"400\"></div>\n<h2>   <span>Implementation</span></h2>\n<div>The base idea is to pick color from the screen&#xA0;wherever the mouse moving.&#xA0;The underlying magic behind the implementation is, need to take a snap shot of the entire desktop. For every mouse move we going to pick the appropriate pixel information from the image.</div>\n<h3>   Capturing Screenshot&#xA0;</h3>\n<div>Lets start with capturing the screen shot,&#xA0;</div>\n<div>Capturing the screenshot is pretty easy with Windows Forms. But in WPF, we need to call&#xA0;<a href=\"http://www.pinvoke.net/\" target=\"_blank\" title=\"http://www.pinvoke.net/\">pinvoke&#xA0;</a>methods&#xA0;to do that. We need few methods from User32.dll and gdi32.dll.</div>\n<div id=\"premain0\"></div>\n<pre><code>public class InteropHelper<br>    {<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern IntPtr GetDesktopWindow();<br><br>        // http://msdn.microsoft.com/en-us/library/dd144871(VS.85).aspx<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern IntPtr GetDC(IntPtr hwnd);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183370(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        [return: MarshalAs(UnmanagedType.Bool)]<br>        public static extern bool BitBlt(IntPtr hDestDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, Int32 dwRop);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183488(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        public static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183489(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;, SetLastError = true)]<br>        public static extern IntPtr CreateCompatibleDC(IntPtr hdc);<br><br>        // http://msdn.microsoft.com/en-us/library/dd162957(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;, ExactSpelling = true, PreserveSig = true, SetLastError = true)]<br>        public static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183539(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        public static extern bool DeleteObject(IntPtr hObject);<br><br>        // http://msdn.microsoft.com/en-us/library/dd162920(VS.85).aspx<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern int ReleaseDC(IntPtr hwnd, IntPtr dc);<br>}  </code></pre>\n<div></div>\n<div>Using these Interop Helpers take a screen shot of your desktop. The screen capture method will get parameters like X, Y, Width and height parameters. Since we going to take snap shot of the entire screen, get Width and Height of the screen using the static class&#xA0;<code>SystemParameters.&#xA0;</code></div>\n<div><code></code></div>\n<div id=\"premain1\"></div>\n<pre><code>public static BitmapSource CaptureRegion(IntPtr hWnd, int x, int y, int width, int height)<br>        {<br>            IntPtr sourceDC = IntPtr.Zero;<br>            IntPtr targetDC = IntPtr.Zero;<br>            IntPtr compatibleBitmapHandle = IntPtr.Zero;<br>            BitmapSource bitmap = null;<br><br>            try<br>            {<br>                // gets the main desktop and all open windows<br>                sourceDC = InteropHelper.GetDC(InteropHelper.GetDesktopWindow());<br><br>                //sourceDC = User32.GetDC(hWnd);<br>                targetDC = InteropHelper.CreateCompatibleDC(sourceDC);<br><br>                // create a bitmap compatible with our target DC<br>                compatibleBitmapHandle = InteropHelper.CreateCompatibleBitmap(sourceDC, width, height);<br><br>                // gets the bitmap into the target device context<br>                InteropHelper.SelectObject(targetDC, compatibleBitmapHandle);<br><br>                // copy from source to destination<br>                InteropHelper.BitBlt(targetDC, 0, 0, width, height, sourceDC, x, y, InteropHelper.SRCCOPY);<br><br>                // Here&apos;s the WPF glue to make it all work. It converts from an<br>                // hBitmap to a BitmapSource. Love the WPF interop functions<br>                bitmap = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(<br>                    compatibleBitmapHandle, IntPtr.Zero, Int32Rect.Empty,<br>                    BitmapSizeOptions.FromEmptyOptions());<br><br>            }<br>            catch (Exception ex)<br>            {<br><br>            }<br>            finally<br>            {<br>                DeleteObject(compatibleBitmapHandle);<br>                ReleaseDC(IntPtr.Zero, sourceDC);<br>                ReleaseDC(IntPtr.Zero, targetDC);<br>            }<br><br>            return bitmap;<br>        } </code></pre>\n<div>Method invoke:</div>\n<div id=\"premain2\"></div>\n<pre><code>InteropHelper.CaptureRegion(InteropHelper.GetDesktopWindow(),(int)SystemParameters.VirtualScreenLeft,(int)SystemParameters.VirtualScreenTop, (int)SystemParameters.PrimaryScreenWidth,(int)SystemParameters.PrimaryScreenHeight); </code></pre>\n<h3>   Global Mouse position&#xA0;</h3>\n<div>Now we are done with taking the screen shot. Lets pick the color from the appropriate pixel by matching the mouse position. So now we need the Mouse Move event for not only the entire application but also outside of the app to get the mouse position.&#xA0;To achieve a global mouse move hook, we need some native method calls as explained in this<a href=\"http://www.codeproject.com/Articles/7294/Processing-Global-Mouse-and-Keyboard-Hooks-in-C\" target=\"_blank\" title=\"http://www.codeproject.com/Articles/7294/Processing-Global-Mouse-and-Keyboard-Hooks-in-C\">article</a>.&#xA0;But this is little bit complex. So I have started a timer while clicking the eye dropper button. And each tick of the timer, I am getting the mouse position using the following code,</div>\n<div id=\"premain3\"></div>\n<pre><code>System.Drawing.Point _point = System.Windows.Forms.Control.MousePosition;<br></code></pre>\n<h3>   Copy Pixel Information&#xA0;</h3>\n<div>Now we are done with getting the mouse position. Using this position get the appropriate pixel information from the<code>BitmapSource&#xA0;</code>that we have taken.&#xA0;<code>BitmapSource.CopyPixel</code>&#xA0;will give you an array of bytes, in which the first 3 values are enough to find the color.&#xA0;</div>\n<div id=\"premain4\"></div>\n<pre><code>int stride = (screenimage.PixelWidth * screenimage.Format.BitsPerPixel + 7) / 8;<br>pixels = new byte[screenimage.PixelHeight * stride];<br>Int32Rect rect = new Int32Rect((int)point.X, (int)point.Y, 1, 1);<br>screenimage.CopyPixels(rect, pixels, stride, 0);<br>rectcolor.Fill = new SolidColorBrush(Color.FromRgb(pixels[2], pixels[1], pixels[0])); </code></pre>\n<h3>   Global Mouse cursor&#xA0;&#xA0;</h3>\n<div><em>(The following implementation has not included in the attached sample and source code for safety reasons, since it will affect the client registry values. It was considered the following code may risky in certain conditions and&#xA0;ignored in the sample.)</em><span>&#xA0;</span></div>\n<div><span><br></span></div>\n<div>Everything is fine except the mouse cursor. &#xA0;It is very obvious that we can change the cursor in WPF using<code>FrameworkElement.Cursor</code>. But the trick is, it only works within your application and not outside your application Main Window. In case if you want to change the cursor for the entire OS, we don&#x2019;t have any direct way in WPF. But most of the developers worried why we need to change the entire Windows cursor. But take an example, if we are developing an eye dropper control in WPF (used to pick color). Not like the one in Illustrator or Photoshop (cannot pick color outside the application), but the one we have in Expression Blend or Visual Studio designer (can pick color even outside the application also).</div>\n<div>In that cases, the cursor should be changed, because arrow cursor will not be a comfortable one to pick color. Normally cursor values resides in registry.</div>\n<div><strong>Registry Key</strong>&#xA0;:&#xA0;<em>HKEY_CURRENT_USER\\Control Panel\\Cursors</em></div>\n<div>Changing the values here will change the cursor, but your system needs a reboot to take effect (I can understand, none of the developers will accept this). To avoid that and make your app. taking immediate effect, you need to invoke a&#xA0;<code>pinvoke&#xA0;</code>call.&#xA0;</div>\n<div>The following method will refresh the cursor &#xA0;values,&#xA0;</div>\n<div id=\"premain5\"></div>\n<pre><code>[DllImport(&quot;user32.dll&quot;, EntryPoint = &quot;SystemParametersInfo&quot;)]<br>public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);  </code></pre>\n<div>Iterate through registry values and change the cursor path.&#xA0;</div>\n<div id=\"premain6\"></div>\n<pre><code>private void ChangeCursor()<br>        {<br>            RegistryKey pRegKey = Registry.CurrentUser;<br>            pRegKey = pRegKey.OpenSubKey(@&quot;Control Panel\\Cursors&quot;);<br>            paths.Clear();<br>            foreach (var key in pRegKey.GetValueNames())<br>            {<br>                Object _key = pRegKey.GetValue(key);<br>                //Take a backup.<br><br>                paths.Add(key, _key.ToString());<br>                Object val = Registry.GetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, null);<br>                Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, &quot;foo.cur&quot;);<br>            }<br>           <br>            SystemParametersInfo(InteropHelper.SPI_SETCURSORS, 0, null, InteropHelper.SPIF_UPDATEINIFILE | InteropHelper.SPIF_SENDCHANGE);  <br>        }<br></code></pre>\n<div>Make sure you store the registry values before change it, so that you can restore the cursor to the default values.&#xA0;</div>\n<div id=\"premain7\"></div>\n<pre><code> private void ResetCursorToDefault()<br>        {<br>            RegistryKey pRegKey = Registry.CurrentUser;<br>            pRegKey = pRegKey.OpenSubKey(@&quot;Control Panel\\Cursors&quot;);<br>            foreach (string key in paths.Keys)<br>            {<br>                string path = paths[key];<br>                Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, path);<br>            }<br>            InteropHelper.SystemParametersInfo(InteropHelper.SPI_SETCURSORS, 0, null, InteropHelper.SPIF_UPDATEINIFILE | InteropHelper.SPIF_SENDCHANGE);<br>        }  </code></pre>\n<div></div>\n<div></div>\n<div><a href=\"http://dl.dropbox.com/u/71941230/EyeDropper.zip\" target=\"_blank\"><span>Download Demo&#xA0;&#x2013; 14.9 KB</span>&#xA0;</a></div>\n<div></div>\n<div><a href=\"http://dl.dropbox.com/u/71941230/SourceCode.zip\" target=\"_blank\"><span>Download Source code&#xA0;&#x2013; 20.1 KB</span>&#xA0;</a></div>\n<p></p></div>\n\t\t\t"}