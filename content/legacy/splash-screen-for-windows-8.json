{"meta":{"title":"Splash screen for Windows 8","excerpt":"\t\t\tWhen users launch an app, they are immediately welcome by the splash screen. Every Windows 8 app has a splash screen, which consists of a 620×300 image and solid background color. Windows presents the splash screen on your behalf in order to welcome users while your app is activated. The activate","tags":[],"featuredImage":"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png","published_date":"2012-09-27T00:00:00.000Z","postId":"splash-screen-for-windows-8"},"content":"\n\t\t\t\t<p>When users launch an app, they are immediately welcome by the splash screen. Every Windows 8 app has a splash screen, which consists of a 620&#xD7;300 image and solid background color. Windows presents the splash screen on your behalf in order to welcome users while your app is activated. The activated event is received by all apps on launch, and gives your app the ability to perform any initialization work needed to present its initial UI.</p>\n<p><span id=\"more-21\"></span></p>\n<p>The splash screen URL has to be mentioned in application manifest file.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png\"><img data-attachment-id=\"490\" data-permalink=\"https://wpfplayground.wordpress.com/2012/09/27/splash-screen-for-windows-8/splashscreen/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png\" data-orig-size=\"862,304\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"splashscreen\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=736\" src=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=736&amp;h=259\" alt=\"splashscreen\" srcset=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=734&amp;h=259 734w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=150&amp;h=53 150w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=300&amp;h=106 300w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=768&amp;h=271 768w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png 862w\" sizes=\"(max-width: 736px) 100vw, 736px\"></a></p>\n<p>If you are interested in monitor when the splash screen has been dismissed, you can use the splash screen API. The API includes the SplashScreen.Dismissed event, which indicates when the transition from splash screen to app start page has occurred. This may be useful if you want to know when your skeleton landing page is in view.</p>\n<p>As you will see in the following example, your app can begin executing operations to fill the landing page inside of the launched callback. To optionally learn when the splash screen is dismissed, use the activated event args to obtain the splash screen object. Using this object, register for the dismissed event to be notified of splash screen dismissal.</p>\n<pre><code>async protected override void OnLaunched(LaunchActivatedEventArgs args)<br>{<br>    // Begin executing setup operations.<br>    PerformSetupTasks();<br><br>    // Retrieve splash screen object.<br>    SplashScreen splashScreen = args.SplashScreen;<br><br>    // Register an event handler to be executed when the splash screen has been dismissed.<br>    splashScreen.Dismissed += new TypedEventHandler&lt;SplashScreen, object&gt;(eSplash.onSplashScreenDismissed);<br>    ...<br>}<br><br>internal void PerformSetupTasks()<br>{<br>    // Begin additional loading tasks here&#x2026;<br>    ...<br>}<br><br>internal void onSplashScreenDismissed(Windows.ApplicationModel.Activation.SplashScreen sender, object e)<br>{<br>    // The splash screen has dismissed and the skeleton landing page is now in view.<br>    ...<br>}</code></pre>\n<pre><code></code></pre>\n\t\t\t"}