{"meta":{"published_date":"2014-12-02T00:00:00.000Z","postId":"5-tricks-you-dont-know-in-wpf","title":"5 Tricks you should know in WPF – PART 1","excerpt":"\t\t\t1. Write C# Code in XAML\nWe all know that XAML is a design language which helps in building user interface. But how many of us know, that, it is possible to write C# code inside XAML. This can be achived using x:Code. This attribute allows placement of code within a XAML production.\nThe code with","tags":["cdata","code","design","namespace","tips","tricks","wpf","x:Name","xaml"],"featuredImage":"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png"},"content":"\n\t\t\t\t<h1>1. Write C# Code in XAML</h1>\n<p>We all know that XAML is a design language which helps in building user interface. But how many of us know, that, it is possible to write <strong>C# code inside XAML</strong>. This can be achived using <strong>x:Code</strong>. This attribute allows placement of code within a XAML production.</p>\n<p>The code within the x:Code XAML directive element is still interpreted within the general XML namespace and the XAML namespaces provided. Therefore, it is usually necessary to enclose the code used for x:Code inside a <strong>CDATA</strong> segment.</p>\n<p><span id=\"more-502\"></span></p>\n<pre><code>    &lt;Grid&gt;<br>        &lt;Button Content=&quot;Click me&quot;<br>                Click=&quot;Button_Click&quot;/&gt;<br>        &lt;x:Code&gt;<br>            &lt;![CDATA[<br>            private void Button_Click(object sender, RoutedEventArgs e)<br>            {<br>                MessageBox.Show(&quot;hey, I am from XAML&quot;);<br>            }<br>            ]]&gt;<br>        &lt;/x:Code&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<p>Even though XAML has the flexibility to add C# to it, it is not recommended to follow this approach. Because WPF always prefer developers to separate design code and business code as much as possible. Remember why we follow MVVM !!!. Also it does not support intellisense, that will make difficult in write code. In other hand, <em>using</em> directives cannot be declared so we need to use fully qualified names.</p>\n<p><strong>2. LINQ to Visual Tree</strong></p>\n<p>There are various situations where we need to traverse the visual tree and get the element that we are looking for. Traversing a visual tree is not so straight forward. But how about applying LINQ queries over visual objects in WPF. I hope you remember the XML way of traversing. (XElement.Descendants).</p>\n<p><a href=\"http://www.scottlogic.com/blog/ceberhardt/\">Colin Eberhardt</a> written a nice <a href=\"http://www.codeproject.com/Articles/62397/LINQ-to-Tree-A-Generic-Technique-for-Querying-Tree\">article</a> on it.</p>\n<pre><code>// get all the TextBox&apos;s which have a Grid as direct parent<br>var itemsFluent = this.Descendants&amp;amp;lt;TextBox&amp;amp;gt;()<br>                      .Where(i =&amp;amp;gt; i.Ancestors().FirstOrDefault() is Grid);<br><br>var itemsQuery = from v in this.Descendants&amp;amp;lt;TextBox&amp;amp;gt;()<br>                 where v.Ancestors().FirstOrDefault() is Grid<br>                 select v;<br><br>// get all the StackPanels that are within another StackPanel visual tree<br>var items2Fluent = this.Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                       .Descendants&amp;amp;lt;StackPanel&amp;amp;gt;();<br><br>var items2Query = from i in<br>                     (from v in this.Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                      select v).Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                  select i;<br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png\"><img data-attachment-id=\"512\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/02/5-tricks-you-dont-know-in-wpf/linqtotree/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png\" data-orig-size=\"712,849\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"LINQToTree\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=712\" src=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252&amp;h=300\" alt=\"LINQToTree\" width=\"252\" height=\"300\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252&amp;h=300 252w, https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=504&amp;h=600 504w, https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=126&amp;h=150 126w\" sizes=\"(max-width: 252px) 100vw, 252px\"></a></p>\n<h1>3. Design Time Attributes</h1>\n<p>Have you ever wonder what is mc:Ignorable=&#x201D;d&#x201D;, which usually declared automatically in your page root element? These namespace provides XAML definitions that will ignored by the XAML processor during run time. This is really helpful for XAML designers, especially who works with Expression Blend.</p>\n<p>The <strong>d:DesignHeight</strong> and <strong>d:DesignWidth</strong> sets a fixed height and width for the element at designtime.</p>\n<pre><code>&lt;UserControl x:Class=&quot;WpfApplication16.UserControl1&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; <br>             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; <br>             mc:Ignorable=&quot;d&quot; <br>             d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot;&gt;<br>    &lt;Grid &gt;<br>            <br>    &lt;/Grid&gt;<br>&lt;/UserControl&gt;<br></code></pre>\n<p>If designers want to work with sample data, it is possible with setting a design time DataContext. This datacontext will not be processed during run time.</p>\n<pre><code>    &lt;Grid&gt;<br>        &lt;Grid.Resources&gt;<br>            &lt;local:ViewModel x:Key=&quot;DesignTimeViewModel&quot; /&gt;<br>        &lt;/Grid.Resources&gt;<br>        &lt;Grid d:DataContext=&quot;{StaticResource DesignTimeViewModel}&quot;&gt;<br>            &lt;TextBlock Text=&quot;test&quot; /&gt;<br>        &lt;/Grid&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<h1>4. IsMouseOver and IsMouseDirectlyOver</h1>\n<p>Some times, we may not even consider the differences between these two properties. Using these properties without understanding it may impact the UI logic. The IsMouseOver property for a user interface element indicates whether the mouse is currently located over the element or any of its children.</p>\n<p>For example, for a Button contained in a StackPanel, when the user moves the mouse over the Button, IsMouseOver will be true for both the Button and the StackPanel. The IsMouseDirectlyOver, on the other hand, indicates whether the mouse is over a control and not over any of its children. So in this case, IsMouseDirectlyOver will be true for Button and false for StackPanel.</p>\n<h1>5. Name and x:Name</h1>\n<p>x:Name is a designer generated variable, used mainly to reference elements. When you give an element the x:Name XAML attribute, &#x201C;the specified x:Name becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.&#x201D;</p>\n<p>Name is the existing string property of a FrameworkElement, listed as any other WPF element property in the form of a XAML attribute. So the control which not inherited from Framework Element cannot use Name attribute. but can use x:Name attribute. So it is always better to use x:Name which covers everything.</p>\n\t\t\t"}