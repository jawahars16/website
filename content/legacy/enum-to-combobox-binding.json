{"meta":{"tags":[],"featuredImage":"http://lh5.ggpht.com/-CwW_It4w_a0/UX4NJI3-kmI/AAAAAAAABQU/gtcq0s1ZKAI/image_thumb10.png?imgmax=800","published_date":"2013-04-29T00:00:00.000Z","postId":"enum-to-combobox-binding","title":"Enum to ComboBoxÂ binding","excerpt":"\t\t\tAny real world appliation would like bind the Enum values to a ComboBox. So it is always better to have common code that will do the logic. Below, I have a helper class which exposed a property to get the enum type, so that I can resolve the enum values.\n\n\n   1: public static Type GetEnum(Depende"},"content":"\n\t\t\t\t<div dir=\"ltr\">Any real world appliation would like bind the Enum values to a ComboBox. So it is always better to have common code that will do the logic. Below, I have a helper class which exposed a property to get the enum type, so that I can resolve the enum values.<p></p>\n<div id=\"codeSnippetWrapper\">\n<div id=\"codeSnippet\">\n<pre><code>   1: public static Type GetEnum(DependencyObject obj)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             return (Type)obj.GetValue(EnumProperty);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:         public static void SetEnum(DependencyObject obj, string value)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:             obj.SetValue(EnumProperty, value);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         // Using a DependencyProperty as the backing store for Enum.  This enables animation, styling, binding, etc...</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         public static readonly DependencyProperty EnumProperty =</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:             DependencyProperty.RegisterAttached(&quot;Enum&quot;, typeof(Type), typeof(EnumHelper), new PropertyMetadata(null, OnEnumChanged));</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Get the values of enum and set it as ComboBox ItemsSource.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: private static void OnEnumChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             var control = sender as ItemsControl;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:             if (control != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:             {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:                 if (e.NewValue != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:                     var _enum = Enum.GetValues(e.NewValue as Type);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:                     control.ItemsSource = _enum;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:             }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:         }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Now the ComboBox will bind to the enum values, if we set the enum value in XAML.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public enum Designation</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:         SoftwareEngineer,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:         TeamLead,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         ProductManager</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:     }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p></p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: &lt;ComboBox x:Name=&quot;Designation&quot; Margin=&quot;5&quot; Grid.Row=&quot;5&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:                          SelectedItem=&quot;{Binding Designation, Mode=TwoWay}&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:                          local:EnumHelper.Enum=&quot;{x:Type local:Designation}&quot;&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:                   </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5: &lt;/ComboBox&gt;</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p></p>\n<div><a href=\"http://lh6.ggpht.com/-QY_gUY3kSSY/UX4NHT3uMhI/AAAAAAAABP8/rBuP_hwuwaU/s1600-h/image8.png\"><img align=\"left\" alt=\"image\" border=\"0\" height=\"137\" src=\"https://i1.wp.com/lh3.ggpht.com/-dguBFDsAySA/UX4NHw7l9WI/AAAAAAAABQE/CH5mNCRUwcs/image_thumb6.png\" title=\"image\" width=\"320\"></a></div>\n<p>Look at the names of every item. It is not well spaced. It should be Product Manager instead of ProductManager. For this we will use the Display attribute to enum values. Further we can also use Description attribute to let the user see more details.</p>\n<p>I have modified my enum looks below.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public enum Designation</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:         [Display(Name=&quot;Software Engineer&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         [Description(&quot;Software engineer responsible for core developement.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:         SoftwareEngineer,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         [Display(Name = &quot;Team Lead&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:         [Description(&quot;Team lead responsible for leading a small team of 5 to 10 members.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         TeamLead,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         [Display(Name = &quot;Product Manager&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         [Description(&quot;Product manager responsible for core management.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:         ProductManager</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  14:     }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Also our helper class should expose another property to get the values of attributes and set it wherever needed. For example, in this case I will show the description as tooltip and display as text.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public static bool GetMoreDetails(DependencyObject obj)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             return (bool)obj.GetValue(MoreDetailsProperty);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:         public static void SetMoreDetails(DependencyObject obj, bool value)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:             obj.SetValue(MoreDetailsProperty, value);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         // Using a DependencyProperty as the backing store for MoreDetails.  This enables animation, styling, binding, etc...</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         public static readonly DependencyProperty MoreDetailsProperty =</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:             DependencyProperty.RegisterAttached(&quot;MoreDetails&quot;, typeof(bool), typeof(EnumHelper), new PropertyMetadata(false, OnMoreDetailsChanged));</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  14:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  15:         private static void OnMoreDetailsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  16:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  17:             var control = sender as FrameworkElement;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  18:             if (control != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  19:             {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  20:                 var enumobject = control.DataContext;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  21:                 var fieldInfo = enumobject.GetType().GetField(enumobject.ToString());</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  22:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  23:                 var array = fieldInfo.GetCustomAttributes(false);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  24:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  25:                 if (array.Length == 0)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  26:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  27:                     if (control is TextBlock)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  28:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  29:                         ((TextBlock)control).Text = enumobject.ToString();</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  30:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  31:                     else if (control is ContentControl)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  32:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  33:                         ((ContentControl)control).Content = enumobject;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  34:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  35:                     return;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  36:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  37:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  38:                 foreach (var o in array)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  39:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  40:                     if (o is DescriptionAttribute)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  41:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  42:                         control.ToolTip = ((DescriptionAttribute) o).Description;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  43:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  44:                     else if (o is DisplayAttribute)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  45:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  46:                         if (control is TextBlock)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  47:                         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  48:                             ((TextBlock) control).Text = ((DisplayAttribute) o).Name;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  49:                         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  50:                         else if (control is ContentControl)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  51:                         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  52:                             ((ContentControl)control).Content = ((DisplayAttribute)o).Name;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  53:                         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  54:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  55:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  56:             }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  57:         }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Let&#x2019;s add a simple DataTemplate to our ComboBox.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: &lt;ComboBox x:Name=&quot;Designation&quot; Margin=&quot;5&quot; Grid.Row=&quot;5&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:                           SelectedItem=&quot;{Binding Designation, Mode=TwoWay}&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:                           local:EnumHelper.Enum=&quot;{x:Type local:Designation}&quot;&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:                     &lt;ComboBox.ItemTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:                         &lt;DataTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:                             &lt;TextBlock local:EnumHelper.MoreDetails=&quot;true&quot;/&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:                         &lt;/DataTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:                     &lt;/ComboBox.ItemTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9: &lt;/ComboBox&gt;</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p><a href=\"http://lh4.ggpht.com/-i37DV7SCNSk/UX4NIvszNBI/AAAAAAAABQM/zofUux62Si0/s1600-h/image14.png\"><img align=\"left\" alt=\"image\" border=\"0\" height=\"239\" src=\"https://i2.wp.com/lh5.ggpht.com/-CwW_It4w_a0/UX4NJI3-kmI/AAAAAAAABQU/gtcq0s1ZKAI/image_thumb10.png\" title=\"image\" width=\"696\"></a></p>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/EnumHelper.zip\">Download EnumHelper.zip</a></p></div>\n\t\t\t"}