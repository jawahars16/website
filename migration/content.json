[
  {
    "content": "\n\t\t\t\t<p>SQL Lite is the compact database system used by more client applications to manage local data. It is more lightweight and easy to use. This article will explain how to create SQL Lite DB and connect it to a WPF client application. Let&#x2019;s create a simple client app which read employees data from local SQL Lite DB.</p>\n<p>1. SQL Lite Adminstrator tool can be downloaded from the following link. From where we can manage our tables, queries, triggers and stored procedures.</p>\n<p><span id=\"more-6\"></span></p>\n<p><a href=\"http://sqliteadmin.orbmu2k.de/\">http://sqliteadmin.orbmu2k.de/</a></p>\n<p>2. SQL Lite binaries can be downloaded from below link. (The following assemblies compiled against .NET 2.0).</p>\n<p><a title=\"http://sourceforge.net/projects/sqlite-dotnet2/\" href=\"http://sourceforge.net/projects/sqlite-dotnet2/\">http://sourceforge.net/projects/sqlite-dotnet2/</a></p>\n<p>3. Now let&#x2019;s jump into WPF client application. We can go ahead with MVVM pattern. Our application will contain a main view where we can have a DataGrid to list the employees. And we need a viewmodel class which holds the EmployeeCollection property. Also we need a model class class which can store details of Employee</p>\n<p><a href=\"http://lh4.ggpht.com/-PAEDXd1zP8Y/Uhi2bVn-bSI/AAAAAAAABSw/5tD_pZDtFn4/s1600-h/Project%25255B2%25255D.png\"><img title=\"Project\" alt=\"Project\" src=\"https://i1.wp.com/lh6.ggpht.com/-usNi5jEn17Y/Uhi2cZJMB7I/AAAAAAAABS4/UBcOpvaX2o8/Project_thumb.png\" width=\"208\" height=\"244\" border=\"0\"></a></p>\n<p>4. Now lets&#x2019; create the data. Open the SQL Lite Admin tool. Create a new database. (DB.Employee). Run the following query to create a new table (Employee).</p>\n<div><span><span><span>CREATE</span><span>&#xA0;</span><span>TABLE</span><span>&#xA0;</span><span>Employee(</span></span></span><span><br>\n</span><span><span><span>EmployeeID</span><span>&#xA0;</span><span>NUMERIC</span><span>&#xA0;</span><span>PRIMARY</span><span>&#xA0;</span><span>KEY</span><span>,</span></span></span><span><br>\n</span><span><span><span>Name</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>),</span></span></span><span><br>\n</span><span><span><span>Email</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>),</span></span></span><span><br>\n</span><span><span><span>Phone</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>))</span> ;</span></span></div>\n<div></div>\n<div><a href=\"http://lh3.ggpht.com/-onB4aXG4VX4/Uhi4mrCUyQI/AAAAAAAABTE/RnCmDJb6FVE/s1600-h/Capture%25255B8%25255D.png\"><img title=\"Capture\" alt=\"Capture\" src=\"https://i1.wp.com/lh5.ggpht.com/-VRpjFrDEIA0/Uhi4n8O1Y4I/AAAAAAAABTM/Mnkm6ii2fs4/Capture_thumb%25255B6%25255D.png\" width=\"454\" height=\"230\" border=\"0\"></a></div>\n<div>5. Add a new configuration file to your project to add connection string as below. Since the SQLLite assemblies compiled against 2.0 it will not work under .NET 4.0 environment. To make it compatible, set the attribute useLegacyV2RuntimeActivationPolicy to true. Otherwise it will crash the application.</div>\n<div><span><span><span>&lt;</span><span>connectionStrings</span><span>&gt;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0; </span></span><span><span><span>&lt;</span><span>add</span><span> name</span><span>=&#x201D;SQLiteDb&#x201D;</span><span> connectionString</span><span>=&#x201D;Data Source=AppData/DB.Employee.s3db;Version=3;&#x201D;</span><span>&#xA0;</span></span></span><span><span><span>/&gt;<br>\n&lt;/</span><span>connectionStrings</span><span>&gt;</span></span></span></div>\n<div>6. EmployeeService class will have static methods to query the DB. We are going to use this class from our viewmodel.</div>\n<div><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span><span><span>public</span><span>&#xA0;</span><span>static</span><span>&#xA0;</span><span>string</span><span>&#xA0;</span><span>ConnectionString</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>get</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>return</span><span>&#xA0;</span><span>ConfigurationManager.ConnectionStrings[</span><span>&#x201C;SQLiteDb&#x201D;</span><span>].ConnectionString</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><p></p>\n<p><span><span><span>public</span><span>&#xA0;</span><span>static</span><span>&#xA0;</span><span>List</span><span>&#xA0;</span><span>GetEmployees()</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>var</span><span>&#xA0;</span><span>list</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>List</span><span>()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>string</span><span>&#xA0;</span><span>query</span><span>&#xA0;</span><span>=</span><span> &#x201C;Select * from Employee&#x201D;</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>using</span><span>&#xA0;</span><span>(</span><span>var</span><span>&#xA0;</span><span>connection</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>SQLiteConnection(ConnectionString))</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>using</span><span>&#xA0;</span><span>(</span><span>var</span><span>&#xA0;</span><span>command</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>SQLiteCommand(query,</span><span>&#xA0;</span><span>connection))</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>connection.Open()</span><span>;</span></span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></p>\n<p><span><span><span>SQLiteDataReader</span><span>&#xA0;</span><span>rd</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>command.ExecuteReader()</span><span>;</span></span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></p>\n<p><span><span><span>while</span><span>&#xA0;</span><span>(rd.Read())</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>var</span><span>&#xA0;</span><span>model</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>EmployeeModel()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Name</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>1</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Email</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>2</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Phone</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>3</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>list.Add(model)</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>return</span><span>&#xA0;</span><span>list</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>}</span> </span></span></p></div>\n<div>\n<p>7. On constructor of ViewModel, call the GetEmployees method to populate the collection.</p>\n</div>\n<div><span><span><span>this</span><span>.Employees</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>EmployeeService.GetEmployees()</span><span>;</span></span></span></div>\n<div>8. Set EmployeeViewModel as DataContext for shell window.9. Bind Employees property to DataGrid ItemsSource property.<p></p>\n</div>\n<div><span><span><span>&lt;</span><span>DataGrid</span><span> Margin</span><span>=&#x201D;5&#x2033;</span><span> ItemsSource</span><span>=&#x201D;{Binding Employees}&#x201D;</span></span></span><span><span>/&gt;</span><br>\n</span><br>\n10. Run the application. That&#x2019;s it.Stay tuned for more articles on SQL Lite.<p></p>\n</div>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/SQLLiteDemo.zip\">Download Sample</a></p>\n\t\t\t",
    "postId": "10-steps-to-consume-sqlite-in-wpf"
  },
  {
    "content": "\n\t\t\t\t<h1>1. Write C# Code in XAML</h1>\n<p>We all know that XAML is a design language which helps in building user interface. But how many of us know, that, it is possible to write <strong>C# code inside XAML</strong>. This can be achived using <strong>x:Code</strong>. This attribute allows placement of code within a XAML production.</p>\n<p>The code within the x:Code XAML directive element is still interpreted within the general XML namespace and the XAML namespaces provided. Therefore, it is usually necessary to enclose the code used for x:Code inside a <strong>CDATA</strong> segment.</p>\n<p><span id=\"more-502\"></span></p>\n<pre><code>    &lt;Grid&gt;<br>        &lt;Button Content=&quot;Click me&quot;<br>                Click=&quot;Button_Click&quot;/&gt;<br>        &lt;x:Code&gt;<br>            &lt;![CDATA[<br>            private void Button_Click(object sender, RoutedEventArgs e)<br>            {<br>                MessageBox.Show(&quot;hey, I am from XAML&quot;);<br>            }<br>            ]]&gt;<br>        &lt;/x:Code&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<p>Even though XAML has the flexibility to add C# to it, it is not recommended to follow this approach. Because WPF always prefer developers to separate design code and business code as much as possible. Remember why we follow MVVM !!!. Also it does not support intellisense, that will make difficult in write code. In other hand, <em>using</em> directives cannot be declared so we need to use fully qualified names.</p>\n<p><strong>2. LINQ to Visual Tree</strong></p>\n<p>There are various situations where we need to traverse the visual tree and get the element that we are looking for. Traversing a visual tree is not so straight forward. But how about applying LINQ queries over visual objects in WPF. I hope you remember the XML way of traversing. (XElement.Descendants).</p>\n<p><a href=\"http://www.scottlogic.com/blog/ceberhardt/\">Colin Eberhardt</a> written a nice <a href=\"http://www.codeproject.com/Articles/62397/LINQ-to-Tree-A-Generic-Technique-for-Querying-Tree\">article</a> on it.</p>\n<pre><code>// get all the TextBox&apos;s which have a Grid as direct parent<br>var itemsFluent = this.Descendants&amp;amp;lt;TextBox&amp;amp;gt;()<br>                      .Where(i =&amp;amp;gt; i.Ancestors().FirstOrDefault() is Grid);<br><br>var itemsQuery = from v in this.Descendants&amp;amp;lt;TextBox&amp;amp;gt;()<br>                 where v.Ancestors().FirstOrDefault() is Grid<br>                 select v;<br><br>// get all the StackPanels that are within another StackPanel visual tree<br>var items2Fluent = this.Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                       .Descendants&amp;amp;lt;StackPanel&amp;amp;gt;();<br><br>var items2Query = from i in<br>                     (from v in this.Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                      select v).Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                  select i;<br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png\"><img data-attachment-id=\"512\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/02/5-tricks-you-dont-know-in-wpf/linqtotree/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png\" data-orig-size=\"712,849\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"LINQToTree\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=712\" src=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252&amp;h=300\" alt=\"LINQToTree\" width=\"252\" height=\"300\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252&amp;h=300 252w, https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=504&amp;h=600 504w, https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=126&amp;h=150 126w\" sizes=\"(max-width: 252px) 100vw, 252px\"></a></p>\n<h1>3. Design Time Attributes</h1>\n<p>Have you ever wonder what is mc:Ignorable=&#x201D;d&#x201D;, which usually declared automatically in your page root element? These namespace provides XAML definitions that will ignored by the XAML processor during run time. This is really helpful for XAML designers, especially who works with Expression Blend.</p>\n<p>The <strong>d:DesignHeight</strong> and <strong>d:DesignWidth</strong> sets a fixed height and width for the element at designtime.</p>\n<pre><code>&lt;UserControl x:Class=&quot;WpfApplication16.UserControl1&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; <br>             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; <br>             mc:Ignorable=&quot;d&quot; <br>             d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot;&gt;<br>    &lt;Grid &gt;<br>            <br>    &lt;/Grid&gt;<br>&lt;/UserControl&gt;<br></code></pre>\n<p>If designers want to work with sample data, it is possible with setting a design time DataContext. This datacontext will not be processed during run time.</p>\n<pre><code>    &lt;Grid&gt;<br>        &lt;Grid.Resources&gt;<br>            &lt;local:ViewModel x:Key=&quot;DesignTimeViewModel&quot; /&gt;<br>        &lt;/Grid.Resources&gt;<br>        &lt;Grid d:DataContext=&quot;{StaticResource DesignTimeViewModel}&quot;&gt;<br>            &lt;TextBlock Text=&quot;test&quot; /&gt;<br>        &lt;/Grid&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<h1>4. IsMouseOver and IsMouseDirectlyOver</h1>\n<p>Some times, we may not even consider the differences between these two properties. Using these properties without understanding it may impact the UI logic. The IsMouseOver property for a user interface element indicates whether the mouse is currently located over the element or any of its children.</p>\n<p>For example, for a Button contained in a StackPanel, when the user moves the mouse over the Button, IsMouseOver will be true for both the Button and the StackPanel. The IsMouseDirectlyOver, on the other hand, indicates whether the mouse is over a control and not over any of its children. So in this case, IsMouseDirectlyOver will be true for Button and false for StackPanel.</p>\n<h1>5. Name and x:Name</h1>\n<p>x:Name is a designer generated variable, used mainly to reference elements. When you give an element the x:Name XAML attribute, &#x201C;the specified x:Name becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.&#x201D;</p>\n<p>Name is the existing string property of a FrameworkElement, listed as any other WPF element property in the form of a XAML attribute. So the control which not inherited from Framework Element cannot use Name attribute. but can use x:Name attribute. So it is always better to use x:Name which covers everything.</p>\n\t\t\t",
    "postId": "5-tricks-you-dont-know-in-wpf"
  },
  {
    "postId": "5-tricks-you-should-know-in-wpf-part-2",
    "content": "\n\t\t\t\t<h1>1. TextBlock is not just for Text</h1>\n<p>We all know that TextBlock is an UI control, which will carry a piece of text. But actually MSDN explains it in a bit different way.</p>\n<blockquote><p>Provides a lightweight control for displaying small amounts of flow content.</p></blockquote>\n<p>Flow Content !!!, which not means only text. Lets look at the power of TextBlock. TextBlock can carry any UIElement. It may be an image, path or even a button.</p>\n<p><span id=\"more-555\"></span></p>\n<pre><code>&lt;TextBlock&gt;<br>    TextBlock can carry a <br>    &lt;Button Content=&quot;Button&quot;/&gt;<br>    and even a <br>    &lt;CheckBox Content=&quot;CheckBox&quot; IsChecked=&quot;True&quot;/&gt; .<br>    That is awesome. <br>    &lt;Image Source=&quot;smiley.png&quot; /&gt;<br>&lt;/TextBlock&gt;<br></code></pre>\n<p>The above code will give the following output.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png\"><img data-attachment-id=\"559\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/textblock-2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png\" data-orig-size=\"539,187\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"textblock\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=539\" src=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=736\" alt=\"textblock\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png 539w, https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=300 300w\" sizes=\"(max-width: 539px) 100vw, 539px\"></a></p>\n<h1>2. SharedSizeScope</h1>\n<p>Grid is the most flexible panel, where elements can arranged in rows and columns manner. Some situation, there might be multiple grids with same row and column sizing. So if there is any design change (design time or run time), we have to change the size in every grid. But SharedSizeScope feature will provide a flexibility, that multiple grids can share the size information. So if one grid affected by size change in its row/columns, others will get the change automatically.</p>\n<p>Rows and Columns having the same group name will share the size information.</p>\n<pre><code>    &lt;Grid Grid.IsSharedSizeScope=&quot;True&quot;&gt;<br>        &lt;Grid.RowDefinitions&gt;<br>            &lt;RowDefinition /&gt;<br>            &lt;RowDefinition /&gt;<br>        &lt;/Grid.RowDefinitions&gt;<br>        &lt;Grid x:Name=&quot;Grid1&quot; Margin=&quot;10&quot; ShowGridLines=&quot;True&quot;&gt;<br>            &lt;Grid.RowDefinitions&gt;<br>                &lt;RowDefinition Height=&quot;30&quot; SharedSizeGroup=&quot;HeaderRow&quot;/&gt;<br>                &lt;RowDefinition Height=&quot;120&quot; SharedSizeGroup=&quot;ContentRow&quot;/&gt;<br>            &lt;/Grid.RowDefinitions&gt;<br>            &lt;Rectangle Fill=&quot;LightCoral&quot;/&gt;<br>            &lt;Rectangle Fill=&quot;LightBlue&quot;<br>                       Grid.Row=&quot;1&quot;/&gt;<br>        &lt;/Grid&gt;<br>        &lt;Grid x:Name=&quot;Grid2&quot; Margin=&quot;10&quot; ShowGridLines=&quot;True&quot; Grid.Row=&quot;1&quot;&gt;<br>            &lt;Grid.RowDefinitions&gt;<br>                &lt;RowDefinition SharedSizeGroup=&quot;HeaderRow&quot;/&gt;<br>                &lt;RowDefinition SharedSizeGroup=&quot;ContentRow&quot;/&gt;<br>            &lt;/Grid.RowDefinitions&gt;<br>            &lt;Rectangle Fill=&quot;LightCoral&quot; /&gt;<br>            &lt;Rectangle Fill=&quot;LightBlue&quot;<br>                       Grid.Row=&quot;1&quot; /&gt;<br>        &lt;/Grid&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<p>The above code will produce the following output,</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/window.png\"><img data-attachment-id=\"565\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/window/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png\" data-orig-size=\"457,382\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"window\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=457\" src=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300&amp;h=251\" alt=\"window\" width=\"300\" height=\"251\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300&amp;h=251 300w, https://wpfplayground.files.wordpress.com/2014/12/window.png?w=150&amp;h=125 150w, https://wpfplayground.files.wordpress.com/2014/12/window.png 457w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><br>\n<strong>Note</strong> : SharedSizeScope will not work for Star Sizing. Star will be considered as auto.</p>\n<h1>3. x:References in XAML</h1>\n<p>The markup will directly refer an instance which is declared elsewhere in the XAML. the reference will be identified by the x:Name.</p>\n<pre><code>&lt;StackPanel&gt;<br>    &lt;Label Content=&quot;_Name&quot; Target=&quot;{x:Reference txtName}&quot;/&gt;<br>    &lt;TextBox x:Name=&quot;txtName&quot;/&gt;<br>&lt;/StackPanel&gt;<br></code></pre>\n<p>In the above code, the TextBox with name txtName will become the target of the Label. This can also be achieved using ElementName binding as below,</p>\n<pre><code>&lt;StackPanel&gt;<br>    &lt;Label Content=&quot;_Name&quot; Target=&quot;{Binding ElementName=txtName}&quot;/&gt;<br>    &lt;TextBox x:Name=&quot;txtName&quot;/&gt;<br>&lt;/StackPanel&gt;<br></code></pre>\n<p><strong>Note</strong> : Anybody confused about Target property of Label? No Problem !!! The property referes to the element which will get focus, when user presses the label&#x2019;s access key. Here the access key is &#x201C;N&#x201D;.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/label.png\"><img data-attachment-id=\"571\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/label/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png\" data-orig-size=\"265,93\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"Label\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=265\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=265\" src=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=736\" alt=\"Label\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/label.png 265w, https://wpfplayground.files.wordpress.com/2014/12/label.png?w=150 150w\" sizes=\"(max-width: 265px) 100vw, 265px\"></a></p>\n<h1>4. FallBackValue and TargetNullValue</h1>\n<p>When the binding is unable to return a valid value, Fallback value will be used as the result. A binding can fail for following reasons,</p>\n<p>1. The path to the binding not resolved.<br>\n2. The Value Converter (if any), not able to convert the value.<br>\n3. The resulting value is not valid for target property.</p>\n<p>Whenever the binding fails, <strong>DependencyProperty.UnsetValue</strong> will be return as the result. Fallback value will replace the UnsetValue. The following code will show &#x201C;Name cannot be shown&#x201D;, if binding fails.</p>\n<pre><code>&lt;TextBlock Text=&quot;{Binding Name, FallbackValue=&apos;Name cannot be shown&apos;}&quot;/&gt;<br></code></pre>\n<p>TargetNullValue will be considered when the source value is <strong>NULL</strong>. The below code will show &#x201C;Name cannot be show&#x201D;, when the Name property is NULL.</p>\n<pre><code>&lt;TextBlock Text=&quot;{Binding Name, TargetNullValue=&apos;Name cannot be shown&apos;}&quot;/&gt;<br></code></pre>\n<h1>5. Priority Binding</h1>\n<p>PriorityBinding works with list of Bindings. The value of the property will be resolved in priority basis. If the highest priority binding returns the value successfully, the other bindings will not be processed. If the highest priority binding took time to resolve the value, then the second highest priority binding will be processed and return the value until the highest priority binding done resolving the value.</p>\n<pre><code>  &lt;TextBlock&gt;<br>    &lt;TextBlock.Text&gt;<br>      &lt;PriorityBinding FallbackValue=&quot;defaultvalue&quot;&gt;<br>        &lt;Binding Path=&quot;SlowestValue&quot; IsAsync=&quot;True&quot;/&gt;<br>        &lt;Binding Path=&quot;SlowerValue&quot; IsAsync=&quot;True&quot;/&gt;<br>        &lt;Binding Path=&quot;FastValue&quot; /&gt;<br>      &lt;/PriorityBinding&gt;<br>    &lt;/TextBlock.Text&gt;<br>  &lt;/TextBlock&gt;<br></code></pre>\n<p>When the binding engine processes the Binding objects, it starts with the first Binding, which is bound to the SlowestValue property. When this Binding is processed, it does not return a value successfully if it going to take long time, so the next Binding element is processed. The next Binding does not return a value successfully if that going to take a few time. The binding engine then moves onto the next Binding element, which is bound to the FastValue property. This Binding returns the value &#x201C;Fast Value&#x201D;. The TextBlock now displays the value &#x201C;Fast Value&#x201D;.</p>\n\t\t\t"
  },
  {
    "postId": "accentbrush-for-wpf-metro-theme",
    "content": "\n\t\t\t\t<p><a href=\"http://mahapps.com/MahApps.Metro/\" target=\"_blank\">Mah Apps</a> provide a very easy way to style any WPF applications with Metro theme. They provided 22 different accent colours and two themes dark and light. Just by merging the resources in App.Resources, your app will look pretty much like Metro app.</p>\n<pre><code>&lt;ResourceDictionary&gt;<br> &lt;ResourceDictionary.MergedDictionaries&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml&quot; /&gt;<br> &lt;/ResourceDictionary.MergedDictionaries&gt;<br> &lt;/ResourceDictionary&gt;<br></code></pre>\n<p>Theme and accent brush can be dynamically switched by using following code.</p>\n<p><span id=\"more-4\"></span></p>\n<pre><code><br>public&#xA0;MainWindow()<br>{<br>       ThemeManager.ChangeTheme(App.Current,&#xA0;ThemeManager.DefaultAccents[0],&#xA0;Theme.Light);<br>       InitializeComponent();<br>}<br><br></code></pre>\n<div><span>When changing theme, the accent brush of all default controls will change and make your app more pretty. But some scenarios, we may want to colorize our app with our own colour like background gradient, etc. There is a way to make our own colour match with Metro accent. I have attached a sample, where on changing theme, in addition to controls, my own path icons (taken from </span><a href=\"http://www.syncfusion.com/downloads/metrostudio\" target=\"_blank\">Metro Studio</a><span>) will also change the colour.</span></div>\n<p>This can be achieved by using the &#x201C;AccentColorBrush&#x201D; as a dynamic resource.</p>\n<pre><code><br> &lt;Path Stretch=&quot;Uniform&quot;<br> Fill=&quot;{DynamicResource AccentColorBrush}&quot;<br> Width=&quot;50&quot;<br> Height=&quot;50&quot;<br> Margin=&quot;10&quot; /&gt;<br><br></code></pre>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/MetroSample.zip\" target=\"_blank\">Download Sample here</a></p>\n<p>Happy theming&#x2026; &#x1F642;</p>\n\t\t\t"
  },
  {
    "postId": "attached-properties-vs-behaviors",
    "content": "\n\t\t\t\t<p>One of the powerful concept of WPF is Attached Properties. The primary purpose of attached property is to define a unique value to child elements for a property, which is defined in Parent element as <a href=\"http://msdn.microsoft.com/en-IN/library/ms749011(v=vs.110).aspx\">MSDN </a>suggests. Some of the typical examples are Grid.Row, DockPanel.Dock, etc.</p>\n<p>But it can also be used to attach additional information to an object, like Extension methods in C#. Examples are allowing an object to be draggable using Mouse, play music on some action, etc.&#xA0;I will take a simple piece of functionality to explain this. Lets consider, we need to <strong>focus a control on loaded</strong>.</p>\n<p><span id=\"more-588\"></span></p>\n<p><strong>Using Attached Property</strong></p>\n<pre><code>    public static class FocusOnLoad<br>    {<br>        public static bool GetCanFocusOnLoad(DependencyObject obj)<br>        {<br>            return (bool)obj.GetValue(CanFocusOnLoadProperty);<br>        }<br><br>        public static void SetCanFocusOnLoad(DependencyObject obj, bool value)<br>        {<br>            obj.SetValue(CanFocusOnLoadProperty, value);<br>        }<br><br>        // Using a DependencyProperty as the backing store for CanFocusOnLoad.  This enables animation, styling, binding, etc...<br>        public static readonly DependencyProperty CanFocusOnLoadProperty =<br>            DependencyProperty.RegisterAttached(&quot;CanFocusOnLoad&quot;, typeof(bool), typeof(FocusOnLoad), new PropertyMetadata(FocusOnLoadChanged));<br><br>        private static void FocusOnLoadChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)<br>        {<br>            var element = d as FrameworkElement;<br>            if (element != null)<br>            {<br>                element.Loaded += delegate<br>                {<br>                    element.Focus();<br>                };<br>            }<br>        }<br>    }<br></code></pre>\n<p><strong>Usage in XAML</strong></p>\n<pre><code>    &lt;TextBox behaviors:FocusOnLoad.CanFocusOnLoad=&quot;True&quot;<br>             VerticalAlignment=&quot;Center&quot;<br>             Width=&quot;200&quot;/&gt;<br></code></pre>\n<p>To make the work more systematic, Microsoft came up with an option called <a href=\"http://wpftutorial.net/Behaviors.html\">Behaviors</a>. It offers more encapsulated way to extend functionality. There are some <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/dn195718(v=vs.110).aspx\">built-in behaviors</a>&#xA0;shipped as part of Blend. Following code implements the same functionality using Behaviors.</p>\n<p><strong>Using Behaviors</strong></p>\n<pre><code>    public class FocusOnLoadBehavior : Behavior&lt;FrameworkElement&gt;<br>    {<br>        protected override void OnAttached()<br>        {<br>            this.AssociatedObject.Loaded += this.OnLoaded;<br>        }<br><br>        protected override void OnDetaching()<br>        {<br>            this.AssociatedObject.Loaded -= this.OnLoaded;<br>        }<br><br>        private void OnLoaded(object sender, System.Windows.RoutedEventArgs e)<br>        {<br>            this.AssociatedObject.Focus();<br>        }<br>    }<br></code></pre>\n<p><strong>Usage in XAML</strong></p>\n<pre><code>    &lt;TextBox behaviors:FocusOnLoad.CanFocusOnLoad=&quot;True&quot;<br>                VerticalAlignment=&quot;Center&quot;<br>                Width=&quot;200&quot;&gt;<br>        &lt;i:Interaction.Behaviors&gt;<br>            &lt;behaviors:FocusOnLoadBehavior /&gt;<br>        &lt;/i:Interaction.Behaviors&gt;<br>    &lt;/TextBox&gt;<br></code></pre>\n<p>There are some advantages and dis-advantages in both approach. Let me put it down to make the decision easier.</p>\n<h1><strong>1. Event Handlers</strong></h1>\n<p>Both scenario need an event subscription to the Control.Loaded event. In attached properties it is an ugly code, where we need to write extra plumbing to release those handlers. But behaviors offer a clean way to release event handlers &#x2013; <strong><em>OnAttached and OnDetaching</em></strong>. If the functionality dealing with more event handling mechanisms, Behaviors are the best way.</p>\n<h1>2.&#xA0;Configuration in Style</h1>\n<p>For example, if you want to attach this piece of functionality to all the TextBoxes in your application, a global style would be the best option. But&#xA0;attached properties can be set in Style, where Behaviors cannot. This is also an important factor need to be considered before taking decision.</p>\n<pre><code>&lt;Style TargetType=&quot;TextBox&quot;&gt;<br>    &lt;Setter Property=&quot;behaviors:FocusOnLoad.CanFocusOnLoad&quot;<br>            Value=&quot;True&quot; /&gt;<br>&lt;/Style&gt;<br></code></pre>\n<p><strong>3. Casting</strong></p>\n<p>The <strong>PropertyChanged</strong> callback will give you the dependency object. This is the element in XAML, where we set the property. But to access some property or to invoke a method we need to <strong>cast</strong> it to UIElement or FrameworkElement. But in Behavior, it is possible to mention the datatype &#x2013;&#xA0;<strong>Behavior&lt;T&gt;</strong>. So no more casting.&#xA0;Using <strong>AssociateObject</strong> all the members of the type can be accessed. In above case, I mentioned it as <strong>FrameworkElement</strong>, since the Loaded event coming from that.</p>\n<h1>4. Visual Designer</h1>\n<p>Behaviors can be drag and drop into particular object using Blend, where Attached properties are not.You can drag and drop behavior objects on other behavior objects to set up a hierarchy, and you can set properties on objects already in the designer through the properties window.</p>\n<p>Hope this will&#xA0;shed some light on choosing a right option. &#x1F642;</p>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<p>Normally when&#xA0;a storyboard is running, setting the FillBehavior (<a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.animation.timeline.fillbehavior(v=vs.110).aspx\" target=\"_blank\">Learn more about FillBehavior</a>) to <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.animation.fillbehavior(v=vs.110).aspx\">HoldEnd </a>is risk. Because&#xA0;for a dependency property, storyboard is considered to have highest priority of setting the value. So once storyboard is done, user cannot change its value locally. So users prefer the set the FillBehavior to Stop and change the target value once storyboard is done. So there must be always a need to do something once animation is done. Fortunately, storyboard provided an event called <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.animation.timeline.completed(v=vs.110).aspx\">Completed </a>where we can write our own logic.</p>\n<p>But once<a href=\"http://msdn.microsoft.com/en-in/library/hh191443.aspx\"> <em>async</em> and <em>await</em></a> released to get rid off these callback approach, why can&#x2019;t we make our storyboard an awaitable one. Let the storyboard Begin method wait until the animation completed, before it executed the next line.</p>\n<p><span id=\"more-404\"></span></p>\n<pre><code>        public static Task BeginAsync(this Storyboard timeline)<br>        {<br>            TaskCompletionSource&lt;object&gt; source = new TaskCompletionSource&lt;object&gt;();<br>            timeline.Completed += delegate<br>            {<br>                source.SetResult(null);<br>            };<br>            timeline.Begin();<br>            return source.Task;<br>        }<br></code></pre>\n<p>This is how we will be using it in our application,</p>\n<pre><code>        private async void MainWindow_Loaded(object sender, RoutedEventArgs e)<br>        {<br>            Storyboard animation = (Storyboard)this.Resources[&quot;HideAnimation&quot;];<br>            if (animation != null)<br>            {<br>                await animation.BeginAsync();<br>                MessageBox.Show(&quot;Animation completed&quot;);<br>            }<br>        }<br></code></pre>\n<p><strong>Note</strong> : It is always not recommended to use async void except UI event handlers.</p>\n\t\t\t",
    "postId": "awaitable-storyboard-in-wpf"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<p>Populating the WPF ComboBox with System Font Families is so easy and can be done in XAML without code behind.</p>\n<pre><code>&lt;ComboBox&#xA0;x:Name=&quot;fonts&quot;&#xA0;<br>          Width=&quot;200&quot;&#xA0;<br>          ItemsSource=&quot;{Binding&#xA0;Source={x:Static&#xA0;Member=Fonts.SystemFontFamilies}}&quot;&#xA0;/&gt;<br></code></pre>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/513d3-sshot-10.png\"><img src=\"https://wpfplayground.files.wordpress.com/2012/05/513d3-sshot-10.png?w=736\" alt border=\"0\"></a></div>\n<pre><code>Also to show each Font Item with its own corresponding Font Family, just modifying the Item template will make the magic.</code></pre>\n<pre><code>&lt;ComboBox.ItemTemplate&gt;<br>&#xA0;&#xA0;&#xA0;&lt;DataTemplate&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;TextBlock&#xA0;Text=&quot;{Binding}&quot;&#xA0;FontFamily=&quot;{Binding}&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/DataTemplate&gt;<br>&lt;/ComboBox.ItemTemplate&gt;<br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2012/05/ee31a-sshot-11.png\"><img src=\"https://wpfplayground.files.wordpress.com/2012/05/ee31a-sshot-11.png?w=736\" alt border=\"0\"><br>\n</a>Happy coding&#x2026;</p>\n</div>\n\t\t\t",
    "postId": "bind-system-font-families-to-combo-box-in-xaml"
  },
  {
    "postId": "building-a-deployable-custom-control-for-xaml-metro-style-apps",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<p>Tim Heuer wrote a very nice article about deployment of custom control for WinRT.</p>\n<p>At //build one of the surprising immediate things I heard about was folks wanting to build custom controls right away. &#xA0;I knew that would happen, but not so quick on something so new (WinRT). &#xA0;The XAML platform did not have good support for building custom controls in the Developer Preview but now that the Consumer Preview for Windows 8 and Visual Studio 11 Beta are out, there is much better support. &#xA0;There are two key things when thinking about custom controls: 1) building it and 2) making it consumable by developers (even if those developers are your own company). &#xA0;I&#x2019;ll try to articulate the methods of both here. <a href=\"http://timheuer.com/blog/archive/2012/03/07/creating-custom-controls-for-metro-style-apps.aspx\" target=\"_blank\">(Read more&#x2026;)</a></p>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><b><span>String Functions in C#.NET</span></b></div>\n<div></div>\n<div><span>C#.NET comes with a lot of great string processing functions like </span><span>Substring</span><span>, </span><span>Compare</span><span>, </span><span>IndexOf</span><span>. But the truth is the built-in .NET string functions are very limited. Programmers constantly have to rewrite similar text processing functions over and over.</span></div>\n<div><span>Luckily we can expand on them and create all kinds of <b>C# advanced string functions</b>. As for a matter of speed, there are is one thing to consider: </span><span>String</span><span> vs </span><span>StringBuilder</span></div>\n<div></div>\n<div><b><span>.NET &#x2013; String vs StringBuilder</span></b></div>\n<div></div>\n<div><span>Appending text to a string object is done in this fashion:</span></div>\n<div></div>\n<div>\n<div><span>stringObject += </span><span>&#x201C;more text&#x201D;</span><span>;</span></div>\n</div>\n<div></div>\n<div><span>Concating strings like that is very fast and reliable when it is done for a small amount of C# strings. In fact it can be significantly simpler and faster than using the </span><span>StringBuilder</span><span> class.</span></div>\n<div><span>The </span><span>StringBuilder</span><span> class on the other hand is excellent for processing text for a lot of iterations since it avoids creating new instances of a string each time the output string is modified. To add a string to a </span><span>StringBuilder</span><span> goes like this:</span></div>\n<div></div>\n<div>\n<div><span>stringBuilderObject.Append(</span><span>&#x201C;more text&#x201D;</span><span>);</span></div>\n</div>\n<div></div>\n<div><span>The downside to the </span><span>StringBuilder</span><span> is the overhead of initializing a class. However if we are going to need to create some C# functions that will processes large amounts of text, then StringBuilder saves processing time in the long run.</span></div>\n<div><span>In the <b>C# String Processing Library</b> functions are divided into two sections, the </span><span>StringProcessing</span><span> and the </span><span>StringBuilderProcess</span><span> classes, so you can run whichever one is more fitting.</span></div>\n<div></div>\n<div><b><span>Advanced Csharp String Functions</span></b></div>\n<div></div>\n<table border=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td width=\"50%\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><span>Capitalize</span></div>\n<div></div>\n<div><span>This C# function takes the first letter of a string an capitalizes it:<br>word -&gt; Word<br>this is a sentence -&gt; This is a sentence</span></div>\n<div></div>\n<div><span>IsCapitalized</span></div>\n<div></div>\n<div><span>This C# function checks to see if the first letter of a string is capitalized:<br>Word -&gt; True<br>word -&gt; False</span></div>\n<div></div>\n<div><span>IsLowerCase</span></div>\n<div></div>\n<div><span>Checks to see that an entire string is in lower cases<br>word -&gt; True<br>Word -&gt; False</span></div>\n<div></div>\n<div><span>IsUpperCase</span></div>\n<div></div>\n<div><span>Checks to see that an entire string is in upper cases<br>Word -&gt; False<br>WORD -&gt; True</span></div>\n<div></div>\n<div><span>SwapCases</span></div>\n<div></div>\n<div><span>This C# function swaps the cases of a string<br>word -&gt; WORD<br>Word -&gt; wORD</span></div>\n<div></div>\n<div><span>AlternateCases</span></div>\n<div></div>\n<div><span>Takes the first character&#x2019;s casing an alternates the casing of the rest of the string<br>Hi -&gt; Hi<br>helloworld -&gt; hElLoWoRlD</span></div>\n<div></div>\n<div><span>AlternateCases</span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></div>\n<div></div>\n<div><span>This C# string function works exactly the same except the user specifies on which case the string will start (Upper case or Lower case)</span></div>\n<div></div>\n<div><span>IsAlternateCases</span></div>\n<div></div>\n<div><span>Checks to see whether a string has alternating cases</span></div>\n<div></div>\n<div><span>CountTotal</span></div>\n<div></div>\n<div><span>Counts the total number of occurances of a string within another string<br>hello, l -&gt; 2<br>hello, el -&gt; 1</span></div>\n<div></div>\n<div><span>RemoveVowels</span></div>\n<div></div>\n<div><span>This C# string function removes the vowels in a string<br>hello -&gt; hll</span></div>\n<div></div>\n<div><span>KeepVowels</span></div>\n<div></div>\n<div><span>This C# string function removes everything but the vowels in a string<br>hello -&gt; eo</span></div>\n<div></div>\n<div><span>HasVowels</span></div>\n<div></div>\n<div><span>Checks to see if there is any vowel psent in a string</span></div>\n<div></div>\n<div><span>IsSpaces</span></div>\n<div></div>\n<div><span>Quickly and effortlessly checks to see if a string is nothing but spaces</span></div>\n<div></div>\n<div><span>IsRepeatedChar</span></div>\n<div></div>\n<div><span>Quickly and effortlessly checks to see if a string is nothing but the same letter repeated<br>aaaaaaaaaa -&gt; True<br>aaaaaaaaad -&gt; False</span></div>\n<div></div>\n<div><span>IsNumeric</span></div>\n<div></div>\n<div><span>Processes a string to see if it contains only numbers</span></div>\n<div></div>\n<div><span>HasNumbers</span></div>\n<div></div>\n<div><span>Checks a string to see if it contains any numbers.</span></div>\n<div></div>\n<div><span>IsAlphaNumberic</span></div>\n<div></div>\n<div><span>This C# function evaluates whether a string contains only numbers and letters (no symbols).</span></div>\n<div></div>\n<div><span>isLetters</span></div>\n<div></div>\n<div><span>Checks for a string to contain nothing but letters, no numbers or symbols.</span></div>\n<div></div>\n<div><span>GetInitials</span></div>\n<div></div>\n<div><span>Converts a string, like a name, into its initials<br>Bob Landon -&gt; B.L.</span></div>\n<div></div>\n<div><span>GetTitle</span></div>\n<div></div>\n<div><span>Capitalizes the first letter of every word in a string<br>the good story -&gt; The Good Story</span></div>\n<div></div>\n<div><span>GetNameCasing</span></div>\n<div></div>\n<div><span>Similar to the GetTitle function, capitalizes the first letter of every word, but has some additional rules for names<br>mcdonald -&gt; McDonald<br>macdonald -&gt; MacDonald<br>Credits to ShutlOrbit&#xA0;</span></div>\n<div><span>(<a href=\"http://www.thirdstagesoftware.com/\" target=\"_blank\"><span>http://www.thirdstagesoftware.com</span></a>) from <a href=\"http://www.codeproject.com/\" target=\"_blank\"><span>CodeProject</span></a></span></div>\n<div></div>\n<div><span>IsTitle</span></div>\n<div></div>\n<div><span>This C# string function checks if the first letter of every word is capitalized<br>The Big Story -&gt; True<br>The big story -&gt; False</span></div>\n<div></div>\n<div><span>IsEmailAddress</span></div>\n<div></div>\n<div><span>Verifies that an email address is written in the correct format. Useful for checking email addressed entered in a web application.</span></div>\n<div></div>\n<div><span>IndexOfAll</span></div>\n<div></div>\n<div><span>This very useful C# function returns all the indicies of a string in another string. As opposed to IndexOf which only returns the first index.</span></div>\n<div></div>\n<div><span>ArrayToString</span></div>\n<div></div>\n<div><span>This C# string function is a must for all developers. Quickly turns any array into a single string that can be displayed to survey an array&#x2019;s data. Check out a more complete <a href=\"http://www.vcskicks.com/array-to-string.php\" target=\"_blank\"><span>array to string function</span></a> right here on Visual C# Kicks.</span></div>\n<div><span>PasswordStrength</span></div>\n<div></div>\n<div><span>Evaluate the effectiveness of a string as a password. Original idea credits go to D. Rijmenants. (If there are any copyright issues please contact us).</span></div>\n<div></div>\n<div><span>CharRight</span></div>\n<div></div>\n<div><span>Basically a Substring function that works backwards. Programmers from older languages will appciate this missing C# function.</span></div>\n<div></div>\n<div><span>CharMid</span></div>\n<div></div>\n<div><span>Another function that is missing from the original C# Net string processing list. Works like Substring but starts from a specified position.</span></div>\n<div></div>\n<div><span>InsertSeparator</span></div>\n<div></div>\n<div><span>Inserts a separator after each letter in a string, excluding the last letter<br>hello, &#x2013; -&gt; h-e-l-l-o</span></div>\n<div></div>\n<div><span>InsertSeparatorEvery</span></div>\n<div></div>\n<div><span>Inserts a separator after a specified number of letters, excluding the last letter</span></div>\n<div></div>\n<div><span>SubstringEnd</span></div>\n<div></div>\n<div><span>This C# function works exactly like the built-in Substring. The only difference is it takes in a Start and End parameter instead of the default Start and Length. (Basically the Java version of Substring)</span></div>\n<div></div>\n<div><span>Reverse</span></div>\n<div></div>\n<div><span>Reverses a string without the need for a recursive function.</span></div>\n<div></div>\n<div><span>SplitQuotes</span></div>\n<div></div>\n<div><span>This C# function works like the built-in Split function. The only difference is it will respect parts of a string surrounded by quotes. For example the string </span><span>This is a &#x201C;very long&#x201D; string</span><span> would get split into: <br></span><span>This<br>is<br>a<br>very long<br>string</span><span><br>Careful however, the function does not work with nested quotes.</span></div>\n</td>\n<td valign=\"top\" width=\"50%\"></td>\n</tr>\n</tbody>\n</table>\n<div></div>\n</div>\n\t\t\t",
    "postId": "c-text-processing-function-library"
  },
  {
    "postId": "capture-screenshot-in-wpf",
    "content": "\n\t\t\t\t<div dir=\"ltr\">Capturing screen shot in Windows Forms is&#xA0;straight&#xA0;forward. But in WPF, we need some Pinvoke calls. We going to use the methods from User32.dll and gdi32.dll. For more reference about available methods in User32.dll, go through <a href=\"http://wpfplayground.blogspot.in/2011/09/digging-into-user32dll.html\" target=\"_blank\">here</a>.<p></p>\n<p></p>\n<pre><code>&#xA0;public&#xA0;class&#xA0;InteropHelper<br>&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;GetDesktopWindow();<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd144871(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;GetDC(IntPtr&#xA0;hwnd);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183370(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[return:&#xA0;MarshalAs(UnmanagedType.Bool)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;BitBlt(IntPtr&#xA0;hDestDC,&#xA0;int&#xA0;x,&#xA0;int&#xA0;y,&#xA0;int&#xA0;nWidth,&#xA0;int&#xA0;nHeight,&#xA0;IntPtr&#xA0;hSrcDC,&#xA0;int&#xA0;xSrc,&#xA0;int&#xA0;ySrc,&#xA0;Int32&#xA0;dwRop);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183488(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;CreateCompatibleBitmap(IntPtr&#xA0;hdc,&#xA0;int&#xA0;nWidth,&#xA0;int&#xA0;nHeight);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183489(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;,&#xA0;SetLastError&#xA0;=&#xA0;true)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;CreateCompatibleDC(IntPtr&#xA0;hdc);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd162957(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;,&#xA0;ExactSpelling&#xA0;=&#xA0;true,&#xA0;PreserveSig&#xA0;=&#xA0;true,&#xA0;SetLastError&#xA0;=&#xA0;true)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;SelectObject(IntPtr&#xA0;hdc,&#xA0;IntPtr&#xA0;hgdiobj);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183539(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;DeleteObject(IntPtr&#xA0;hObject);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd162920(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;int&#xA0;ReleaseDC(IntPtr&#xA0;hwnd,&#xA0;IntPtr&#xA0;dc);<br></code></pre>\n<pre><code></code></pre>\n<pre><code>}</code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<div>To get a copy of desktop screen, first we need to get the bitmap source from the desktop. Use the pinvoke methods in following way.</div>\n<pre><code></code></pre>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;BitmapSource&#xA0;CaptureRegion(IntPtr&#xA0;hWnd,&#xA0;int&#xA0;x,&#xA0;int&#xA0;y,&#xA0;int&#xA0;width,&#xA0;int&#xA0;height)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;sourceDC&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;targetDC&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;compatibleBitmapHandle&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BitmapSource&#xA0;bitmap&#xA0;=&#xA0;null;<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;try<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gets&#xA0;the&#xA0;main&#xA0;desktop&#xA0;and&#xA0;all&#xA0;open&#xA0;windows<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sourceDC&#xA0;=&#xA0;InteropHelper.GetDC(InteropHelper.GetDesktopWindow());<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//sourceDC&#xA0;=&#xA0;User32.GetDC(hWnd);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;targetDC&#xA0;=&#xA0;InteropHelper.CreateCompatibleDC(sourceDC);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;a&#xA0;bitmap&#xA0;compatible&#xA0;with&#xA0;our&#xA0;target&#xA0;DC<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;compatibleBitmapHandle&#xA0;=&#xA0;InteropHelper.CreateCompatibleBitmap(sourceDC,&#xA0;width,&#xA0;height);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gets&#xA0;the&#xA0;bitmap&#xA0;into&#xA0;the&#xA0;target&#xA0;device&#xA0;context<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.SelectObject(targetDC,&#xA0;compatibleBitmapHandle);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;from&#xA0;source&#xA0;to&#xA0;destination<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.BitBlt(targetDC,&#xA0;0,&#xA0;0,&#xA0;width,&#xA0;height,&#xA0;sourceDC,&#xA0;x,&#xA0;y,&#xA0;InteropHelper.SRCCOPY);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Here&apos;s&#xA0;the&#xA0;WPF&#xA0;glue&#xA0;to&#xA0;make&#xA0;it&#xA0;all&#xA0;work.&#xA0;It&#xA0;converts&#xA0;from&#xA0;an<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;hBitmap&#xA0;to&#xA0;a&#xA0;BitmapSource.&#xA0;Love&#xA0;the&#xA0;WPF&#xA0;interop&#xA0;functions<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bitmap&#xA0;=&#xA0;System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;compatibleBitmapHandle,&#xA0;IntPtr.Zero,&#xA0;Int32Rect.Empty,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BitmapSizeOptions.FromEmptyOptions());<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;catch&#xA0;(Exception&#xA0;ex)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;finally<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DeleteObject(compatibleBitmapHandle);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ReleaseDC(IntPtr.Zero,&#xA0;sourceDC);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ReleaseDC(IntPtr.Zero,&#xA0;targetDC);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;bitmap;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br><br>For more information on pinvoke methods, this will help.<br></code></pre></div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">It is very obvious that we can change the cursor in WPF using FrameworkElement.Cursor. But the trick is, it only works within your application and not outside your application Main Window. In case if you want to change the cursor for the entire OS, we&#xA0;don&#x2019;t&#xA0;have any direct way in WPF. But most of the developers worried why we need to change the entire Windows cursor. But take an example, if we are developing an eye dropper control in WPF (used to pick color). Not like the one in Illustrator or Photoshop (cannot pick color outside the application), but the one we have in Expression Blend or Visual Studio designer (can pick color even outside the application also).<p></p>\n<p>In that cases, the cursor should be changed, because arrow cursor will not be a comfortable one to pick color. Normally cursor values resides in registry.</p>\n<p><b>Registry Key :&#xA0;</b>HKEY_CURRENT_USER\\Control Panel\\Cursors</p>\n<p>Changing the values here will change the cursor, but your system needs a reboot to take effect (I can understand, none of the developers will accept this). To avoid that and make your app. taking immediate effect, you need to invoke a pinvoke call.</p>\n<p>The following method will refresh the cursor &#xA0;values,</p>\n<p></p>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;,&#xA0;EntryPoint&#xA0;=&#xA0;&quot;SystemParametersInfo&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;SystemParametersInfo(int&#xA0;uAction,&#xA0;int&#xA0;uParam,&#xA0;string&#xA0;lpvParam,&#xA0;int&#xA0;fuWinIni);&#xA0;<br></code></pre>\n<p>Iterate through registry values and change the cursor path.</p>\n<p></p>\n<pre><code>        private&#xA0;void&#xA0;ChangeCursor()<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RegistryKey&#xA0;pRegKey&#xA0;=&#xA0;Registry.CurrentUser;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;pRegKey&#xA0;=&#xA0;pRegKey.OpenSubKey(@&quot;Control&#xA0;Panel\\Cursors&quot;);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;paths.Clear();<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;foreach&#xA0;(var&#xA0;key&#xA0;in&#xA0;pRegKey.GetValueNames())<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Object&#xA0;_key&#xA0;=&#xA0;pRegKey.GetValue(key);</code></pre>\n<pre><code>                //Take&#xA0;a&#xA0;backup.<br><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;paths.Add(key,&#xA0;_key.ToString()); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Object&#xA0;val&#xA0;=&#xA0;Registry.GetValue(@&quot;HKEY_CURRENT_USER\\Control&#xA0;Panel\\Cursors&quot;,&#xA0;key,&#xA0;null); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control&#xA0;Panel\\Cursors&quot;,&#xA0;key,&#xA0;&quot;foo.cur&quot;); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;} &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;SystemParametersInfo(InteropHelper.SPI_SETCURSORS,&#xA0;0,&#xA0;null,&#xA0;InteropHelper.SPIF_UPDATEINIFILE&#xA0;|&#xA0;InteropHelper.SPIF_SENDCHANGE);&#xA0;&#xA0; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>Make sure you store the registry values before change it, so that you can restore the cursor to the default values.<br>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0;&#xA0;private&#xA0;void&#xA0;ResetCursorToDefault()<br>&#xA0; &#xA0; &#xA0; &#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RegistryKey&#xA0;pRegKey&#xA0;=&#xA0;Registry.CurrentUser;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;pRegKey&#xA0;=&#xA0;pRegKey.OpenSubKey(@&quot;Control&#xA0;Panel\\Cursors&quot;);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;foreach&#xA0;(string&#xA0;key&#xA0;in&#xA0;paths.Keys)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;string&#xA0;path&#xA0;=&#xA0;paths[key];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control&#xA0;Panel\\Cursors&quot;,&#xA0;key,&#xA0;path);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.SystemParametersInfo(InteropHelper.SPI_SETCURSORS,&#xA0;0,&#xA0;null,&#xA0;InteropHelper.SPIF_UPDATEINIFILE&#xA0;|&#xA0;InteropHelper.SPIF_SENDCHANGE);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br><br><br>The InteropHelper class has been posted in this article.<br></code></pre></div>\n\t\t\t",
    "postId": "change-windows-cursor-globally-in-wpf"
  },
  {
    "postId": "character-map-in-wpf",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><p></p>\n<h2>Introduction&#xA0;<span>&#xA0;&#xA0;</span></h2>\n<div><span><a href=\"http://www.codeproject.com/Articles/396811/Character-Map-in-WPF\" target=\"_blank\">(View this article in code project)</a></span></div>\n<div></div>\n<div>The&#xA0;<strong>Character Map</strong>&#xA0;utility is free on all Windows machines and can be used to copy and paste accented letters and other foreign language characters into any Windows application. The&#xA0;<em>Character Map</em>&#xA0;is similar to the<em>&#xA0;Insert Symbol</em>&#xA0;tool found in some Windows applications such as&#xA0;<em>Microsoft Word</em>.</div>\n<div>This article explains how to implement this tool using WPF with great performance. This tool can be easily integrated into any of your WPF applications easily.&#xA0;&#xA0;</div>\n<div><img src=\"https://i1.wp.com/www.codeproject.com/KB/WPF/396811/character_map.gif\"></div>\n<h2>Using the code&#xA0;</h2>\n<div>When I was start thinking about implementing this in WPF, I realized the main challenge would be the performance. But the native character map in Windows is really faster and will give a nice user experience.&#xA0;So I am sure this article will be valid only if this tool would also give the same experience.&#xA0;</div>\n<h3><span>Getting the symbols&#xA0;&#xA0;</span></h3>\n<div>Let me first start with getting the symbols from Font files. Populating a&#xA0;<code>ComboBox&#xA0;</code>with installed Font families is not a big deal in WPF. The&#xA0;<a href=\"http://wpfplayground.blogspot.in/2012/05/bind-system-font-families-to-combo-box.html\" title=\"Bind Font Families to WPF Combo Box\">article</a>&#xA0;explains how to do that. Also the code is so simple.</div>\n<div id=\"premain0\"></div>\n<pre><code>&lt;ComboBox ItemsSource=&quot;{x:Static Fonts.SystemFontFamilies}&quot; /&gt;</code></pre>\n<div>To get the available symbols from a Typeface, first iterate through the typefaces in a Font family and choose the appropriate one. Once you got the Typeface, get the glyph which gives you the character map dictionary.&#xA0;</div>\n<div id=\"premain1\"></div>\n<pre><code>IDictionary&lt;int, ushort&gt; characterMap;<br>foreach (Typeface typeface in font.GetTypefaces())<br>{<br>   typeface.TryGetGlyphTypeface(out glyph);<br>   if (glyph != null)<br>   {<br>     characterMap = glyph.CharacterToGlyphMap;<br>   }<br>}</code></pre>\n<div>The&#xA0;variable&#xA0;<code>characterMap&#xA0;</code>is a dictionary, which stores the unicode values for our symbols. So now we can go ahead and display the symbols in UI.</div>\n<h3><span>Symbols UI&#xA0;&#xA0;</span></h3>\n<div>As I previously stated, the performance will be a major bottle neck in WPF. Since some font families may have more than 20,000 symbols. In case if you like to show them in a traditional ListBox with a wrap panel you would lose the user experience which Windows default character map has. I am sure there is a Virtualization Wrap Panel for WPF posted in this code project&#xA0;<a href=\"http://www.codeproject.com/Articles/75847/Virtualizing-WrapPanel\" title=\"Virtualizing Wrap Panel\">article</a>.&#xA0;But I am going to use something better in which we don&#x2019;t need to care about the containers generation and disposing them.</div>\n<div>I am going to use a Canvas and I decided my viewport size would be 345 X 250 and not more than that. Based on this I have placed 150&#xA0;<code>SymbolView</code>&#xA0;(view that holds the symbol)&#xA0;objects into the canvas in horizontal wrap manner. Each view will have a textbox displaying the corresponding text of the symbol unicode.</div>\n<div id=\"premain2\"></div>\n<pre><code>&lt;Border x:Class=&quot;CharacterMap.SymbolView&quot;<br>         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>         xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; <br>         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; <br>         RenderTransformOrigin=&quot;0.5, 0.5&quot;<br>         mc:Ignorable=&quot;d&quot; Width=&quot;23&quot; <br>         Height=&quot;25&quot; Background=&quot;White&quot;<br>         d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot; <br>         BorderBrush=&quot;Black&quot; BorderThickness=&quot;0 0 1 1&quot;&gt;<br>    &lt;TextBlock Text=&quot;&quot; x:Name=&quot;charcter&quot; FontSize=&quot;17&quot; <br>      VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot;/&gt;<br>&lt;/Border&gt;</code></pre>\n<div>So now, everytime the user choose the Font family in the Combo Box, I will update the 150 tiles with corresponding symbols. I am using a Dispatcher timer to ensure the things will not kill the UI thread.&#xA0;</div>\n<div id=\"premain3\"></div>\n<pre><code>private void Repaint(double value)<br>{<br>    i = Convert.ToInt32((value / 0.1) * 15);<br>    item_index = 0;<br>    timer.Start();<br>} </code></pre>\n<div>In the tick event of the timer, I am updating the tiles,</div>\n<div id=\"premain4\"></div>\n<pre><code>void timer_Tick(object sender, EventArgs e)<br>{<br>     try<br>     {<br>         SymbolView view = canvas.Children[item_index] as SymbolView;<br>         int index = characterMap.Keys.ElementAt(i);<br>         char c = Convert.ToChar(index);<br>         view.charcter.Text = c.ToString();<br>         item_index++;<br>         i++;<br>     }<br>     catch (Exception)<br>     {<br>         SymbolView view = canvas.Children[item_index] as SymbolView;<br>         view.charcter.Text = &quot;&quot;;<br>         item_index++;<br>         i++;<br>     }<br>     if (item_index &gt;= 150)<br>     {<br>         timer.Stop();<br>         item_index = 0;<br>     }<br>}</code></pre>\n<h3><span>Scrolling&#xA0;</span><span>&#xA0;</span></h3>\n<div>Now its time to handle the Scroll bar. Since I am not using the WPF Items Control, the scrollbars will not work for my case. And it is clear that we will be having only 150 tiles in the UI. So the idea is, we have a&#xA0;<code>ScrollBar</code>&#xA0;near to the canvas showing symbols. Based on the scroll offset, the entire tiles are repainted with updated symbols. The work, is we should match the scrollbar offset to the current symbols in the view.&#xA0;&#xA0;</div>\n<div>The base idea is, even though we got 20,000 symbols for a Font Family, we are showing only 150 symbols. On scrolling we will update the symbols based on the offset. &#xA0;&#xA0;</div>\n<div id=\"premain5\"></div>\n<pre><code>private void OnScroll(object sender, ScrollEventArgs e)<br>{<br>   Repaint(e.NewValue);<br>}<br><br>private void Repaint(double value)<br>{<br>    i = Convert.ToInt32((value / 0.1) * 15);<br>    item_index = 0;<br>    timer.Start();<br>}  </code></pre>\n<div>So now we got a nice scrolling effect even though we have huge number of symbols.&#xA0;Also I have added the Key Down behavior. You could also navigate through the symbols using the Keyboard. A textbox is also there to select and copy the symbols.&#xA0;</div>\n<div></div>\n<div><a href=\"http://www.codeproject.com/KB/WPF/396811/Demo.zip\" target=\"_blank\">Download Demo</a></div>\n<div></div>\n<div><a href=\"http://www.codeproject.com/KB/WPF/396811/CharacterMap.zip\" target=\"_blank\">Download Source</a></div>\n<div></div>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<p>Today I just came across a problem in ListBox, probably with all Selectors. When you bind a CollectionView object which has GroupDescriptions added as below, the first item of Selector will set to be selected by default without user interaction.</p>\n<pre><code>&lt;CollectionViewSource x:Key=&quot;source&quot; Source=&quot;{Binding}&quot;&gt;<br>    &lt;CollectionViewSource.GroupDescriptions&gt;<br>        &lt;PropertyGroupDescription PropertyName=&quot;Genre&quot;/&gt;<br>    &lt;/CollectionViewSource.GroupDescriptions&gt;<br>&lt;/CollectionViewSource&gt;<br></code></pre>\n<p><span id=\"more-239\"></span></p>\n<p>The grouped source bound to ListBox in following way,</p>\n<pre><code>&lt;ListBox ItemsSource=&quot;{Binding Source={StaticResource source}}&quot;<br>         DisplayMemberPath=&quot;Name&quot;&gt;<br>    &lt;ListBox.GroupStyle&gt;<br>        &lt;GroupStyle&gt;<br>            &lt;GroupStyle.HeaderTemplate&gt;<br>                &lt;DataTemplate&gt;<br>                    &lt;TextBlock Text=&quot;{Binding Name}&quot;/&gt;<br>                &lt;/DataTemplate&gt;<br>            &lt;/GroupStyle.HeaderTemplate&gt;<br>        &lt;/GroupStyle&gt;<br>    &lt;/ListBox.GroupStyle&gt;<br>&lt;/ListBox&gt;<br></code></pre>\n<p>In this case, the first item of ListBox will be selected by default without user interaction.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png\"><img data-attachment-id=\"250\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/08/collectionviewsource-grouping-selecteditem-problem/groupingdemo/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png\" data-orig-size=\"418,272\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"groupingdemo\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=418\" alt=\"groupingdemo\" src=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png 418w, https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=300 300w\" sizes=\"(max-width: 418px) 100vw, 418px\"></a></p>\n<p>This clearly seems to be an unwanted behavior, probably an issue. <a href=\"http://joshsmithonwpf.wordpress.com/about/\">Josh Smith</a> in his <a href=\"http://joshsmithonwpf.wordpress.com/2008/09/18/the-initially-selected-item-when-binding-to-a-grouped-icollectionview/\">blog</a>, explained a solution for this problem. But it is not so straightforward. Instead of that setting the <strong>IsSynchronizedWithCurrentItem to false</strong> will solve the problem.</p>\n<pre><code>&lt;ListBox ItemsSource=&quot;{Binding Source={StaticResource source}}&quot;<br>         IsSynchronizedWithCurrentItem=&quot;False&quot;<br>         DisplayMemberPath=&quot;Name&quot;&gt;<br>    &lt;ListBox.GroupStyle&gt;<br>        &lt;GroupStyle&gt;<br>            &lt;GroupStyle.HeaderTemplate&gt;<br>                &lt;DataTemplate&gt;<br>                    &lt;TextBlock Text=&quot;{Binding Name}&quot;/&gt;<br>                &lt;/DataTemplate&gt;<br>            &lt;/GroupStyle.HeaderTemplate&gt;<br>        &lt;/GroupStyle&gt;<br>    &lt;/ListBox.GroupStyle&gt;<br>&lt;/ListBox&gt;<br></code></pre>\n\t\t\t",
    "postId": "collectionviewsource-grouping-selecteditem-problem"
  },
  {
    "postId": "customize-system-menu-in-wpf",
    "content": "\n\t\t\t\t<div dir=\"ltr\">Most of the times, I wonder how System Menu in Native Window has been replaced with custom Menu in WPF. Finally I found the trick. I just want to share the idea here.<p></p>\n<p>Normally WPF does not allow direct customization to Non-client area of Window. But that can be done using native methods. We need to hook the WndProc method. WPF has no override method as Win Forms does. The following code shows how to hook WndProc();</p>\n<pre><code>&#xA0;       private&#xA0;void&#xA0;OnLoaded(object&#xA0;sender,&#xA0;RoutedEventArgs&#xA0;e)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;windowhandle&#xA0;=&#xA0;new&#xA0;WindowInteropHelper(this).Handle;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HwndSource&#xA0;hwndSource&#xA0;=&#xA0;HwndSource.FromHwnd(windowhandle);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;hwndSource.AddHook(new&#xA0;HwndSourceHook(WndProc));<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;private&#xA0;IntPtr&#xA0;WndProc(IntPtr&#xA0;hwnd,&#xA0;int&#xA0;msg,&#xA0;IntPtr&#xA0;wParam,&#xA0;IntPtr&#xA0;lParam,&#xA0;ref&#xA0;bool&#xA0;handled)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{</code></pre>\n<pre><code>            //Code&#xA0;goes&#xA0;here...<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<p>First we should hide the default System Menu in Window. </p>\n<p><img alt src=\"image/png;base64,\"></p>\n<p>To hide the default System Menu in Window, we should handle the particular message. Corresponding window message and parameter for opening System Menu is 0xa4 and 0x02 respectively.</p>\n<pre><code>&#xA0;       private&#xA0;const&#xA0;uint&#xA0;WM_SYSTEMMENU&#xA0;=&#xA0;0xa4;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;private&#xA0;const&#xA0;uint&#xA0;WP_SYSTEMMENU&#xA0;=&#xA0;0x02;</code></pre>\n<p></p>\n<pre><code>        private&#xA0;IntPtr&#xA0;WndProc(IntPtr&#xA0;hwnd,&#xA0;int&#xA0;msg,&#xA0;IntPtr&#xA0;wParam,&#xA0;IntPtr&#xA0;lParam,&#xA0;ref&#xA0;bool&#xA0;handled)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//Message&#xA0;for&#xA0;System&#xA0;Menu...<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;((msg&#xA0;==&#xA0;WM_SYSTEMMENU)&#xA0;&amp;&amp;&#xA0;(wParam.ToInt32()&#xA0;==&#xA0;WP_SYSTEMMENU))<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ShowContextMenu();<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;handled&#xA0;=&#xA0;true;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>ShowContextMenu() method will show our custom Context Menu declared in Window resources.</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>&#xA0;   &lt;Window.Resources&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ContextMenu&#xA0;x:Key=&quot;systemMenu&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Help&quot;&#xA0;InputGestureText=&quot;F1&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;Help.png&quot;&#xA0;Height=&quot;16&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Choose&#xA0;theme&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;ChooseColor.png&quot;&#xA0;Height=&quot;16&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Add&#xA0;Note&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;NoteHS.png&quot;&#xA0;Height=&quot;16&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Separator&#xA0;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Exit&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/ContextMenu&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Window.Resources&gt; </code></pre>\n<pre><code></code></pre>\n<pre><code>        public&#xA0;ContextMenu&#xA0;SystemMenu<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;get<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;Resources[&quot;systemMenu&quot;]&#xA0;as&#xA0;ContextMenu;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>&#xA0;       private&#xA0;void&#xA0;ShowContextMenu()<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(SystemMenu&#xA0;!=&#xA0;null)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;SystemMenu.IsOpen&#xA0;=&#xA0;true;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Now you can see the below output.</code></pre>\n<pre><code></code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Download the sample from below location:</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>http://www.4shared.com/zip/Sno5IMwy/WpfApplication1.html</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Happy coding... </code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code>&#xA0;</code></pre>\n</div>\n\t\t\t"
  },
  {
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>Let me start with a story.</p><div></div><p>Bob need a new assistant for his startup. He hired Janice. Bob wanted Janice to concentrate more on the paper work. One day Bob wanted print outs of some old invoices. Janice collected those invoices. She then get a new printer from the store and get those invoices printed. Bob was happy. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/864x568.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610840.png\"></div></div></div><div></div><p>Few days later Bob wanted some of his user feed back forms to be scanned and uploaded. Janice went out and get a new scanner and get the job done. Similarly every time Bob assign a new job, Janice has to look for required materials to get the job done. Also she has to manage those inventories. Whenever the printer ran out of ink she had to fix it. She was little worried, since she was not able concentrate on her actual job. She brought the concern to Bob. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/722x508.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612281.png\"></div></div></div><div></div><p>Bob thought through that and realised the problem. So he decided to provide the required materials to Janice whenever he assign a job. Janice was happy. But Bob cannot manage those materials continuously because of his busy schedule. So Bob hired Joey as admin and he wants Joey to manage all those inventories for him. So whenever Bob assign a new job to Janice Joey make sure he provide all the required materials to complete the job. All three of them now understood their responsibilities and lived happily. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1100x552.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613616.png\"></div></div></div><div></div><p>Let&apos;s get to the point. </p><div> <div> <hr class=\"divider\"/> </div></div><p>In object oriented programming, an object must depend on one or more other objects to perform a job. Consider our employee class. </p><div> <div> <pre><code>public class Employee <br>{<br>  private readonly IPrinter printer;<br>  private readonly IScanner scanner;<br><br>  public Employee()<br>  {<br>    this.printer = new BlackWhitePrinter();<br>    this.scanner = new Scanner();<br>  }<br><br>  public void GetInvoices()<br>  {<br>    // Get invoices.<br>    this.printer.Print(invoices);<br>  }<br><br>  public void UploadFeedbacks()<br>  {<br>    this.scanner.Scan(feedbacks);<br>    // Upload feedbacks to database<br>  }<br>}<br></code></pre> </div></div><p>It needs to perform certain functions for which it has to depend on certain other low level objects. For example, to hand over few old invoices to Bob Janice has to depend on a printer. The employee class is creating and managing it&apos;s own dependencies. This approach has several disadvantages. </p><ol> <li> <p>Whenever the dependencies get modified, the objects depend on them are also likely to be changed. What if the constructor of the class BlackWhitePrinter changed to accept parameters. </p></li><li> <p>Whenever we create an object for the employee class it comes with black and white printer by default. What if in another context we need a color printer. </p></li><li> <p>The employee class is not focusing on its core job. Instead it is also focusing on managing dependencies, thereby increasing complexity of the class. </p></li><li> <p>Mocking dependencies are not possible and unit testing becomes a pain.</p></li></ol> <div></div><blockquote> <div>Dependency injection is the technique of supplying the required dependencies to an object from outside. </div></blockquote> <div></div><p>Let&apos;s refactor our employee class to adapt dependency injection technique. </p><div> <div> <pre><code>public class Employee <br>{<br>  private readonly IPrinter printer;<br>  private readonly IScanner scanner;<br><br>  public Employee(IPrinter printer, IScanner scanner)<br>  {<br>    this.printer = printer;<br>    this.scanner = scanner;<br>  }<br><br>  public void GetInvoices()<br>  {<br>    // Get invoices.<br>    this.printer.Print(invoices);<br>  }<br><br>  public void UploadFeedbacks()<br>  {<br>    this.scanner.Scan(feedbacks);<br>    // Upload feedbacks to database<br>  }<br>}<br></code></pre> </div></div><p>Instead of creating the printer and scanner dependencies by itself, now the employee get those objects through constructor.</p><div> <div> <pre><code>var printer = new BlackWhitePrinter();<br>var scanner = new Scanner();<br><br>var employee = new Employee(printer, scanner);<br>employee.GetInvoices();<br></code></pre> </div></div><p>The caller has to supply the dependencies, whenever it creates the employee object. The control over the dependencies has been shifted from the employee class to outside. </p><p>By doing this we eliminate all the disadvantages we listed earlier. </p><div></div><p>Any change to the dependencies doesn&apos;t affect the employee class. The employee class depends on the interface and not on the implementation. So a different type of printer can be injected to employee class. Employee class doesn&apos;t need to focus on managing dependencies anymore. Its responsibility is clearly defined. Unit testing employee class is now simple, since mock implementations can be supplied. </p><div></div><p>The code can be further refactored by delegating the dependency management to an external framework. (Now it&apos;s time to hire our Joey to manage all our inventories.)</p><div></div><p>Popular DI frameworks for .NET</p><div></div><p>1. <a href=\"https://code.msdn.microsoft.com/Dependency-Injection-in-11d54863\" target=\"_blank\" rel=\"noopener\">Unity</a>2. <a href=\"https://autofac.org/\" target=\"_blank\" rel=\"noopener\">Autofac</a>3. <a href=\"http://www.ninject.org/\" target=\"_blank\" rel=\"noopener\">Ninject</a></p><div></div><p>For Java</p><div></div><p>1. <a href=\"https://google.github.io/dagger/\" target=\"_blank\" rel=\"noopener\">Dagger</a>2. <a href=\"https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/beans.html\" target=\"_blank\" rel=\"noopener\">Spring</a></p><div></div><p>I am not going to explain the API details of every framework. You can go through the links above to understand that. If we using unity framework this is how to register the dependencies and resolve objects. </p><div> <div> <pre><code>IUnityContainer container = new UnityContainer();<br><br>container.RegisterType<IPrinter, BlackWhitePrinter>();<br>container.RegisterType<IScanner, Scanner>();<br><br>var employee = container.Resolve<Employee>();<br>employee.GetInvoices();<br></code></pre> </div></div><p>When you resolve an object using DI container, it will make sure that it create and supply all the dependencies to the object. So the caller and the employee class does not have to worry about the dependencies. This helps to build system with loosely coupled components. </p><p> </p><p>Thanks for reading. </p></div></div></div>",
    "postId": "dependency-inversion-a-real-world-comparison"
  },
  {
    "postId": "detect-capslock-status-in-c",
    "content": "\n\t\t\t\t<div dir=\"ltr\">All usual registration forms will contain a password edit and users has to be warned for the Caps Lock state. So it is pretty easy in C# to check this. The following line will do the magic.<p></p>\n<p></p>\n<pre><code>if&#xA0;(Console.CapsLock)<br>{<br>&#xA0;&#xA0;&#xA0; Console.WriteLine(&quot;CapsLock&#xA0;On!!!&quot;);<br>}</code></pre>\n<p>Happy C#&#x2026;..</p>\n<div></div>\n<p></p></div>\n\t\t\t"
  },
  {
    "postId": "different-sized-tile-items-in-winrt-gridview",
    "content": "\n\t\t\t\t<p>GridView in WinRT allows you to arrange tile items in wrap manner. In case, if you want to arrange items as in Windows store app, we need different sized tile items. There is no direct way to configure different sized items while using data binding in Grid View. I am going to explain the solution in this article.</p>\n<p>VariableSizedWrapGrid should be the panel for Grid View. This panel has two attached properties <em>ColumnSpan</em> and <em>RowSpan</em>. To set this property to the containers, we have to inherit the GridView class and override the <em>PrepareContainerForItemOverride</em>.</p>\n<p><span id=\"more-15\"></span></p>\n<pre><code>    public class VariableGrid : GridView<br>    {<br>        protected override void PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject element, object item)<br>        {<br>            var tile = item as Model;<br><br>            if (tile != null)<br>            {<br>                var griditem = element as GridViewItem;<br><br>                if (griditem != null)<br>                {<br>                    VariableSizedWrapGrid.SetColumnSpan(griditem, tile.ColumnSpan);<br>                    VariableSizedWrapGrid.SetRowSpan(griditem, tile.RowSpan);<br>                }<br>            }<br><br>            base.PrepareContainerForItemOverride(element, item);<br>        }<br>    }<br></code></pre>\n<p>I have the Model class as below. It contains the ColumnSpan and RowSpan property.</p>\n<pre><code>    public class Model<br>    {<br>        public int ColumnSpan { get; set; }<br><br>        public int RowSpan { get; set; }<br><br>        public string Header { get; set; }<br>    }<br></code></pre>\n<p>Our VariableGrid class will map the span properties from model to containers and you can see the following output.</p>\n<pre><code>        &lt;local:VariableGrid ItemsSource=&quot;{Binding Models}&quot;<br>                            Padding=&quot;0&quot;<br>                            Margin=&quot;100&quot;<br>                            Height=&quot;630&quot;&gt;<br>            &lt;local:VariableGrid.ItemTemplate&gt;<br>                &lt;DataTemplate&gt;<br>                    &lt;Grid Background=&quot;MediumOrchid&quot;&gt;<br>                        &lt;TextBlock Text=&quot;{Binding Header}&quot;<br>                                   Margin=&quot;10&quot;<br>                                   HorizontalAlignment=&quot;Left&quot;<br>                                   VerticalAlignment=&quot;Bottom&quot; /&gt;<br>                    &lt;/Grid&gt;<br>                &lt;/DataTemplate&gt;<br>            &lt;/local:VariableGrid.ItemTemplate&gt;<br>            &lt;local:VariableGrid.ItemsPanel&gt;<br>                &lt;ItemsPanelTemplate&gt;<br>                    &lt;VariableSizedWrapGrid ItemHeight=&quot;200&quot;<br>                                           ItemWidth=&quot;200&quot; /&gt;<br>                &lt;/ItemsPanelTemplate&gt;<br>            &lt;/local:VariableGrid.ItemsPanel&gt;<br>        &lt;/local:VariableGrid&gt;<br></code></pre>\n\t\t\t"
  },
  {
    "postId": "digging-into-user32-dll",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><span>Most of the times, we need to interact with native windows actions in WPF or Win Forms. C# provides a better way to import an assembly dynamically and we can effectively use the methods of native System assembly.&#xA0;</span><p></p>\n<p></p>\n<pre><code>&#xA0;       class&#xA0;Example<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Use&#xA0;DllImport&#xA0;to&#xA0;import&#xA0;the&#xA0;Win32&#xA0;MessageBox&#xA0;function.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;,&#xA0;CharSet&#xA0;=&#xA0;CharSet.Unicode)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;int&#xA0;MessageBox(IntPtr&#xA0;hWnd,&#xA0;String&#xA0;text,&#xA0;String&#xA0;caption,&#xA0;uint&#xA0;type);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;static&#xA0;void&#xA0;Main()<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Call&#xA0;the&#xA0;MessageBox&#xA0;function&#xA0;using&#xA0;platform&#xA0;invoke.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MessageBox(new&#xA0;IntPtr(0),&#xA0;&quot;Hello&#xA0;World!&quot;,&#xA0;&quot;Hello&#xA0;Dialog&quot;,&#xA0;0);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br></code></pre>\n<p><span>One of the most useful assembly if user32 assembly which contains the 732 methods.</span></p>\n<p><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;} table.MsoTableGrid  {mso-style-name:\"Table Grid\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-priority:59;  mso-style-unhide:no;  border:solid windowtext 1.0pt;  mso-border-alt:solid windowtext .5pt;  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-border-insideh:.5pt solid windowtext;  mso-border-insidev:.5pt solid windowtext;  mso-para-margin:0in;  mso-para-margin-bottom:.0001pt;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  </p>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"100%\">\n<div align=\"center\"><span>ActivateKeyboardLayout 1<br>AdjustWindowRect 2<br>AdjustWindowRectEx 3<br>AlignRects 4<br>AllowForegroundActivation 5<br>AllowSetForegroundWindow 6<br>AnimateWindow 7<br>AnyPopup 8<br>AppendMenuA 9<br>AppendMenuW 10<br>ArrangeIconicWindows 11<br>AttachThreadInput 12<br>BeginDeferWindowPos 13<br>BeginPaint 14<br>BlockInput 15<br>BringWindowToTop 16<br>BroadcastSystemMessage 17<br>BroadcastSystemMessageA 18<br>BroadcastSystemMessageExA 19<br>BroadcastSystemMessageExW 20<br>BroadcastSystemMessageW 21<br>BuildReasonArray 22<br>CalcMenuBar 23<br>CallMsgFilter 24<br>CallMsgFilterA 25<br>CallMsgFilterW 26<br>CallNextHookEx 27<br>CallWindowProcA 28<br>CallWindowProcW 29<br>CascadeChildWindows 30<br>CascadeWindows 31<br>ChangeClipboardChain 32<br>ChangeDisplaySettingsA 33<br>ChangeDisplaySettingsExA 34<br>ChangeDisplaySettingsExW 35<br>ChangeDisplaySettingsW 36<br>ChangeMenuA 37<br>ChangeMenuW 38<br>CharLowerA 39<br>CharLowerBuffA 40<br>CharLowerBuffW 41<br>CharLowerW 42<br>CharNextA 43<br>CharNextExA 44<br>CharNextW 45<br>CharPrevA 46<br>CharPrevExA 47<br>CharPrevW 48<br>CharToOemA 49<br>CharToOemBuffA 50<br>CharToOemBuffW 51<br>CharToOemW 52<br>CharUpperA 53<br>CharUpperBuffA 54<br>CharUpperBuffW 55<br>CharUpperW 56<br>CheckDlgButton 57<br>CheckMenuItem 58<br>CheckMenuRadioItem 59<br>CheckRadioButton 60<br>ChildWindowFromPoint 61<br>ChildWindowFromPointEx 62<br>CliImmSetHotKey 63<br>ClientThreadSetup 64<br>ClientToScreen 65<br>ClipCursor 66<br>CloseClipboard 67<br>CloseDesktop 68<br>CloseWindow 69<br>CloseWindowStation 70<br>CopyAcceleratorTableA 71<br>CopyAcceleratorTableW 72<br>CopyIcon 73<br>CopyImage 74<br>CopyRect 75<br>CountClipboardFormats 76<br>CreateAcceleratorTableA 77<br>CreateAcceleratorTableW 78<br>CreateCaret 79<br>CreateCursor 80<br>CreateDesktopA 81<br>CreateDesktopW 82<br>CreateDialogIndirectParamA 83<br>CreateDialogIndirectParamAorW 84<br>CreateDialogIndirectParamW 85<br>CreateDialogParamA 86<br>CreateDialogParamW 87<br>CreateIcon 88<br>CreateIconFromResource 89<br>CreateIconFromResourceEx 90<br>CreateIconIndirect 91<br>CreateMDIWindowA 92<br>CreateMDIWindowW 93<br>CreateMenu 94<br>CreatePopupMenu 95<br>CreateSystemThreads 96<br>CreateWindowExA 97<br>CreateWindowExW 98<br>CreateWindowStationA 99<br>CreateWindowStationW 100<br>CsrBroadcastSystemMessageExW 101<br>CtxInitUser32 102<br>DdeAbandonTransaction 103<br>DdeAccessData 104<br>DdeAddData 105<br>DdeClientTransaction 106<br>DdeCmpStringHandles 107<br>DdeConnect 108<br>DdeConnectList 109<br>DdeCreateDataHandle 110<br>DdeCreateStringHandleA 111<br>DdeCreateStringHandleW 112<br>DdeDisconnect 113<br>DdeDisconnectList 114<br>DdeEnableCallback 115<br>DdeFreeDataHandle 116<br>DdeFreeStringHandle 117<br>DdeGetData 118<br>DdeGetLastError 119<br>DdeGetQualityOfService 120<br>DdeImpersonateClient 121<br>DdeInitializeA 122<br>DdeInitializeW 123<br>DdeKeepStringHandle 124<br>DdeNameService 125<br>DdePostAdvise 126<br>DdeQueryConvInfo 127<br>DdeQueryNextServer 128<br>DdeQueryStringA 129<br>DdeQueryStringW 130<br>DdeReconnect 131<br>DdeSetQualityOfService 132<br>DdeSetUserHandle 133<br>DdeUnaccessData 134<br>DdeUninitialize 135<br>DefDlgProcA 136<br>DefDlgProcW 137<br>DefFrameProcA 138<br>DefFrameProcW 139<br>DefMDIChildProcA 140<br>DefMDIChildProcW 141<br>DefRawInputProc 142<br>DefWindowProcA 143<br>DefWindowProcW 144<br>DeferWindowPos 145<br>DeleteMenu 146<br>DeregisterShellHookWindow 147<br>DestroyAcceleratorTable 148<br>DestroyCaret 149<br>DestroyCursor 150<br>DestroyIcon 151<br>DestroyMenu 152<br>DestroyReasons 153<br>DestroyWindow 154<br>DeviceEventWorker 155<br>DialogBoxIndirectParamA 156<br>DialogBoxIndirectParamAorW 157<br>DialogBoxIndirectParamW 158<br>DialogBoxParamA 159<br>DialogBoxParamW 160<br>DisableProcessWindowsGhosting 161<br>DispatchMessageA 162<br>DispatchMessageW 163<br>DisplayExitWindowsWarnings 164<br>DlgDirListA 165<br>DlgDirListComboBoxA 166<br>DlgDirListComboBoxW 167<br>DlgDirListW 168<br>DlgDirSelectComboBoxExA 169<br>DlgDirSelectComboBoxExW 170<br>DlgDirSelectExA 171<br>DlgDirSelectExW 172<br>DragDetect 173<br>DragObject 174<br>DrawAnimatedRects 175<br>DrawCaption 176<br>DrawCaptionTempA 177<br>DrawCaptionTempW 178<br>DrawEdge 179<br>DrawFocusRect 180<br>DrawFrame 181<br>DrawFrameControl 182<br>DrawIcon 183<br>DrawIconEx 184<br>DrawMenuBar 185<br>DrawMenuBarTemp 186<br>DrawStateA 187<br>DrawStateW 188<br>DrawTextA 189<br>DrawTextExA 190<br>DrawTextExW 191<br>DrawTextW 192<br>EditWndProc 193<br>EmptyClipboard 194<br>EnableMenuItem 195<br>EnableScrollBar 196<br>EnableWindow 197<br>EndDeferWindowPos 198<br>EndDialog 199<br>EndMenu 200<br>EndPaint 201<br>EndTask 202<br>EnterReaderModeHelper 203<br>EnumChildWindows 204<br>EnumClipboardFormats 205<br>EnumDesktopWindows 206<br>EnumDesktopsA 207<br>EnumDesktopsW 208<br>EnumDisplayDevicesA 209<br>EnumDisplayDevicesW 210<br>EnumDisplayMonitors 211<br>EnumDisplaySettingsA 212<br>EnumDisplaySettingsExA 213<br>EnumDisplaySettingsExW 214<br>EnumDisplaySettingsW 215<br>EnumPropsA 216<br>EnumPropsExA 217<br>EnumPropsExW 218<br>EnumPropsW 219<br>EnumThreadWindows 220<br>EnumWindowStationsA 221<br>EnumWindowStationsW 222<br>EnumWindows 223<br>EqualRect 224<br>ExcludeUpdateRgn 225<br>ExitWindowsEx 226<br>FillRect 227<br>FindWindowA 228<br>FindWindowExA 229<br>FindWindowExW 230<br>FindWindowW 231<br>FlashWindow 232<br>FlashWindowEx 233<br>FrameRect 234<br>FreeDDElParam 235<br>GetActiveWindow 236<br>GetAltTabInfo 237<br>GetAltTabInfoA 238<br>GetAltTabInfoW 239<br>GetAncestor 240<br>GetAppCompatFlags 242<br>GetAppCompatFlags2 241<br>GetAsyncKeyState 243<br>GetCapture 244<br>GetCaretBlinkTime 245<br>GetCaretPos 246<br>GetClassInfoA 247<br>GetClassInfoExA 248<br>GetClassInfoExW 249<br>GetClassInfoW 250<br>GetClassLongA 251<br>GetClassLongW 252<br>GetClassNameA 253<br>GetClassNameW 254<br>GetClassWord 255<br>GetClientRect 256<br>GetClipCursor 257<br>GetClipboardData 258<br>GetClipboardFormatNameA 259<br>GetClipboardFormatNameW 260<br>GetClipboardOwner 261<br>GetClipboardSequenceNumber 262<br>GetClipboardViewer 263<br>GetComboBoxInfo 264<br>GetCursor 265<br>GetCursorFrameInfo 266<br>GetCursorInfo 267<br>GetCursorPos 268<br>GetDC 269<br>GetDCEx 270<br>GetDesktopWindow 271<br>GetDialogBaseUnits 272<br>GetDlgCtrlID 273<br>GetDlgItem 274<br>GetDlgItemInt 275<br>GetDlgItemTextA 276<br>GetDlgItemTextW 277<br>GetDoubleClickTime 278<br>GetFocus 279<br>GetForegroundWindow 280<br>GetGUIThreadInfo 281<br>GetGuiResources 282<br>GetIconInfo 283<br>GetInputDesktop 284<br>GetInputState 285<br>GetInternalWindowPos 286<br>GetKBCodePage 287<br>GetKeyNameTextA 288<br>GetKeyNameTextW 289<br>GetKeyState 290<br>GetKeyboardLayout 291<br>GetKeyboardLayoutList 292<br>GetKeyboardLayoutNameA 293<br>GetKeyboardLayoutNameW 294<br>GetKeyboardState 295<br>GetKeyboardType 296<br>GetLastActivePopup 297<br>GetLastInputInfo 298<br>GetLayeredWindowAttributes 299<br>GetListBoxInfo 300<br>GetMenu 301<br>GetMenuBarInfo 302<br>GetMenuCheckMarkDimensions 303<br>GetMenuContextHelpId 304<br>GetMenuDefaultItem 305<br>GetMenuInfo 306<br>GetMenuItemCount 307<br>GetMenuItemID 308<br>GetMenuItemInfoA 309<br>GetMenuItemInfoW 310<br>GetMenuItemRect 311<br>GetMenuState 312<br>GetMenuStringA 313<br>GetMenuStringW 314<br>GetMessageA 315<br>GetMessageExtraInfo 316<br>GetMessagePos 317<br>GetMessageTime 318<br>GetMessageW 319<br>GetMonitorInfoA 320<br>GetMonitorInfoW 321<br>GetMouseMovePointsEx 322<br>GetNextDlgGroupItem 323<br>GetNextDlgTabItem 324<br>GetOpenClipboardWindow 325<br>GetParent 326<br>GetPriorityClipboardFormat 327<br>GetProcessDefaultLayout 328<br>GetProcessWindowStation 329<br>GetProgmanWindow 330<br>GetPropA 331<br>GetPropW 332<br>GetQueueStatus 333<br>GetRawInputBuffer 334<br>GetRawInputData 335<br>GetRawInputDeviceInfoA 336<br>GetRawInputDeviceInfoW 337<br>GetRawInputDeviceList 338<br>GetReasonTitleFromReasonCode 339<br>GetRegisteredRawInputDevices 340<br>GetScrollBarInfo 341<br>GetScrollInfo 342<br>GetScrollPos 343<br>GetScrollRange 344<br>GetShellWindow 345<br>GetSubMenu 346<br>GetSysColor 347<br>GetSysColorBrush 348<br>GetSystemMenu 349<br>GetSystemMetrics 350<br>GetTabbedTextExtentA 351<br>GetTabbedTextExtentW 352<br>GetTaskmanWindow 353<br>GetThreadDesktop 354<br>GetTitleBarInfo 355<br>GetTopWindow 356<br>GetUpdateRect 357<br>GetUpdateRgn 358<br>GetUserObjectInformationA 359<br>GetUserObjectInformationW 360<br>GetUserObjectSecurity 361<br>GetWinStationInfo 362<br>GetWindow 363<br>GetWindowContextHelpId 364<br>GetWindowDC 365<br>GetWindowInfo 366<br>GetWindowLongA 367<br>GetWindowLongW 368<br>GetWindowModuleFileName 369<br>GetWindowModuleFileNameA 370<br>GetWindowModuleFileNameW 371<br>GetWindowPlacement 372<br>GetWindowRect 373<br>GetWindowRgn 374<br>GetWindowRgnBox 375<br>GetWindowTextA 376<br>GetWindowTextLengthA 377<br>GetWindowTextLengthW 378<br>GetWindowTextW 379<br>GetWindowThreadProcessId 380<br>GetWindowWord 381<br>GrayStringA 382<br>GrayStringW 383<br>HideCaret 384<br>HiliteMenuItem 385<br>IMPGetIMEA 386<br>IMPGetIMEW 387<br>IMPQueryIMEA 388<br>IMPQueryIMEW 389<br>IMPSetIMEA 390<br>IMPSetIMEW 391<br>ImpersonateDdeClientWindow 392<br>InSendMessage 393<br>InSendMessageEx 394<br>InflateRect 395<br>InitializeLpkHooks 396<br>InitializeWin32EntryTable 397<br>InsertMenuA 398<br>InsertMenuItemA 399<br>InsertMenuItemW 400<br>InsertMenuW 401<br>InternalGetWindowText 402<br>IntersectRect 403<br>InvalidateRect 404<br>InvalidateRgn 405<br>InvertRect 406<br>IsCharAlphaA 407<br>IsCharAlphaNumericA 408<br>IsCharAlphaNumericW 409<br>IsCharAlphaW 410<br>IsCharLowerA 411<br>IsCharLowerW 412<br>IsCharUpperA 413<br>IsCharUpperW 414<br>IsChild 415<br>IsClipboardFormatAvailable 416<br>IsDialogMessage 417<br>IsDialogMessageA 418<br>IsDialogMessageW 419<br>IsDlgButtonChecked 420<br>IsGUIThread 421<br>IsHungAppWindow 422<br>IsIconic 423<br>IsMenu 424<br>IsRectEmpty 425<br>IsServerSideWindow 426<br>IsWinEventHookInstalled 427<br>IsWindow 428<br>IsWindowEnabled 429<br>IsWindowInDestroy 430<br>IsWindowUnicode 431<br>IsWindowVisible 432<br>IsZoomed 433<br>KillSystemTimer 434<br>KillTimer 435<br>LoadAcceleratorsA 436<br>LoadAcceleratorsW 437<br>LoadBitmapA 438<br>LoadBitmapW 439<br>LoadCursorA 440<br>LoadCursorFromFileA 441<br>LoadCursorFromFileW 442<br>LoadCursorW 443<br>LoadIconA 444<br>LoadIconW 445<br>LoadImageA 446<br>LoadImageW 447<br>LoadKeyboardLayoutA 448<br>LoadKeyboardLayoutEx 449<br>LoadKeyboardLayoutW 450<br>LoadLocalFonts 451<br>LoadMenuA 452<br>LoadMenuIndirectA 453<br>LoadMenuIndirectW 454<br>LoadMenuW 455<br>LoadRemoteFonts 456<br>LoadStringA 457<br>LoadStringW 458<br>LockSetForegroundWindow 459<br>LockWindowStation 460<br>LockWindowUpdate 461<br>LockWorkStation 462<br>LookupIconIdFromDirectory 463<br>LookupIconIdFromDirectoryEx 464<br>MBToWCSEx 465<br>MB_GetString 466<br>MapDialogRect 467<br>MapVirtualKeyA 468<br>MapVirtualKeyExA 469<br>MapVirtualKeyExW 470<br>MapVirtualKeyW 471<br>MapWindowPoints 472<br>MenuItemFromPoint 473<br>MenuWindowProcA 474<br>MenuWindowProcW 475<br>MessageBeep 476<br>MessageBoxA 477<br>MessageBoxExA 478<br>MessageBoxExW 479<br>MessageBoxIndirectA 480<br>MessageBoxIndirectW 481<br>MessageBoxTimeoutA 482<br>MessageBoxTimeoutW 483<br>MessageBoxW 484<br>ModifyMenuA 485<br>ModifyMenuW 486<br>MonitorFromPoint 487<br>MonitorFromRect 488<br>MonitorFromWindow 489<br>MoveWindow 490<br>MsgWaitForMultipleObjects 491<br>MsgWaitForMultipleObjectsEx 492<br>NotifyWinEvent 493<br>OemKeyScan 494<br>OemToCharA 495<br>OemToCharBuffA 496<br>OemToCharBuffW 497<br>OemToCharW 498<br>OffsetRect 499<br>OpenClipboard 500<br>OpenDesktopA 501<br>OpenDesktopW 502<br>OpenIcon 503<br>OpenInputDesktop 504<br>OpenWindowStationA 505<br>OpenWindowStationW 506<br>PackDDElParam 507<br>PaintDesktop 508<br>PaintMenuBar 509<br>PeekMessageA 510<br>PeekMessageW 511<br>PostMessageA 512<br>PostMessageW 513<br>PostQuitMessage 514<br>PostThreadMessageA 515<br>PostThreadMessageW 516<br>PrintWindow 517<br>PrivateExtractIconExA 518<br>PrivateExtractIconExW 519<br>PrivateExtractIconsA 520<br>PrivateExtractIconsW 521<br>PrivateSetDbgTag 522<br>PrivateSetRipFlags 523<br>PtInRect 524<br>QuerySendMessage 525<br>QueryUserCounters 526<br>RealChildWindowFromPoint 527<br>RealGetWindowClass 528<br>RealGetWindowClassA 529<br>RealGetWindowClassW 530<br>ReasonCodeNeedsBugID 531<br>ReasonCodeNeedsComment 532<br>RecordShutdownReason 533<br>RedrawWindow 534<br>RegisterClassA 535<br>RegisterClassExA 536<br>RegisterClassExW 537<br>RegisterClassW 538<br>RegisterClipboardFormatA 539<br>RegisterClipboardFormatW 540<br>RegisterDeviceNotificationA 541<br>RegisterDeviceNotificationW 542<br>RegisterHotKey 543<br>RegisterLogonProcess 544<br>RegisterMessagePumpHook 545<br>RegisterRawInputDevices 546<br>RegisterServicesProcess 547<br>RegisterShellHookWindow 548<br>RegisterSystemThread 549<br>RegisterTasklist 550<br>RegisterUserApiHook 551<br>RegisterWindowMessageA 552<br>RegisterWindowMessageW 553<br>ReleaseCapture 554<br>ReleaseDC 555<br>RemoveMenu 556<br>RemovePropA 557<br>RemovePropW 558<br>ReplyMessage 559<br>ResolveDesktopForWOW 560<br>ReuseDDElParam 561<br>ScreenToClient 562<br>ScrollChildren 563<br>ScrollDC 564<br>ScrollWindow 565<br>ScrollWindowEx 566<br>SendDlgItemMessageA 567<br>SendDlgItemMessageW 568<br>SendIMEMessageExA 569<br>SendIMEMessageExW 570<br>SendInput 571<br>SendMessageA 572<br>SendMessageCallbackA 573<br>SendMessageCallbackW 574<br>SendMessageTimeoutA 575<br>SendMessageTimeoutW 576<br>SendMessageW 577<br>SendNotifyMessageA 578<br>SendNotifyMessageW 579<br>SetActiveWindow 580<br>SetCapture 581<br>SetCaretBlinkTime 582<br>SetCaretPos 583<br>SetClassLongA 584<br>SetClassLongW 585<br>SetClassWord 586<br>SetClipboardData 587<br>SetClipboardViewer 588<br>SetConsoleReserveKeys 589<br>SetCursor 590<br>SetCursorContents 591<br>SetCursorPos 592<br>SetDebugErrorLevel 593<br>SetDeskWallpaper 594<br>SetDlgItemInt 595<br>SetDlgItemTextA 596<br>SetDlgItemTextW 597<br>SetDoubleClickTime 598<br>SetFocus 599<br>SetForegroundWindow 600<br>SetInternalWindowPos 601<br>SetKeyboardState 602<br>SetLastErrorEx 603<br>SetLayeredWindowAttributes 604<br>SetLogonNotifyWindow 605<br>SetMenu 606<br>SetMenuContextHelpId 607<br>SetMenuDefaultItem 608<br>SetMenuInfo 609<br>SetMenuItemBitmaps 610<br>SetMenuItemInfoA 611<br>SetMenuItemInfoW 612<br>SetMessageExtraInfo 613<br>SetMessageQueue 614<br>SetParent 615<br>SetProcessDefaultLayout 616<br>SetProcessWindowStation 617<br>SetProgmanWindow 618<br>SetPropA 619<br>SetPropW 620<br>SetRect 621<br>SetRectEmpty 622<br>SetScrollInfo 623<br>SetScrollPos 624<br>SetScrollRange 625<br>SetShellWindow 626<br>SetShellWindowEx 627<br>SetSysColors 628<br>SetSysColorsTemp 629<br>SetSystemCursor 630<br>SetSystemMenu 631<br>SetSystemTimer 632<br>SetTaskmanWindow 633<br>SetThreadDesktop 634<br>SetTimer 635<br>SetUserObjectInformationA 636<br>SetUserObjectInformationW 637<br>SetUserObjectSecurity 638<br>SetWinEventHook 639<br>SetWindowContextHelpId 640<br>SetWindowLongA 641<br>SetWindowLongW 642<br>SetWindowPlacement 643<br>SetWindowPos 644<br>SetWindowRgn 645<br>SetWindowStationUser 646<br>SetWindowTextA 647<br>SetWindowTextW 648<br>SetWindowWord 649<br>SetWindowsHookA 650<br>SetWindowsHookExA 651<br>SetWindowsHookExW 652<br>SetWindowsHookW 653<br>ShowCaret 654<br>ShowCursor 655<br>ShowOwnedPopups 656<br>ShowScrollBar 657<br>ShowStartGlass 658<br>ShowWindow 659<br>ShowWindowAsync 660<br>SoftModalMessageBox 661<br>SubtractRect 662<br>SwapMouseButton 663<br>SwitchDesktop 664<br>SwitchToThisWindow 665<br>SystemParametersInfoA 666<br>SystemParametersInfoW 667<br>TabbedTextOutA 668<br>TabbedTextOutW 669<br>TileChildWindows 670<br>TileWindows 671<br>ToAscii 672<br>ToAsciiEx 673<br>ToUnicode 674<br>ToUnicodeEx 675<br>TrackMouseEvent 676<br>TrackPopupMenu 677<br>TrackPopupMenuEx 678<br>TranslateAccelerator 679<br>TranslateAcceleratorA 680<br>TranslateAcceleratorW 681<br>TranslateMDISysAccel 682<br>TranslateMessage 683<br>TranslateMessageEx 684<br>UnhookWinEvent 685<br>UnhookWindowsHook 686<br>UnhookWindowsHookEx 687<br>UnionRect 688<br>UnloadKeyboardLayout 689<br>UnlockWindowStation 690<br>UnpackDDElParam 691<br>UnregisterClassA 692<br>UnregisterClassW 693<br>UnregisterDeviceNotification 694<br>UnregisterHotKey 695<br>UnregisterMessagePumpHook 696<br>UnregisterUserApiHook 697<br>UpdateLayeredWindow 698<br>UpdatePerUserSystemParameters 699<br>UpdateWindow 700<br>User32InitializeImmEntryTable 701<br>UserClientDllInitialize 702<br>UserHandleGrantAccess 703<br>UserLpkPSMTextOut 704<br>UserLpkTabbedTextOut 705<br>UserRealizePalette 706<br>UserRegisterWowHandlers 707<br>VRipOutput 708<br>VTagOutput 709<br>ValidateRect 710<br>ValidateRgn 711<br>VkKeyScanA 712<br>VkKeyScanExA 713<br>VkKeyScanExW 714<br>VkKeyScanW 715<br>WCSToMBEx 716<br>WINNLSEnableIME 717<br>WINNLSGetEnableStatus 718<br>WINNLSGetIMEHotkey 719<br>WaitForInputIdle 720<br>WaitMessage 721<br>Win32PoolAllocationStats 722<br>WinHelpA 723<br>WinHelpW 724<br>WindowFromDC 725<br>WindowFromPoint 726<br>keybd_event 727<br>mouse_event 728<br>wsprintfA 729<br>wsprintfW 730<br>wvsprintfA 731<br>wvsprintfW 732</span></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<div></div>\n<div align=\"center\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td></td>\n<td align=\"center\" bgcolor=\"#949449\" width=\"2\"></td>\n<td align=\"center\" bgcolor=\"#cccc99\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\t\t\t"
  },
  {
    "postId": "enum-to-combobox-binding",
    "content": "\n\t\t\t\t<div dir=\"ltr\">Any real world appliation would like bind the Enum values to a ComboBox. So it is always better to have common code that will do the logic. Below, I have a helper class which exposed a property to get the enum type, so that I can resolve the enum values.<p></p>\n<div id=\"codeSnippetWrapper\">\n<div id=\"codeSnippet\">\n<pre><code>   1: public static Type GetEnum(DependencyObject obj)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             return (Type)obj.GetValue(EnumProperty);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:         public static void SetEnum(DependencyObject obj, string value)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:             obj.SetValue(EnumProperty, value);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         // Using a DependencyProperty as the backing store for Enum.  This enables animation, styling, binding, etc...</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         public static readonly DependencyProperty EnumProperty =</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:             DependencyProperty.RegisterAttached(&quot;Enum&quot;, typeof(Type), typeof(EnumHelper), new PropertyMetadata(null, OnEnumChanged));</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Get the values of enum and set it as ComboBox ItemsSource.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: private static void OnEnumChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             var control = sender as ItemsControl;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:             if (control != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:             {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:                 if (e.NewValue != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:                     var _enum = Enum.GetValues(e.NewValue as Type);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:                     control.ItemsSource = _enum;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:             }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:         }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Now the ComboBox will bind to the enum values, if we set the enum value in XAML.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public enum Designation</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:         SoftwareEngineer,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:         TeamLead,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         ProductManager</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:     }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p></p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: &lt;ComboBox x:Name=&quot;Designation&quot; Margin=&quot;5&quot; Grid.Row=&quot;5&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:                          SelectedItem=&quot;{Binding Designation, Mode=TwoWay}&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:                          local:EnumHelper.Enum=&quot;{x:Type local:Designation}&quot;&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:                   </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5: &lt;/ComboBox&gt;</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p></p>\n<div><a href=\"http://lh6.ggpht.com/-QY_gUY3kSSY/UX4NHT3uMhI/AAAAAAAABP8/rBuP_hwuwaU/s1600-h/image8.png\"><img align=\"left\" alt=\"image\" border=\"0\" height=\"137\" src=\"https://i1.wp.com/lh3.ggpht.com/-dguBFDsAySA/UX4NHw7l9WI/AAAAAAAABQE/CH5mNCRUwcs/image_thumb6.png\" title=\"image\" width=\"320\"></a></div>\n<p>Look at the names of every item. It is not well spaced. It should be Product Manager instead of ProductManager. For this we will use the Display attribute to enum values. Further we can also use Description attribute to let the user see more details.</p>\n<p>I have modified my enum looks below.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public enum Designation</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:         [Display(Name=&quot;Software Engineer&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         [Description(&quot;Software engineer responsible for core developement.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:         SoftwareEngineer,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         [Display(Name = &quot;Team Lead&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:         [Description(&quot;Team lead responsible for leading a small team of 5 to 10 members.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         TeamLead,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         [Display(Name = &quot;Product Manager&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         [Description(&quot;Product manager responsible for core management.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:         ProductManager</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  14:     }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Also our helper class should expose another property to get the values of attributes and set it wherever needed. For example, in this case I will show the description as tooltip and display as text.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public static bool GetMoreDetails(DependencyObject obj)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             return (bool)obj.GetValue(MoreDetailsProperty);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:         public static void SetMoreDetails(DependencyObject obj, bool value)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:             obj.SetValue(MoreDetailsProperty, value);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         // Using a DependencyProperty as the backing store for MoreDetails.  This enables animation, styling, binding, etc...</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         public static readonly DependencyProperty MoreDetailsProperty =</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:             DependencyProperty.RegisterAttached(&quot;MoreDetails&quot;, typeof(bool), typeof(EnumHelper), new PropertyMetadata(false, OnMoreDetailsChanged));</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  14:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  15:         private static void OnMoreDetailsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  16:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  17:             var control = sender as FrameworkElement;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  18:             if (control != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  19:             {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  20:                 var enumobject = control.DataContext;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  21:                 var fieldInfo = enumobject.GetType().GetField(enumobject.ToString());</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  22:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  23:                 var array = fieldInfo.GetCustomAttributes(false);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  24:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  25:                 if (array.Length == 0)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  26:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  27:                     if (control is TextBlock)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  28:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  29:                         ((TextBlock)control).Text = enumobject.ToString();</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  30:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  31:                     else if (control is ContentControl)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  32:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  33:                         ((ContentControl)control).Content = enumobject;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  34:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  35:                     return;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  36:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  37:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  38:                 foreach (var o in array)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  39:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  40:                     if (o is DescriptionAttribute)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  41:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  42:                         control.ToolTip = ((DescriptionAttribute) o).Description;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  43:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  44:                     else if (o is DisplayAttribute)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  45:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  46:                         if (control is TextBlock)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  47:                         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  48:                             ((TextBlock) control).Text = ((DisplayAttribute) o).Name;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  49:                         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  50:                         else if (control is ContentControl)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  51:                         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  52:                             ((ContentControl)control).Content = ((DisplayAttribute)o).Name;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  53:                         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  54:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  55:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  56:             }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  57:         }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Let&#x2019;s add a simple DataTemplate to our ComboBox.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: &lt;ComboBox x:Name=&quot;Designation&quot; Margin=&quot;5&quot; Grid.Row=&quot;5&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:                           SelectedItem=&quot;{Binding Designation, Mode=TwoWay}&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:                           local:EnumHelper.Enum=&quot;{x:Type local:Designation}&quot;&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:                     &lt;ComboBox.ItemTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:                         &lt;DataTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:                             &lt;TextBlock local:EnumHelper.MoreDetails=&quot;true&quot;/&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:                         &lt;/DataTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:                     &lt;/ComboBox.ItemTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9: &lt;/ComboBox&gt;</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p><a href=\"http://lh4.ggpht.com/-i37DV7SCNSk/UX4NIvszNBI/AAAAAAAABQM/zofUux62Si0/s1600-h/image14.png\"><img align=\"left\" alt=\"image\" border=\"0\" height=\"239\" src=\"https://i2.wp.com/lh5.ggpht.com/-CwW_It4w_a0/UX4NJI3-kmI/AAAAAAAABQU/gtcq0s1ZKAI/image_thumb10.png\" title=\"image\" width=\"696\"></a></p>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/EnumHelper.zip\">Download EnumHelper.zip</a></p></div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\"><p></p>\n<h2>   Introduction&#xA0;</h2>\n<div><a href=\"http://www.codeproject.com/Articles/374887/Eye-Dropper-control-in-WPF\" target=\"_blank\">(View this article in Code Project)</a></div>\n<div></div>\n<div align=\"baseline\">Usually we come across different types of eye dropper controls in designers. We can move the mouse over the desktop and other applications to pick the color under the mouse.&#xA0;A normal eye dropper will pick color only within the application like the one in Adobe Illustrator or Photoshop. But the control I posted here will helps you to choose color from anywhere even outside your application like the one in Expression Blend or Visual Studio Designer.&#xA0;</div>\n<div><img height=\"259\" src=\"https://i1.wp.com/www.codeproject.com/KB/WPF/374887/Eyedropper_control.png\" width=\"400\"></div>\n<h2>   <span>Implementation</span></h2>\n<div>The base idea is to pick color from the screen&#xA0;wherever the mouse moving.&#xA0;The underlying magic behind the implementation is, need to take a snap shot of the entire desktop. For every mouse move we going to pick the appropriate pixel information from the image.</div>\n<h3>   Capturing Screenshot&#xA0;</h3>\n<div>Lets start with capturing the screen shot,&#xA0;</div>\n<div>Capturing the screenshot is pretty easy with Windows Forms. But in WPF, we need to call&#xA0;<a href=\"http://www.pinvoke.net/\" target=\"_blank\" title=\"http://www.pinvoke.net/\">pinvoke&#xA0;</a>methods&#xA0;to do that. We need few methods from User32.dll and gdi32.dll.</div>\n<div id=\"premain0\"></div>\n<pre><code>public class InteropHelper<br>    {<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern IntPtr GetDesktopWindow();<br><br>        // http://msdn.microsoft.com/en-us/library/dd144871(VS.85).aspx<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern IntPtr GetDC(IntPtr hwnd);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183370(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        [return: MarshalAs(UnmanagedType.Bool)]<br>        public static extern bool BitBlt(IntPtr hDestDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, Int32 dwRop);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183488(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        public static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183489(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;, SetLastError = true)]<br>        public static extern IntPtr CreateCompatibleDC(IntPtr hdc);<br><br>        // http://msdn.microsoft.com/en-us/library/dd162957(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;, ExactSpelling = true, PreserveSig = true, SetLastError = true)]<br>        public static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183539(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        public static extern bool DeleteObject(IntPtr hObject);<br><br>        // http://msdn.microsoft.com/en-us/library/dd162920(VS.85).aspx<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern int ReleaseDC(IntPtr hwnd, IntPtr dc);<br>}  </code></pre>\n<div></div>\n<div>Using these Interop Helpers take a screen shot of your desktop. The screen capture method will get parameters like X, Y, Width and height parameters. Since we going to take snap shot of the entire screen, get Width and Height of the screen using the static class&#xA0;<code>SystemParameters.&#xA0;</code></div>\n<div><code></code></div>\n<div id=\"premain1\"></div>\n<pre><code>public static BitmapSource CaptureRegion(IntPtr hWnd, int x, int y, int width, int height)<br>        {<br>            IntPtr sourceDC = IntPtr.Zero;<br>            IntPtr targetDC = IntPtr.Zero;<br>            IntPtr compatibleBitmapHandle = IntPtr.Zero;<br>            BitmapSource bitmap = null;<br><br>            try<br>            {<br>                // gets the main desktop and all open windows<br>                sourceDC = InteropHelper.GetDC(InteropHelper.GetDesktopWindow());<br><br>                //sourceDC = User32.GetDC(hWnd);<br>                targetDC = InteropHelper.CreateCompatibleDC(sourceDC);<br><br>                // create a bitmap compatible with our target DC<br>                compatibleBitmapHandle = InteropHelper.CreateCompatibleBitmap(sourceDC, width, height);<br><br>                // gets the bitmap into the target device context<br>                InteropHelper.SelectObject(targetDC, compatibleBitmapHandle);<br><br>                // copy from source to destination<br>                InteropHelper.BitBlt(targetDC, 0, 0, width, height, sourceDC, x, y, InteropHelper.SRCCOPY);<br><br>                // Here&apos;s the WPF glue to make it all work. It converts from an<br>                // hBitmap to a BitmapSource. Love the WPF interop functions<br>                bitmap = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(<br>                    compatibleBitmapHandle, IntPtr.Zero, Int32Rect.Empty,<br>                    BitmapSizeOptions.FromEmptyOptions());<br><br>            }<br>            catch (Exception ex)<br>            {<br><br>            }<br>            finally<br>            {<br>                DeleteObject(compatibleBitmapHandle);<br>                ReleaseDC(IntPtr.Zero, sourceDC);<br>                ReleaseDC(IntPtr.Zero, targetDC);<br>            }<br><br>            return bitmap;<br>        } </code></pre>\n<div>Method invoke:</div>\n<div id=\"premain2\"></div>\n<pre><code>InteropHelper.CaptureRegion(InteropHelper.GetDesktopWindow(),(int)SystemParameters.VirtualScreenLeft,(int)SystemParameters.VirtualScreenTop, (int)SystemParameters.PrimaryScreenWidth,(int)SystemParameters.PrimaryScreenHeight); </code></pre>\n<h3>   Global Mouse position&#xA0;</h3>\n<div>Now we are done with taking the screen shot. Lets pick the color from the appropriate pixel by matching the mouse position. So now we need the Mouse Move event for not only the entire application but also outside of the app to get the mouse position.&#xA0;To achieve a global mouse move hook, we need some native method calls as explained in this<a href=\"http://www.codeproject.com/Articles/7294/Processing-Global-Mouse-and-Keyboard-Hooks-in-C\" target=\"_blank\" title=\"http://www.codeproject.com/Articles/7294/Processing-Global-Mouse-and-Keyboard-Hooks-in-C\">article</a>.&#xA0;But this is little bit complex. So I have started a timer while clicking the eye dropper button. And each tick of the timer, I am getting the mouse position using the following code,</div>\n<div id=\"premain3\"></div>\n<pre><code>System.Drawing.Point _point = System.Windows.Forms.Control.MousePosition;<br></code></pre>\n<h3>   Copy Pixel Information&#xA0;</h3>\n<div>Now we are done with getting the mouse position. Using this position get the appropriate pixel information from the<code>BitmapSource&#xA0;</code>that we have taken.&#xA0;<code>BitmapSource.CopyPixel</code>&#xA0;will give you an array of bytes, in which the first 3 values are enough to find the color.&#xA0;</div>\n<div id=\"premain4\"></div>\n<pre><code>int stride = (screenimage.PixelWidth * screenimage.Format.BitsPerPixel + 7) / 8;<br>pixels = new byte[screenimage.PixelHeight * stride];<br>Int32Rect rect = new Int32Rect((int)point.X, (int)point.Y, 1, 1);<br>screenimage.CopyPixels(rect, pixels, stride, 0);<br>rectcolor.Fill = new SolidColorBrush(Color.FromRgb(pixels[2], pixels[1], pixels[0])); </code></pre>\n<h3>   Global Mouse cursor&#xA0;&#xA0;</h3>\n<div><em>(The following implementation has not included in the attached sample and source code for safety reasons, since it will affect the client registry values. It was considered the following code may risky in certain conditions and&#xA0;ignored in the sample.)</em><span>&#xA0;</span></div>\n<div><span><br></span></div>\n<div>Everything is fine except the mouse cursor. &#xA0;It is very obvious that we can change the cursor in WPF using<code>FrameworkElement.Cursor</code>. But the trick is, it only works within your application and not outside your application Main Window. In case if you want to change the cursor for the entire OS, we don&#x2019;t have any direct way in WPF. But most of the developers worried why we need to change the entire Windows cursor. But take an example, if we are developing an eye dropper control in WPF (used to pick color). Not like the one in Illustrator or Photoshop (cannot pick color outside the application), but the one we have in Expression Blend or Visual Studio designer (can pick color even outside the application also).</div>\n<div>In that cases, the cursor should be changed, because arrow cursor will not be a comfortable one to pick color. Normally cursor values resides in registry.</div>\n<div><strong>Registry Key</strong>&#xA0;:&#xA0;<em>HKEY_CURRENT_USER\\Control Panel\\Cursors</em></div>\n<div>Changing the values here will change the cursor, but your system needs a reboot to take effect (I can understand, none of the developers will accept this). To avoid that and make your app. taking immediate effect, you need to invoke a&#xA0;<code>pinvoke&#xA0;</code>call.&#xA0;</div>\n<div>The following method will refresh the cursor &#xA0;values,&#xA0;</div>\n<div id=\"premain5\"></div>\n<pre><code>[DllImport(&quot;user32.dll&quot;, EntryPoint = &quot;SystemParametersInfo&quot;)]<br>public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);  </code></pre>\n<div>Iterate through registry values and change the cursor path.&#xA0;</div>\n<div id=\"premain6\"></div>\n<pre><code>private void ChangeCursor()<br>        {<br>            RegistryKey pRegKey = Registry.CurrentUser;<br>            pRegKey = pRegKey.OpenSubKey(@&quot;Control Panel\\Cursors&quot;);<br>            paths.Clear();<br>            foreach (var key in pRegKey.GetValueNames())<br>            {<br>                Object _key = pRegKey.GetValue(key);<br>                //Take a backup.<br><br>                paths.Add(key, _key.ToString());<br>                Object val = Registry.GetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, null);<br>                Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, &quot;foo.cur&quot;);<br>            }<br>           <br>            SystemParametersInfo(InteropHelper.SPI_SETCURSORS, 0, null, InteropHelper.SPIF_UPDATEINIFILE | InteropHelper.SPIF_SENDCHANGE);  <br>        }<br></code></pre>\n<div>Make sure you store the registry values before change it, so that you can restore the cursor to the default values.&#xA0;</div>\n<div id=\"premain7\"></div>\n<pre><code> private void ResetCursorToDefault()<br>        {<br>            RegistryKey pRegKey = Registry.CurrentUser;<br>            pRegKey = pRegKey.OpenSubKey(@&quot;Control Panel\\Cursors&quot;);<br>            foreach (string key in paths.Keys)<br>            {<br>                string path = paths[key];<br>                Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, path);<br>            }<br>            InteropHelper.SystemParametersInfo(InteropHelper.SPI_SETCURSORS, 0, null, InteropHelper.SPIF_UPDATEINIFILE | InteropHelper.SPIF_SENDCHANGE);<br>        }  </code></pre>\n<div></div>\n<div></div>\n<div><a href=\"http://dl.dropbox.com/u/71941230/EyeDropper.zip\" target=\"_blank\"><span>Download Demo&#xA0;&#x2013; 14.9 KB</span>&#xA0;</a></div>\n<div></div>\n<div><a href=\"http://dl.dropbox.com/u/71941230/SourceCode.zip\" target=\"_blank\"><span>Download Source code&#xA0;&#x2013; 20.1 KB</span>&#xA0;</a></div>\n<p></p></div>\n\t\t\t",
    "postId": "eye-dropper-control-in-wpf"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<div></div>\n<p><!--[if !mso]&gt; v\\:* {behavior:url(#default#VML);} o\\:* {behavior:url(#default#VML);} w\\:* {behavior:url(#default#VML);} .shape {behavior:url(#default#VML);}  &lt;![endif]--><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0   false            false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  </p>\n<div><span lang=\"EN\">There are numbers of blogs that folks wrote about memory leaks in Microsoft .Net Framework managed code and unmanaged code based applications. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This blog,</span><span lang=\"EN\"></span></div>\n<ul type=\"disc\">\n<li><span lang=\"EN\">Show coding practices      that can cause memory leaks which are more unique to WPF-base apps </span><span lang=\"EN\"></span></li>\n<li><span lang=\"EN\">Share information about      memory leaks in the .NET Framework;</span><span lang=\"EN\"> </span></li>\n<li><span lang=\"EN\">Show how to avoid these      leaks </span><span lang=\"EN\"></span></li>\n<li><span lang=\"EN\">Discuss the tools and      techniques available to detect the leaks </span><span lang=\"EN\"></span></li>\n</ul>\n<div><span lang=\"EN\"></span><span lang=\"EN\"></span></div>\n<h2 align=\"center\"><strong><u><span lang=\"EN\">The Sample</span></u></strong><span lang=\"EN\"></span></h2>\n<div><span lang=\"EN\">To illustrate the issues I am showing a sample application. The application can launch different child windows; each can cause a separate memory leak. In each of the cases, closing the child window does not actually release the memory held by Window object as you would expect.</span><span lang=\"EN\"></span></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/f1ad1-1.jpg\"><img border=\"0\" height=\"299\" src=\"https://wpfplayground.files.wordpress.com/2011/10/f1ad1-1.jpg?w=320&amp;h=299\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">For clarity, I&#x2019;ve included a table of the leaks:</span></div>\n<div></div>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"1\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"395\">\n<div align=\"center\"><b><span>Leak   Description</span></b><span></span></div>\n</td>\n<td valign=\"top\" width=\"112\">\n<div align=\"center\"><strong><span>Developer Error</span></strong><span></span></div>\n</td>\n<td valign=\"top\" width=\"84\">\n<div align=\"center\"><strong><span>NETFX 3.0 </span></strong><span></span></div>\n</td>\n<td valign=\"top\" width=\"92\">\n<div align=\"center\"><strong><span>NETFX 3.5 </span></strong><span></span></div>\n</td>\n<td valign=\"top\" width=\"133\">\n<div align=\"center\"><strong><span>NETFX 3/5 sp1</span></strong><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"393\">   <span>Improper Use of Event Handlers</span><span></span></td>\n<td valign=\"top\" width=\"113\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"85\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"133\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"390\">   <span>Improper Use of Data Binding</span><span></span></td>\n<td valign=\"top\" width=\"114\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"86\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"390\">   <span>Improper Use of Command Binding</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"87\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"389\">   <span>Improper Use of Static Event   Handlers</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"88\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Use BitmapImage in ImageSource</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Multiple Use of BitmapImage</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Use of downloaded BitmapImage</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>CMilChannel leaks if initial HWND   destroyed on XP</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X   (XP only)</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X   (XP only)</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X   (XP only)</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>ShutdownListener leaked for each   thread using Binding</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Create and Destroy WriteableBitmap   on XP in HW</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X   (XP in HW Only)</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>SW Viewport 3D w/ VisualBrush, WB,   etc. leaks on XP</span><span></span></td>\n<td valign=\"top\" width=\"116\"></td>\n<td valign=\"top\" width=\"90\"></td>\n<td valign=\"top\" width=\"94\"></td>\n<td valign=\"top\" width=\"133\">\n<div align=\"center\"><span>X   (XP in HW Only)</span><span></span></div>\n</td>\n</tr>\n</tbody>\n</table>\n<div align=\"center\"></div>\n<div align=\"center\"><strong><u><span lang=\"EN\">The Leak</span></u></strong></div>\n<div align=\"center\"></div>\n<div><span lang=\"EN\">To see the leak:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>1.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">On Windows Vista, launch </span><span lang=\"EN\"><a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx\"><span>Process Explorer</span></a></span><span lang=\"EN\">.&#xA0; Open the process property dialog for your app (Right-Click/Properties) </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>2.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Launch few of the Child windows.&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>3.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Notice memory grows by ~50MB on each launch.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>4.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Close a dialog without checking the checkbox (e.g. &#x201C;Clear events on Close to avoid memory Leak&#x201D;.)</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>5.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Click of &#x201C;Force GC&#x201D; to force garbage collection.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>6.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Notice memory is not re-claimed </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>7.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Repeat (4)+(5) , but now check each of the Checkbox.&#xA0; This will free the objects being held when window closes. Notice in Process Explorer that memory is now reclaimed.</span><span lang=\"EN\"> </span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/clip_image004_2.jpg\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/4ca34-2.jpg\"><img border=\"0\" height=\"320\" src=\"https://wpfplayground.files.wordpress.com/2011/10/4ca34-2.jpg?w=269&amp;h=320\" width=\"269\"></a></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/clip_image004_2.jpg\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/clip_image004_2.jpg\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Each of the child windows causes a leak because of the reasons below.</span><span lang=\"EN\"> </span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">1. <u>Use of Event Handler</u></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_9.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/e0fdc-3.jpg\"><img border=\"0\" height=\"211\" src=\"https://wpfplayground.files.wordpress.com/2011/10/e0fdc-3.jpg?w=320&amp;h=211\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_9.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 1-Leak caused by use of Event Handler</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because the child window (Window2) has a reference (it registered to an event) to Window1 TextBox1 which remains alive causing the Window2 object and its element tree to remain alive.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">In general, if you do this:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Foo.SomeEvent += new EventHandler(Bar.SomeMethod)&#xA0; </code></pre>\n</div>\n<div><span lang=\"EN\">Then when you done using <i>Bar</i>, but you are still using <i>Foo</i> then <i>Bar</i> will still remain alive as well. Not what you might have expected.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div>\n<pre><code>Window1.w1.TextBox1.TextChanged += new TextChangedEventHandler(this.TextBox1_TextChanged);</code></pre>\n</div>\n<div><span lang=\"EN\">The Window2 object will remains &#x201C;alive&#x201D; as long as TextBox1 in Windows1 remain alive.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are couple of approaches, the easiest one is simply to un-register the Windows2 object from its various event sources when the windows is about to close.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">e.g.: </span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>Window1.w1.TextBox1.TextChanged -= new TextChangedEventHandler(TextBox1_TextChanged);</code></pre>\n</div>\n<div><span lang=\"EN\">The second approach is to create some sort of indirections (e.g. &#x201C;Weak references&#x201D;). See this </span><span lang=\"EN\"><a href=\"http://blogs.msdn.com/greg_schechter/archive/2004/05/27/143605.aspx\"><span>Greg Schechter&#x2019;s blog</span></a></span><span lang=\"EN\"> for an example.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">2. <u>Use of Data Binding</u></span></b><b><u><span lang=\"EN\"> </span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_15.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/b324a-4.jpg\"><img border=\"0\" height=\"201\" src=\"https://wpfplayground.files.wordpress.com/2011/10/b324a-4.jpg?w=320&amp;h=201\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_15.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 2 &#x2013; Leak caused by use of Data Binding </span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak documented in this </span><span lang=\"EN\"><a href=\"http://support.microsoft.com/kb/938416/en-us\"><span>kb article</span></a></span><span lang=\"EN\">. It is triggered because:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The TextBlock control has a binding to an object (myGrid) that has a reference back to the TextBlock (it is one of myGrid children&#x2019;s).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Note that this type of a DataBinding leak is unique to a specific scenario (and not to all DataBinding scenarios) as documented in the </span><span lang=\"EN\"><a href=\"http://support.microsoft.com/kb/938416/en-us\"><span>kb article</span></a></span><span lang=\"EN\">.&#xA0; The property in the Path is a not a DependencyProperty and not on a class which implements INotifyPropertyChanged and in addition a chain of strong reverences must exist.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div>\n<pre><code>myDataBinding = new Binding(&quot;Children.Count&quot;);</code></pre>\n<pre><code>myDataBinding.Source = myGrid; </code></pre>\n<pre><code>myDataBinding.Mode = BindingMode.OneWay;</code></pre>\n<pre><code>MyTextBlock.SetBinding(TextBlock.TextProperty, myDataBinding);</code></pre>\n</div>\n<div><span lang=\"EN\">Same leaky code can be also written in XAML:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0; &lt;TextBlock Name=&quot;MyTextBlock&quot; Text=&quot;{Binding ElementName=myGrid, Path=Children.Count}&quot; /&gt;</code></pre>\n</div>\n<div><strong><span lang=\"EN\">Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are few of approaches, the easiest one is simply to clear the binding when the windows is about to close. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">e.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; BindingOperations.ClearBinding(MyTextBlock, TextBlock.TextProperty);</code></pre>\n</div>\n<div><span lang=\"EN\">Other approach is to set the mode of the data binding to <b><i>OneTime</i></b>. See the </span><span lang=\"EN\"><a href=\"http://support.microsoft.com/kb/938416/en-us\"><span>kb article</span></a></span><span lang=\"EN\"> for other ideas.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">3. <u>Use of Command Binding</u></span></b><b><u><span lang=\"EN\"> </span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_17.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/97bdf-5.jpg\"><img border=\"0\" height=\"191\" src=\"https://wpfplayground.files.wordpress.com/2011/10/97bdf-5.jpg?w=320&amp;h=191\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_17.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 3 &#x2013; Leak caused by use of Command Binding</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak triggered because Window2 object adds a command binding to Window 1. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">WPF Command Binding uses strong reference which causes the Windows2 object child window not be released as long as Windows2 remain alive.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>command = new RoutedCommand(&quot;ClearBox&quot;, this.GetType());</code></pre>\n<pre><code>command.InputGestures.Add(new KeyGesture(Key.F5));</code></pre>\n<pre><code>myCmdBinding = new CommandBinding(command, F5CommandExecute);</code></pre>\n<pre><code>Window1.w1.CommandBindings.Add(myCmdBinding); //add binding to Window 1</code></pre>\n</div>\n<div><u><span lang=\"EN\">Note<b>:</b></span></u><b><span lang=\"EN\"> </span></b><span lang=\"EN\">This is likely not a common code practice, but it is provided to demonstrate the idea certain usage of Command Binding can cause leaks.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The easiest approach is simply to clear the CommandBinding when the windows is about to close.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">E.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0; Window1.w1.CommandBindings.Remove(myCmdBinding); </code></pre>\n</div>\n<div><strong><span lang=\"EN\">4.</span></strong><span lang=\"EN\"> <strong><u><span>Use of Static Event Handler</span></u></strong></span></div>\n<div></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/1e936-6.jpg\"><img border=\"0\" height=\"187\" src=\"https://wpfplayground.files.wordpress.com/2011/10/1e936-6.jpg?w=320&amp;h=187\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 4 &#x2013; Leak caused by use of Command Binding</span><span lang=\"EN\"></span></div>\n<div></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because the child window (Window2) has a reference (it registered to an event) to a Static event. Since object is static, Windows2 object will never get released. </span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div>\n<pre><code>Application.Current.Activated += new EventHandler(App_Activated);</code></pre>\n</div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Simply un-register the Windows2 object from the event sources when the windows is about to close.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">e.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0; Application.Current.Activated -= new EventHandler(App_Activated);</code></pre>\n</div>\n<div><span lang=\"EN\">The second approach is to create You can consider other approaches like (1) from before. </span><span lang=\"EN\"></span></div>\n<div><strong><u><span lang=\"EN\">5.</span></u></strong><u><span lang=\"EN\"> <strong><span>Use </span></strong><b>of BitmapImage in Image Source</b></span></u><b><span lang=\"EN\"> </span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_21.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/b64ff-7.jpg\"><img border=\"0\" height=\"192\" src=\"https://wpfplayground.files.wordpress.com/2011/10/b64ff-7.jpg?w=320&amp;h=192\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_21.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 5 &#x2013; Leak caused by use of BitmapImage as Image Source </span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because under the covers WPF keeps a strong reference between the static BitmapImage (bi1) and the Image (m_Image1).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">BitmapImage (bi1) is declared Static so it is not Garbage Collected when Window2 is closed, since under the covers WPF hooks events on the BitmapImage (for example the DownloadFailed event) it causes the m_Image1 Image to remain alive. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This in turn causes the entire Window2 tree to also remain alive in memory even after you closed it. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak can happen only when you use BitmapImage. It does not appear when you use DrawingImage for example.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This issue is fixed in the next .Net service pack (.Net 3.5 Sp1)</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">bi1 =<span>&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span lang=\"EN\">//bi1 is static</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>&#xA0; </span></span><span lang=\"EN\">new</span><span lang=\"EN\"> BitmapImage(</span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">&#x201C;Bitmap1.bmp&#x201D;</span><span lang=\"EN\">,UriKind.RelativeOrAbsolute));</span></div>\n<div><span lang=\"EN\">//bi1.Freeze() //if you do not Freeze, your app will leak memory</span><span lang=\"EN\"> </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">m_Image1 = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Image();</span></div>\n<div><span lang=\"EN\">m_Image1.Source = bi1;<span>&#xA0; </span></span></div>\n<div><span lang=\"EN\">MyStackPanel.Children.Add(m_Image1); </span></div>\n<div></div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Workaround can depends on your sceanrio. One workaround would be to Freeze the BitmapImage. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">WPF does not hook events for objects that are frozen. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This woraround is used if you click on the 2<sup>nd</sup> checkbox above. Another workaround could be to Clone the BitmapImage or not to make it Static.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">In general you should Freeze objects whenever possible to improve the performance of your application and reduces its working set. Read more </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/ms750509.aspx\"><span>here</span></a></span><span lang=\"EN\">.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">E.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>bi1.Freeze();</code></pre>\n</div>\n<div><strong><u><span lang=\"EN\">6.</span></u></strong><u><span lang=\"EN\"> <strong><span>Use </span></strong><b>of BitmapImage in Image Source (Multiple Use)</b></span></u><b><span lang=\"EN\"> </span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_23.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/125e2-8.jpg\"><img border=\"0\" height=\"192\" src=\"https://wpfplayground.files.wordpress.com/2011/10/125e2-8.jpg?w=320&amp;h=192\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_23.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 6 &#x2013; Leak caused by use of BitmapImage as Image Source (multiple use)</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is related to the leak mentioned above.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because under the covers WPF keeps a strong reference between the static BitmapImage (bi1) and the Image (m_Image1).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">When the Image gets assigned a new source (e.g. m_Image1.Source = bi2;), WPF &#x201C;forgot&#x201D; to remove the previous &#x201C;old&#x201D; events it hooked under the covers for bi1. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Again, since bi1 is static and is not Garbage Collected, it forces the Image to remain alive which causes the entire Windw2 to leak. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This issue was introduced in .Net 3.5. It does not exist in .Net 3.0. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">It is fixed in the next .Net service pack (.Net 3.5 Sp1)</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">static</span><span lang=\"EN\"> BitmapImage bi1 = </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0; </span>new</span><span lang=\"EN\"> BitmapImage(</span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">&#x201C;Bitmap1.bmp&#x201D;</span><span lang=\"EN\">, UriKind.RelativeOrAbsolute));</span></div>\n<div><span lang=\"EN\">static</span><span lang=\"EN\"> BitmapImage bi2 = </span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0; </span></span><span lang=\"EN\">new</span><span lang=\"EN\"> BitmapImage(</span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">&#x201C;Bitmap2.bmp&#x201D;</span><span lang=\"EN\">, UriKind.RelativeOrAbsolute));</span></div>\n<div><span lang=\"EN\">&#x2026;</span></div>\n<div><span lang=\"EN\">if</span><span lang=\"EN\"> (bi2.CanFreeze)<span>&#xA0;&#xA0;&#xA0; </span></span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>bi2.Freeze();</span></div>\n<div><span lang=\"EN\">//bi1.Freeze() //even though you are really using bi2 for Image Source, you also need to Freeze bi1 it to avoid leak </span><span lang=\"EN\"><span>&#xA0;</span></span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">m_Image1 = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Image();</span></div>\n<div><span lang=\"EN\">m_Image1.Source = bi1;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span lang=\"EN\">// use un-frozen bitmap, which causes the leak</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">m_Image1.Source = bi2;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span lang=\"EN\">// use frozen bitmap</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">MyStackPanel.Children.Add(m_Image1);</span></div>\n<div></div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The workaround is simply not use the code above or also Freeze the other BitmapImage e.g.: bi1.Freeze(); </span><span lang=\"EN\"></span></div>\n<div><strong><u><span lang=\"EN\">7. Use </span></u></strong><b><u><span lang=\"EN\">of downloaded BitmapImage in Image Source</span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_25.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/199ca-9.jpg\"><img border=\"0\" height=\"199\" src=\"https://wpfplayground.files.wordpress.com/2011/10/199ca-9.jpg?w=320&amp;h=199\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_25.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 7 &#x2013; Leak caused by use of downloaded BitmapImage as Image Source</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because WPF does not remove internal reference to certain objects (such as LateBoundBitmapDecoder, BitmapFrameDecode, etc) which are used during web download and causes the leak.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak only happens when you download an image from the internet. (E.g. it does not appear when you load images from your local machine)</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This issue will get fixed in the next .net service pack (.Net 3.5 Sp1)</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">To see the leak, you can launch above window, close it, and click on the &#x2018;Force GC&#x2019; button to force garbage collection. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">When you run the below commands in WinDbg, you will notice among others the following objects that remain in the heap. These are the objects that cause the leak and hold on to the Image control and the entire tree after you closed the Window2.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\">.loadby sos mscorwks</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">!DumpHeap -type System.Windows.Media.Imaging</span></div>\n<div></div>\n<div><span lang=\"EN\">53dadf18<span>&#xA0;&#xA0; </span>6<span>&#xA0;&#xA0; </span>72 System.Windows.Media.UniqueEventHelper`1</span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0; </span>[[System.Windows.Media.Imaging.DownloadProgressEventArgs, PresentationCore]]</span></div>\n<div><span lang=\"EN\">53da4374<span>&#xA0;&#xA0; </span>1<span>&#xA0; </span>108 System.Windows.Media.Imaging.PngBitmapDecoder</span></div>\n<div><span lang=\"EN\">53da09e0<span>&#xA0;&#xA0; </span>4<span>&#xA0; </span>112 System.Windows.Media.Imaging.BitmapSourceSafeMILHandle</span></div>\n<div><span lang=\"EN\">53d8d2f0<span>&#xA0;&#xA0; </span>1<span>&#xA0; </span>120 System.Windows.Media.Imaging.LateBoundBitmapDecoder</span></div>\n<div><span lang=\"EN\">53da0524<span>&#xA0;&#xA0; </span>1<span>&#xA0; </span>172 System.Windows.Media.Imaging.BitmapFrameDecode</span></div>\n<div><span lang=\"EN\">53da89c8<span>&#xA0;&#xA0; </span>3<span>&#xA0; </span>648 System.Windows.Media.Imaging.BitmapImage</span></div>\n<div></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">// You will see leak when using BitmapImage loaded from the Internet</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">BitmapImage image = </span><span lang=\"EN\">new</span><span lang=\"EN\"> BitmapImage();</span></div>\n<div><span lang=\"EN\">image.BeginInit();</span></div>\n<div><span lang=\"EN\">image.UriSource = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">@<a href=\"http://www.somesite.com/some_image.png\">http://www.somesite.com/some_image.png</a></span><span lang=\"EN\">,</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span>UriKind.RelativeOrAbsolute);</span></div>\n<div><span lang=\"EN\">image.CacheOption = BitmapCacheOption.OnLoad;</span></div>\n<div><span lang=\"EN\">image.CreateOptions = BitmapCreateOptions.None;</span></div>\n<div><span lang=\"EN\">image.EndInit();</span></div>\n<div></div>\n<div><span lang=\"EN\">m_Image1 = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Image();</span></div>\n<div><span lang=\"EN\">m_Image1.Source = image;<span>&#xA0;&#xA0; </span></span></div>\n<div><span lang=\"EN\">MyStackPanel.Children.Add(m_Image1);</span></div>\n<div></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The workaround is to consider downloading the BitmapImage first in other means to a temporary folder or to memory and then use the local BitmapImage . (See </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/system.net.webclient.downloadfile.aspx\"><b><span>WebClient.DownloadFile</span></b></a></span><span lang=\"EN\"> &amp; </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/system.net.webclient.downloaddata.aspx\"><b><span>WebClient.DownloadData</span></b></a></span><span lang=\"EN\"> APIs)</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">8. <u>CMilChannel leaks if initial HWND is destroyed on XP</u></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image001_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/bb078-9.jpg\"><img border=\"0\" height=\"199\" src=\"https://wpfplayground.files.wordpress.com/2011/10/bb078-9.jpg?w=320&amp;h=199\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image001_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Cause:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in versions of the framework up to and including .NET 3.5 SP1. This occurs because of the way WPF selects which HWND to use to send messages from the render thread to the UI thread. This sample destroys the first HWND created and starts an animation in a new Window. This causes messages sent from the render thread to pile up without being processed, effectively leaking memory.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The workaround is to create a new HwndSource first thing in your App class constructor. This MUST be created before any other HWND is created by WPF. Simply by creating this HwndSource, WPF will use this to send messages from the render thread to the UI thread. This assures all messages will be processed, and that none will leak. <br>Note: This issue is rare; only implement the workaround if you&#x2019;re actually hitting this problem.</span><span lang=\"EN\"></span></div>\n<div><b><u><span lang=\"EN\">9. ShutDownListener leaked for every thread created using Binding</span></u></b><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Cause</span></b><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in versions of the framework up to and including .NET 3.5 SP1. This occurs because an event handler in WPF&#x2019;s data binding engine is hooked but never unhooked whenever binding is used on a new thread. This sample creates a number of new Threads, and for each creates a new Window using data binding.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">None Available</span><span lang=\"EN\"></span></div>\n<div><b><u><span lang=\"EN\">10. Create and destroy WriteableBitmap on XP in hardware rendering</span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image002_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/4902c-0.jpg\"><img border=\"0\" height=\"193\" src=\"https://wpfplayground.files.wordpress.com/2011/10/4902c-0.jpg?w=320&amp;h=193\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image002_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Cause</span></b><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in version 3.5 SP1 ONLY. This occurs whenever a WriteableBitmap is created and destroyed on Windows XP using hardware rendering. This sample repeatedly creates, updates, and displays new WriteableBitmaps continuously to leak memory.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Force software rendering for the Window containing the WriteableBitmap by setting </span><span lang=\"EN\"><a href=\"http://msdn.microsoft.com/en-us/library/system.windows.interop.hwndtarget.rendermode.aspx\"><b><span>HwndTarget.RenderMode</span></b></a></span><span lang=\"EN\"> to RenderMode.SoftwareOnly. </span><span lang=\"EN\"></span></div>\n<div><b><u><span lang=\"EN\">11. Viewport3D w/ VisualBrush, WriteableBitmap, etc, leaks in Windows XP in SW</span></u></b><span lang=\"EN\"></span></div>\n<div></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/91e3b-11.jpg\"><img border=\"0\" height=\"195\" src=\"https://wpfplayground.files.wordpress.com/2011/10/91e3b-11.jpg?w=320&amp;h=195\" width=\"320\"></a></div>\n<div></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image003_2.gif\"><b><i><span><span>&#xA0;</span></span></i></b></a><span lang=\"EN\"><br></span><b><span lang=\"EN\">Cause:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in version 3.5 SP1 ONLY. This occurs when a VisualBrush, WriteableBitmap, or some select other classes are used within a Viewport3D in software rendering mode.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">If available, use HW rendering. If HW rendering is not available, and you suspect that you&#x2019;re hitting this leak, try replacing your brush with a SolidColorBrush to see if the leak goes away. If the leak persists, you have another leak in your application. If the leak goes away consider using a different brush that does not leak; no other workaround is available.</span><span lang=\"EN\"></span></div>\n<div align=\"center\"><b><u><span lang=\"EN\">Debugging the leak</span></u></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">To experiment with finding the leak I used both </span><span lang=\"EN\"><a href=\"http://www.microsoft.com/downloads/details.aspx?FamilyID=a362781c-3870-43be-8926-862b40aa0cd0&amp;displaylang=en\"><b><span>CLR Profiler for the .NET Framework 2.0 </span></b></a></span><span lang=\"EN\">and </span><span lang=\"EN\"><a href=\"http://www.microsoft.com/whdc/devtools/debugging/installx86.mspx\"><b><span>WinDbg</span></b></a></span><span lang=\"EN\"> and both seem adequate. The advantage is that both are free downloads.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Useful tips:</span></b><span lang=\"EN\"> </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I found that:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>1.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">It is much easier to detect a leak if you purposely make it very large. E.g. add 50MB to the size of the objects that you suspect to be leaking.&#xA0; In my example I am allocating ~50MB of memory in each child window (byte[]). </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>2.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">If you only have a small leak it may require many iterations before you can conclude that leak exists when using Process Explorer or Task Manger.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>3.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Forcing Garbage Collector to reclaim memory helps to differentiate between objects that leak and the ones that don&#x2019;t. This code should do it: </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>4.<span>&#xA0; </span></span></span><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span>GC.Collect();</span></div>\n<div><span lang=\"EN\"><span>5.<span>&#xA0; </span></span></span><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span>GC.WaitForPendingFinalizers();</span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>GC.Collect();</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>6.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Forcing the GC is useful when you visually inspect memory (e.g. using Process Explorer), if you use the CLR Profiler it already force GC between each heap snapshot.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Using CLR Profiler</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>1.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Launch the CLR Memory Profiler as admin on Vista </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>2.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Uncheck &#x201C;Allocations&#x201D;, &#x201C;Calls&#x201D; &amp; &#x201C;Profiling Active&#x201D; checkboxes</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>3.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Do &#x201C;Start Application&#x201D; and get the app to the point where you ready to take the &#x2018;before&#x2019; heap snapshot. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>4.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Then click &#x201C;Show Heap Now&#x201D;</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>5.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Now check the &#x201C;Profiling Active&#x201D; &amp; &#x201C;Allocations&#x201D; to enable profiling. </span></div>\n<div><span lang=\"EN\"><span>6.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Launch&#xA0; and then close the &#x2018;leaky&#x2019; window (e.g. &#x201C;Event Handler test&#x201D;)</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>7.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Take another &#x201C;Show Heap Now&#x201D;.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>8.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Right-click on the last graph and &#x201C;Show New Objects&#x201D;.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><b><span><span>&#xA0;</span></span></b></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/77223-12.jpg\"><img border=\"0\" height=\"157\" src=\"https://wpfplayground.files.wordpress.com/2011/10/77223-12.jpg?w=320&amp;h=157\" width=\"320\"></a></div>\n<div></div>\n<div></div>\n<div><span lang=\"EN\">You can see that my TextChangedEventHandler is holding on to 50MB of Byte[], as in image below:</span><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_14.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/ced1b-13.jpg\"><img border=\"0\" height=\"118\" src=\"https://wpfplayground.files.wordpress.com/2011/10/ced1b-13.jpg?w=320&amp;h=118\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_14.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Repeating the process for the &#x201C;Command Binding test&#x201D; window, shows the 50MB of CommandBinding object. See image:</span><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_12.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/ee4b5-14.jpg\"><img border=\"0\" height=\"109\" src=\"https://wpfplayground.files.wordpress.com/2011/10/ee4b5-14.jpg?w=320&amp;h=109\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_12.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Using WinDBG</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Pretty much followed the directions provided in this blog </span><span lang=\"EN\"><a href=\"http://blogs.msdn.com/ricom/archive/2004/12/10/279612.aspx\"><b><span>here</span></b></a></span><span lang=\"EN\">.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">windbg -p </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0:004&gt; .loadby sos mscorwks</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I performed:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0:005&gt; !DumpHeap &#x2013;stat</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Twice (before and after the leak) </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#x201C;!DumpHeap &#x2013;stat&#x201D; showed this before the leak happened:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#x2026;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5695e56c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 460&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 18400 System.Windows.DependencyProperty</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5696975c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 188&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 20280 System.Windows.EffectiveValueEntry[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">79135df4&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 99&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 34440 System.Reflection.CustomAttributeNamedParameter[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0056ed60&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 297&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 37656&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Free</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7913b600&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 177&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 65376 System.Collections.Hashtable+bucket[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7912b884&#xA0;&#xA0;&#xA0;&#xA0; 3307&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 152020 System.Object[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">790fc6cc&#xA0;&#xA0;&#xA0;&#xA0; 8516&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 455296 System.String</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Total 32362 objects</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">After the leak &#x201C;!DumpHeap &#x2013;stat&#x201D; showed this :</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5543b1e8&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 189&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 11340 System.Windows.Markup.BamlAttributeInfoRecord</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">53d0d3ac&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 40&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 11424 System.Windows.ClassHandlers[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">569698f4&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 384&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 11888 MS.Utility.FrugalMapBase+Entry[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">790febbc&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 627&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 12540 System.RuntimeType</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5695e7c0&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 628&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 12560 System.Windows.DependencyProperty+FromNameKey</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5696975c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 244&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 15928 System.Windows.EffectiveValueEntry[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5542d18c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 676&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 16224 System.Windows.FrameworkPropertyMetadata</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5695e56c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 484&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 19360 System.Windows.DependencyProperty</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7913b600&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 80&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 38952 System.Collections.Hashtable+bucket[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7912b884&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 785&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 73608 System.Object[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0056ed60&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 288&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 103380&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Free</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">790fc6cc&#xA0;&#xA0;&#xA0;&#xA0; 7218&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 373856 System.String</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 57&#xA0;&#xA0;&#xA0;&#xA0; 52433700 System.Byte[]</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">A &#x2018;suspicions&#x2019; allocation of 50MB of byte[] is shown</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I then performed:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0:005&gt; !dumpheap -type System.Byte[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#x2026;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">013894d4 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 60&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0138965c 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 228&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">013897c0 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 60&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01389a70 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 60&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0138f6d4 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 500&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">06dc1000</span></b><span lang=\"EN\"> 7913b858 52428816&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">total 57 objects</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Statistics:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; MT&#xA0;&#xA0;&#xA0; Count&#xA0;&#xA0;&#xA0; TotalSize Class Name</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 57&#xA0;&#xA0;&#xA0;&#xA0; 52433700 System.Byte[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Total 57 objects</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I then performed gcroot on the largest allocation and windbg reported</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">0:005&gt; !gcroot 06dc1000</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Note: Roots found on stacks may be false positives. Run &#x201C;!help gcroot&#x201D; for</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">more info.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Scan Thread 0 OSTHread 1280</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">ESP:37f2d8:Root:012f6d68(System.Windows.Threading.Dispatcher)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130c6b0(System.Windows.Input.InputManager)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130cd58(System.Windows.Input.StylusLogic)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130ce8c(System.Collections.Generic.Dictionary`2[[System.Object, mscorlib],[System.Windows.Input.PenContexts, PresentationCore]])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130ced8(System.Collections.Generic.Dictionary`2+Entry[[System.Object, mscorlib],[System.Windows.Input.PenContexts, PresentationCore]][])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0135e1e8(System.Windows.Interop.HwndSource)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">012fab4c(TestWpfApp.Window1)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01334b90(System.Windows.Controls.TextBox)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0136f664(System.Windows.EffectiveValueEntry[])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0134deb0(System.Windows.EventHandlersStore)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01383340(MS.Utility.ThreeObjectMap)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01383320(MS.Utility.FrugalObjectList`1[[System.Windows.RoutedEventHandlerInfo, PresentationCore]])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0138332c(MS.Utility.SingleItemList`1[[System.Windows.RoutedEventHandlerInfo, PresentationCore]])-&gt;</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">01383300(System.Windows.Controls.TextChangedEventHandler)-&gt;</span></b><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">0137e2d8(TestWpfApp.Window2)-&gt;</span></b><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">06dc1000(System.Byte[])</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Scan Thread 2 OSTHread 1500</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">DOMAIN(005656C8):HANDLE(WeakSh):c1794:Root:01384aec(System.EventHandler)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01384828(System.Windows.Documents.AdornerLayer)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0137e2d8(TestWpfApp.Window2)</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is pretty much the same info that the CLR memory Profiler reported.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Other tools</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are other third-party memory profilers such as </span><span lang=\"EN\"><a href=\"http://memprofiler.com/\"><b><span>SciTech&#x2019;s Memory Profiler</span></b></a></span><span lang=\"EN\"> , </span><span lang=\"EN\"><a href=\"http://www.red-gate.com/products/ants_profiler/index.htm\"><b><span>Red-Gate&#x2019;s ANTS Profiler</span></b></a></span><span lang=\"EN\"> , </span><span lang=\"EN\"><a href=\"http://www.yourkit.com/.net/profiler/index.jsp\"><b><span>YourKit Profiler</span></b></a></span><span lang=\"EN\">, </span><span lang=\"EN\"><a href=\"http://www.jetbrains.com/profiler/\"><b><span>JetBrains dotTrace 3.0</span></b></a></span><span lang=\"EN\"> and others. All provide nice and richer user interface and better support than the tools I used above.</span><span lang=\"EN\"></span></div>\n<div align=\"center\"><b><u><span lang=\"EN\">Other types of leaks</span></u></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are other types of managed memory leaks but outside the scope of this blog.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">One such typical leak is when a managed object is holding onto unmanaged resources.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This can occur when:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">a) Managed objects that hold on to the unmanaged resources and do not clean-up after themselves as they suppose to (typically in the </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/b1yfkh5e%28vs.71%29.aspx\"><b><span>IDisposable implementation</span></b></a></span><span lang=\"EN\">).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">b) Very small managed object that holds onto a large amount of unmanaged memory. The garbage collector sees only small amount of managed memory and does not realize that collection is required. This scenario is typically common with bitmaps since bitmaps have a small managed component holding on to a large size of unmanaged memory. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This scenario is improved in .Net 2.0 with the introduction of the <i><a href=\"http://msdn2.microsoft.com/en-us/library/system.gc.addmemorypressure.aspx\"><b><span>AddMemoryPressure</span></b></a></i> API which allows objects to tell the garbage collector of the unmanaged allocation size. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">WPF internally already forces garbage collection, so the recommendation to consider using the <i>AddMemoryPressure</i> API is only if you have a similar scenario in your own app.</span><span lang=\"EN\"></span></div>\n<div></div>\n</div>\n\t\t\t",
    "postId": "finding-memory-leaks-in-wpf-based-applications"
  },
  {
    "content": "<p>Have you ever worked with a system, where it often end up in an unexpected state? For example, how about displaying both play and pause button at the same time in a media player. What about both red and green lights glowing at the sme time or an orange light turns to green in a traffic light system. These unexpected states are usually the result of poor handling of state transitions. A system must have a predefined set of states. The state of a system gets transferred to another state based on a certain external action. These transition between those states and actions those causing them should be clearly defined.</p><blockquote>A finite state machine (sometimes called a finite state automaton) is a computation model that can be implemented with hardware or software and can be used to simulate sequential logic and some computer programs.</blockquote><p>Finite State Machine helps a lot in User Interface flow.&nbsp;<a href=\"https://xstate.js.org/\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">xstate</a>&nbsp;is a popular javascript library to create a state machine. It can be used along with modern libraries like React or Vue for maximum efficiency. In this article I would like to create a simple state machine implementation in Flutter.</p><p>Flutter is cross platform native mobile application development tool, powered by Dart programming language. The reason I picked Flutter to try this State Machine is - Flutter - similar to React uses declarative approach, not just to define the UI, but also the logic (state) for the UI. Flutter community recommends several approaches for state management in Flutter applications like&nbsp;<a href=\"https://pub.dev/packages/provider\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">Provider</a>&nbsp;or&nbsp;<a href=\"https://felangel.github.io/bloc/#/\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">BLoC</a>. For simplicty I am going to stick to basic stateful widget to showcase our state machine implementation.</p><p>Consider we have to build a simple stopwatch. It runs on clicking the start button and has options to pause/resume or stop the timer. Following is the simple state diagram for stopwatch state machine.</p><p><img src=\"\" alt=\"alt text\" class=\"large\" data-src=\"https://storage.googleapis.com/jawahar-tech/fsm/state_machine.png\"></p><p>The number of states and transitions are clearly defined.</p><p><strong style=\"color: rgb(0, 0, 0);\">Initial</strong>&nbsp;- This is the initial state that represents timer 0 seconds.</p><p><strong style=\"color: rgb(0, 0, 0);\">Running</strong>&nbsp;- This is the active state of timer.</p><p><strong style=\"color: rgb(0, 0, 0);\">Idle</strong>&nbsp;- The is the passive state of timer. The timer is just paused.</p><p>It is clear from the diagram, that from the&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">initial</code>&nbsp;state, the only possible next state is&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">running</code>&nbsp;and similar rules are there for other states also. These kind of constraints helps us to reduce bugs in state transition.</p><p>Dart is a static typed language, so we can create separate types to represent State and Transitions.</p><h2>State</h2><p>A state entity should define its transition nature. A state can have multiple transitions. From the diagram, the&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">running</code>&nbsp;state has two transitions - to&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">initial</code>&nbsp;and to&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">idle</code>. We consider only forward transitions, that implies our state is the source and any transition will result in a target state.</p><script src=\"https://gist.github.com/jawahars16/dab533bfc2a8fa05d86b6154bc71c2e8.js\"></script><h2>Transition</h2><p>Lets look at Transition entity. Transition has to define the target state and the action that causes it.</p><script src=\"https://gist.github.com/jawahars16/2e9851ffd9dc739d14785e4ba363cfa1.js\"></script><p>I annotate action and&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">targetState</code>&nbsp;as required explicitly, since named parameters are optional in Dart. And I need those parameters as named for better readability, when we define our state machine, which we will do it in a while.</p><h2>State Machine</h2><p>State machine represents a collection of states and each state represents a collection of transitions. It also has another attribute to store the initial state. Current state of the machine has to exposed public, since we need this information in our widget to specify UI changes based on the state.</p><script src=\"https://gist.github.com/jawahars16/733aa670cb3e75c5f0d3614a89f1d9b5.js\"></script><p>We declared our state list as a hashmap. That's an added advantage when compared to the classic model of state machine using switch case. In switch-case it has to evaluate a certain set of conditions to find the right state, whereas thats not the case with hashmap.</p><p>But this is just an object model. It also required a function to make a transition from one state to another. The function accepts an action parameter and based on that it decides the next state.</p><script src=\"https://gist.github.com/jawahars16/cdd72dd56584b702d022ddee0430abe0.js\"></script><p>The function is not doing any complex stuff. From the list of current state's transitions, it identify the right one based on the action and return its target state.</p><h2>Stopwatch State Machine</h2><p>Now the state machine implementation is ready, let's define our states for stopwatch.</p><script src=\"https://gist.github.com/jawahars16/0da22b2b4f5bba642dff01b33ea8b936.js\"></script><p>The hash of states and an initial state has been given as input to the state machine. And whenever we call the transition function, it compute the next state. Now it is just matter of define our UI based on the current state.</p><script src=\"https://gist.github.com/jawahars16/a4cfc634e843252ad5ef23099cbeb56c.js\"></script><p>The button panel has been decided based on the current state. With this implementation, we made sure hat we never end up in an unexpected state. In a classical approach, we would have introduced couple of boolean flags in our state and make decisions based on that. That code might get complex when new states and actions introduced. But adding a new state to the state machine is an easy task.</p><p>If you notice every button press calls the same&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">_onAction</code>&nbsp;function with different action parameters. This is where we actually call the transition function of state machine.</p><script src=\"https://gist.github.com/jawahars16/cf2f06b2ef7345d5e8888929ac872377.js\"></script><p>We do that in&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">setState</code>&nbsp;function, so that it automatically updates our UI widgets, whichever depends on the current state.</p><h2>Closing</h2><p>This is a very minimal and simple implementation of State Machine. The implementation can be extended to support various features like hierarchical states and history tracking. Sometimes during development, I often consider state transitions as trivial, but as the complexity grows and number of new states gets introduced, I realised that it is always good to have a dedicated system like state machine to manage the states and its transitions.</p><p>The example explained in this article is available in this&nbsp;<a href=\"https://github.com/jawahars16/finite-state-machine-flutter\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">git repository</a>.</p>"
  },
  {
    "postId": "gif-animation-in-wpf",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><span>GIF images cannot be used directly in a WPF application. There are lot of third party libraries which support GIF images in WPF. Here is one which could play animated sprite sheets in WPF. [<a href=\"http://www.codeproject.com/Tips/588253/GIF-Animation-in-WPF\" target=\"_blank\">Read more</a>]</span></div>\n\t\t\t"
  },
  {
    "content": "<div><div><style data-emotion-css=\"3v4hyr\">.css-3v4hyr a .image-container .image-caption{color:rgb(227,208,168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration:underline;text-decoration:underline;}</style><div><p>Go claims itself as an object oriented programming language. Of course it is. But developers who came from Java or C#, would realise that OOPS in Go is not same as other languages. Let&apos;s see how Golang handles Inheritance.</p><style data-emotion-css=\"x4x4qs\">.css-x4x4qs{font-size:28px !important;}</style><h2></h2><blockquote><div>Inheritance - From Wikipedia - the mechanism of basing an object or class upon another object (prototype-based inheritance) or class (class-based inheritance), retaining similar implementation. </div></blockquote><div></div><p>The definition of inheritance has been explained in various articles and repeating that is not necessary. Let&apos;s jump into Golang way of inheriting. </p><div></div><p>Go does not support inheritance directly. Go is not that fond of IS-A relationship. Go prefers composition over inheritance.</p><div></div><p>Good read -  <a href=\"https://codeburst.io/inheritance-is-evil-stop-using-it-6c4f1caf5117\" target=\"_blank\" rel=\"noopener\">Inheritance is evil. Stop using&#xA0;it.</a></p><div></div><p>Following is a typical inheritance problem. </p><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/592x700.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609611060.png\"></div></div></div><div></div><p>In Java the design is achieved through following code using inheritance.</p><div><div><pre><code>class Walkable {<br>  void Walk() {<br>    // Walk implementation<br>  }<br>}<br><br>class Flyable extends Walkable {<br>  void Fly (){<br>    // Fly implementation<br>  }<br>}<br><br>class Bird extends Flyable {<br>  void Quack() {<br>    // Quack implemntation<br>  }<br>}<br></code></pre></div></div><p>Logically, bird <strong>is a</strong> flyable creature and all flyable creatures are walkable. The Bird class now has access to all attributes and functions from base classes. The same problem can be designed via Composition as below.</p><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/650x696.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612320.png\"></div></div></div><div></div><p>And it is implemented in Go as below. (Functions can be attached to structs in Go. It is not shown below for simplicity.)</p><div><div><pre><code>type Walkable struct {<br>  // Walkable attributes<br>}<br><br>type Flyable struct {<br>  // Flyable attributes<br>}<br><br>type Bird struct {<br>  Walkable<br>  Flyable<br>  // Bird attributes<br>}<br></code></pre></div></div><p>Look at the Bird struct. It is now composed of Walkable and Flyable structures and has access to all public attributes and functions owned by Walkable and Flyable structures. So we got the same effect as we got in Java. But unlike Java, Go inheritance has few limitations. </p><div></div><p> Let&apos;s look into the benefits of inheritance and will see how Go handles it.</p><ol><li><p>Function overriding (Runtime polymorphism)</p></li><li><p>Subtyping </p></li><li><p>Code reuse</p></li></ol><blockquote><div>Function overriding is the primary purpose of inheritance. Subtyping and code reuse can be done in different ways. End of the day, Inheritance is all about extending an objects&apos;s behavior.</div></blockquote><div></div><style data-emotion-css=\"1pq57dj\">.css-1pq57dj{font-size:22px !important;}</style><h3>Function overriding </h3><div></div><p>From my perspective, I always consider polymorphism is the primary purpose of inheritance especially runtime polymorphism. (Don&apos;t worry about compile time polymorphism - method overloading. For me it is just a syntactic sugar in few languages).  </p><div></div><p>Let&apos;s consider a basic example for function overriding. Talking tom is a toy that just listens and repeats. </p><div></div><p>Following is a very basic model for it.</p><div><div><pre><code>class TalkingTom {<br>  public void Listen(){<br>    System.out.println(&quot;Tom listening...&quot;);<br>  }<br><br>  public void Repeat(){<br>    System.out.println(&quot;Tom repeating...&quot;);<br>  }<br><br>  public void Play(){<br>    Listen();<br>    Repeat();<br>  }<br>}<br></code></pre></div></div><p>The functions Listen and Repeat will print messages appropriately.  Now consider we need to create one more toy by extending TalkingTom.</p><div><div><pre><code>class TalkingAngela extends TalkingTom {<br>  public void Listen() {<br>    System.out.println(&quot;Angela listening...&quot;);<br>  }<br><br>  public void Repeat() {<br>    System.out.println(&quot;Angela repeating...&quot;);<br>  }<br>}<br></code></pre></div></div><p>New object extends the built-in one and overrides few functionalities. And now calling the Start function on both objects will yield results appropriately.</p><div><div><pre><code>TalkingTom tom = new TalkingTom();<br>tom.Play();<br>// Output :<br>// Tom listening...<br>// Tom repeating...<br><br>TalkingAngela angela = new TalkingAngela();<br>angela.Play();<br>// Output :<br>// Angela listening...<br>// Angela repeating...<br></code></pre></div></div><div></div><div><div><div data-hook=\"divider-dashed\"><svg><line x2=\"740\" y1=\"1\" y2=\"1\"/></svg></div></div></div><div></div><p>Now let&apos;s see how to achieve the same behavior in Golang. First let&apos;s create a TalkingTom structure.</p><div><div><pre><code>type TalkingTom struct {<br>}<br><br>func (tom *TalkingTom) Listen() {<br>\tfmt.Println(&quot;Tom listening...&quot;)<br>}<br><br>func (tom *TalkingTom) Repeat() {<br>\tfmt.Println(&quot;Tom repeating...&quot;)<br>}<br><br>func (tom *TalkingTom) Play() {<br>\ttom.Listen()<br>\ttom.Repeat()<br>}<br></code></pre></div></div><p>Similarly will create another structure extending the previous one and override the Listen and Repeat functions.</p><div><div><pre><code>type TalkingAngela struct {<br>\tTalkingTom<br>}<br><br>func (tom *TalkingAngela) Listen() {<br>\tfmt.Println(&quot;Angela listening...&quot;)<br>}<br><br>func (tom *TalkingAngela) Repeat() {<br>\tfmt.Println(&quot;Angela repeating...&quot;)<br>}<br></code></pre></div></div><p>But for our surprise, Go behave differently when we create objects for these two structures and invoke the Play function.</p><div><div><pre><code>var tom = &amp;TalkingTom{}<br>tom.Play()<br>// Output :<br>// Tom listening...<br>// Tom repeating...<br><br>var angela = &amp;TalkingAngela{}<br>angela.Play()<br>// Output :<br>// Tom listening...<br>// Tom repeating...<br></code></pre></div></div><div></div><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/499x499.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613581.jpg\"></div></div></div><div></div><div></div><p>So what went wrong !! Usually when we do inheritance in Java, all base class functions will be copied to derived class. Remember the Walkable, Flyable example from beginning of this article. Flyable has all Walkable functions and Bird has both walkable and Flyable functions. When Play function of TalkingAngela gets called, it literally called Listen and Repeat functions owned by TalkingAngela object and not TalkingTom object. So the override works as expected.</p><div></div><p>In case of Go, the situation is quite different. TalkingAngela has access to all functions of TalkingTom. So even though we didn&apos;t define the function Play in TalkingAngela, it is totally legal to call Play function from TalkingAngela. But the function Play is not exactly owned by TalkingAngela. It is still owned by TalkingTom even after Composition. So the Listen and Repeat functions are called on TalkingTom structure, not on TalkingAngela.</p><div></div><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/592x192.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609614896.png\"></div></div></div><div></div><p>Both of the following statements yields same results.</p><div><div><pre><code>angela.Play() // This must be just syntactic sugar, I guess :)<br>angela.TalkingTom.Play()<br></code></pre></div></div><p>So function overriding is not possible with Golang. Of course the above problem can be solved by overriding the Play function also. Then it is nothing but creating a whole new structure instead of extending from existing one.</p><div></div><h3>Subtyping</h3><h3></h3><p>This is another benefit of Inheritance in traditional OO programming. You can substitute the derived class object in place for base class object. For example if there is a function which is expecting the TalkingTom object, it should be legal to pass TalkingAngela to that function.</p><div><div><pre><code>  public static void Play(TalkingTom toy){<br>    toy.Start();<br>  }<br><br>  public static void main(String[] args) {<br>    // Both statements are legal<br>    Play(new TalkingTom());<br>    Play(new TalkingAngela());<br>  }<br></code></pre></div></div><p>But this is not the case in Golang. In Go, TalkingAngela is just composed of TalkingTom and it is not legal to substitute TalkingAngela object in place of TalkingTom.</p><div><div><pre><code>func play(toy *TalkingTom) {<br>\ttoy.Play()<br>}<br><br>func main() {<br>\tplay(&amp;TalkingTom{})<br>\tplay(&amp;TalkingAngela{})<br>}<br><br>&quot;Error: cannot use TalkingAngela literal (type *TalkingAngela) as type *TalkingTom in argument to play&quot;<br></code></pre></div></div><p>But luckily, this can be achieved through interfaces in Go.</p><div></div><h3>Code reuse</h3><h3></h3><p>Go will gain this benefit from Composition as all the functions of composed structures seamlessly embedded into the parent structure. Just by embedding TalkingTom structure into TalkingAngela, it it totally legal to access all functions from TalkingAngela without redefining them. </p><h2></h2><h2>Conclusion</h2><h2></h2><p>Go is modern, fast and concurrent, but extending an object&apos;s behavior is quite limited unlike other Object Oriented Programming languages. Also we saw that other secondary objectives like subtyping and code reuse are still possible.</p></div></div></div>",
    "postId": "golang-inheritance-vs-composition"
  },
  {
    "postId": "handling-orientation-changes-in-windows-8",
    "content": "\n\t\t\t\t<p><a href=\"http://msdn.microsoft.com/library/windows/apps/BR226143\">DisplayProperties</a> class provides various properties that are related to the physical display. For most of these properties, the class provides events to allow clients to monitor for changes in the properties.</p>\n<p>Respond to the static OrientationChanged event. Determine the orientation from the CurrentOrientation property.</p>\n<p>&#xA0;<span id=\"more-22\"></span></p>\n<pre><code>    partial class MainPage<br>    {<br>        public MainPage()<br>        {<br>            InitializeComponent();<br>            DisplayProperties.OrientationChanged += OnOrientationChanged;<br>        }<br><br>        void OnOrientationChanged(object sender)<br>        {<br>            var orientation = DisplayProperties.CurrentOrientation; // ... <br>        }<br>    }</code></pre>\n<div></div>\n\t\t\t"
  },
  {
    "postId": "how-to-process-waiting-window-messages-during-a-loop",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<div>The standard way of&#xA0;allowing Windows messages to be processed is to call <strong>Application.DoEvents</strong>  method. However, the Application class in WPF does not have a DoEvents  method. So, what you need&#xA0;is to find a way of calling this method,&#xA0;or an  alternative method! Actually, it is surprisingly easy to do so: Instead  of calling</div>\n<div></div>\n<div> </div>\n<div><span><span>Application</span>.DoEvents();</span></div>\n<div></div>\n<div>you&#xA0;can call:</div>\n<div></div>\n<div><span>System.Windows.Forms.<span>Application</span>.DoEvents();</span></div>\n<div></div>\n<div>This will work as desired!</div>\n</div>\n\t\t\t"
  },
  {
    "postId": "invokecommandaction-with-eventargs-as-command-parameter",
    "content": "\n\t\t\t\t<p>Expression Blend team provides the ability to wire up some events to viewmodel through commands like SelectionChanged of a ListBox, etc using <strong>System.Windows.Interactivity.dll</strong>. You can bind a Command to any event with WPF controls. There is also a way to bind command parameter also, so that view state can passed to the viewmodel.</p>\n<p><span id=\"more-5\"></span></p>\n<pre><code>&lt;ListBox x:Name=&quot;list&quot;&gt;<br> &lt;i:Interaction.Triggers&gt;<br> &lt;i:EventTrigger EventName=&quot;SelectionChanged&quot;&gt;<br> &lt;i:InvokeCommandAction Command=&quot;{Binding SelectionChangedCommand}&quot;<br> CommandParameter=&quot;{Binding ElementName=list, Path=SelectedItem}&quot;/&gt;<br> &lt;/i:EventTrigger&gt;<br> &lt;/i:Interaction.Triggers&gt;<br> &lt;str:String&gt;Test Item 1&lt;/str:String&gt;<br> &lt;str:String&gt;Test Item 2&lt;/str:String&gt;<br> &lt;str:String&gt;Test Item 3&lt;/str:String&gt;<br> &lt;/ListBox&gt;<br><br><br></code></pre>\n<p><strong>Custom Command Action</strong></p>\n<p>But there are some scenarios where you need to pass the exact event args of the event to the ViewModel. For example, the Drop event, where user can drop a file from system&#x2019;s windows explorer to the application. The InvokeCommandAction provided by default does not have this option. If you leave the CommandParameter property as empty, then you will get a null value in viewmodel. You could see they ignore the event args completely, by reflecting the code.</p>\n<p>But still there is a way to achieve this. We can create our custom CommandAction inheriting from TriggerAction. I have provided the source code. This will pass the event args as the parameter if CommandParameter not specified and still works if it is specified like legacy one.</p>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/Sample.zip\" target=\"_blank\">Download Source here</a></p>\n<p>Happy Commanding. &#x1F642;</p>\n\t\t\t"
  },
  {
    "postId": "javascript-asynchronous-programming",
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>Asynchronous programming becomes unavoidable in todays programming. In this article, I would like to talk about, how Javascript evolved to handle asynchronous programming using callbacks. What is a callback? </p><div></div><style data-emotion-css=\"1pq57dj\"> .css-1pq57dj{font-size: 22px !important;}</style> <em>Consider a scenario of a candidate who attends an interview in a reputed organisation. Once the interview is over the HR told that they will process the feedback and get back to him. Now the candidate would go back to his current job and continue his routine life until he get a callback from the new organisation. He would not wait at the gates of that company until he get a response. Once he get the callback he would act upon it. The callback could be positive or negative and the candidate will take action accordingly.</em> <div></div><p>In computer programming, a function need not to wait for the other function to return immediately. The other function could be a long running process or the response time of the function might not be predictable. So waiting for the function to return is not efficient. Instead it can go back to other part of program and continue the execution. But it should give a handler to the long running function, so that it can connect to the caller once it is done with the long running process. Similar to the candidate who gave the contact information to the interviewer so that they can give a callback.</p><div></div><p>Consider a scenario where you want to get the list of user reviews.</p><div> <div> <pre><code class=\"javascript\">getUserReviews(function (reviews) {<br>  // Process the reviews<br>});<br></code></pre> </div></div><p>Say <em>getUserReviews</em> is a function that will hit an endpoint and invoke the success callback once it got the response. This is the common way to achieve asynchronous programming in Javascript. Though callbacks are popular even in modern Javascript, it has a major drawback in complex scenarios. Things cannot be simple as above always.</p><div></div><p>In the above example we cannot just get user reviews. In a typical e-commerce website, we see user reviews for products. So in this case, we need to get the list of products first before fetching user reviews. So code goes like this.</p><div> <div> <pre><code class=\"javascript\">getProducts(function (products) {<br>  getUserReviews(products, function (reviews) {<br>    // Process the reviews<br>  });<br>})<br></code></pre> </div></div><p>From the list of products received, we fetch user reviews. We are not yet done. To fetch the list of products we need the user to be signed in. So we may have to pass the authentication token to every request. Things started to getting a little complex now.</p><div> <div> <pre><code class=\"javascript\">authenticate(user, password, function (token) {<br>  getProducts(token, function (products) {<br>    getUserReviews(token, products, function (reviews) {<br>      // Process the reviews<br>    });<br>  })<br>})<br></code></pre> </div></div><p>Look at the number of indentation levels. Things could go worse in complex situations. When you have lots of callback functions in your code! it gets harder to work with them, the more of them you have in your code and it gets particularly bad when you need to do loops, try-catch blocks and things like that. This term is often referred to as Callback Hell.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/400x400.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610597.jpg\"></div></div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2><strong>Promises - the Rescuer</strong></h2> <div></div><p>One of the approach to avoid callback hell is to use Promises. After the introduction of Promise pattern, it is easier to achieve asynchronous programming with simple and readable code. What is promise in Javascript?</p><div></div><blockquote>Bob once promised to get a Playstation 4 as a birthday gift to his son Bruce. Bruce was so excited. But Bruce didn&apos;t get the PS4 yet, but he just got the promise from his father. Now with all the excitement he get back to his routine life. On Bruce&apos;s birthday Bob may fulfil his promise or he may not. If he fails to fulfil the promise he has to give a reason to Bruce on that.</blockquote> <div></div><p>In Javascript programming, Promise is an object that may produce a single value in future. The single value could be the expected value or a reason why it cannot produce the expected value.</p><div></div><p>Our above example of getting the user reviews can be rewritten as below. Assuming all those functions will return a Promise object instead of accepting callback function as argument.</p><div> <div> <pre><code class=\"javascript\">authenticate(user, password)<br>  .then(token => getProducts)<br>  .then((token, products) => getUserReviews)<br>  .then((token, reviews) => {<br>    // Process the reviews<br>  })<br></code></pre> </div></div><p>The code becomes very simple and readable. The catch function let us handle any error. Another good thing about promise is that the response handlers can be chained. A call to promise.then returns a promise, so that we can call the next .then on it. When a handler returns a value, it becomes the result of that promise, so the next .then is called with it.</p><div></div><p>But if you notice, then and catch functions still use callbacks as argument. That is not a problem. The code is still readable. But ES6 added syntactic sugar for promises that makes the code more readable and simple.</p><div></div><h2><strong>Async / Await</strong></h2> <div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/500x453.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612278.jpg\"></div></div></div><div></div><p>Async/Await is a special syntax introduced in ES6 to make Promise code more readable and simple. To use <em>await</em> keyword inside a function, the function has to be marked as <em>async</em>. </p><div></div><p>When Javascript engine encounter a function call with await statement, it will queue the execution of that function and get back to the caller function. This means that the statements below the awaited function will not be executed until the awaited function resolved to a value.</p><div> <div> <pre><code class=\"javascript\">function callerFunction(){<br>  asyncFunction();<br>  // Below functions will be called right after function1<br>  function2();<br>  function3();<br>}<br><br>async function asyncFunction() {<br>  await function1();<br>  // Below functions cannot be called until function1 resolved/rejected.<br>  function4(); <br>  function5();<br>}<br></code></pre> </div></div><div></div><p>Not all the functions can be marked as await. As I already said async/await is just a syntactic sugar for promises. So it is still the promises which is doing all the magic. To mark a function as await, the function should return a promise object. If a function returning promise is not awaited, it will directly a promise object. That can be either awaited or handled via then and catch functions.</p><div></div><p>Following two pieces of code does exactly the same thing.</p><div> <div> <pre><code class=\"javascript\">try {<br>  var users = await getUsers();<br>  console.log(`${users.length} users found`);<br>} catch (error) {<br>  console.log(error);<br>}<br></code></pre> </div></div><div></div><div> <div> <pre><code class=\"js\">var promiseObject = getUsers();<br>promiseObject<br>  .then(users => console.log(`${users.length} users found`))<br>  .catch(error => console.log);<br></code></pre> </div></div><p>So async functions are the ultimate solution to write more readable asynchronous code. To understand more about async / await, I would recommend you to read more about Javascript Promises. Thanks for reading !!! </p></div></div></div>"
  },
  {
    "postId": "javascript-compiled-or-interpreted",
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>I started my career with .NET. I was a WPF developer and use Visual Studio as the primary IDE. Though I am a desktop application developer, I was aware of JavaScript programming. But I thought Javascript is a toy language and its primary purpose is to manipulate web pages.</p><div></div><p>But the evolution of Javascript is tremendous. When I started learning JavaScript throughout the learning i used to compare Javascript with c#. </p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2><strong>Browser as runtime</strong></h2> <div></div><blockquote> <div>Browser is for JavaScript as CLR is for .NET.</div></blockquote> <div></div><p>The runtime of .NET is CLR (Common Language Runtime) whereas the runtime of Javascript is browser. CLR cannot interpret C# as it is. CLR needs C# to be compiled down to intermediate language (IL) to interpret. But browsers can interpret Javascript as it is.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1658x738.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610907.png\" class=\"large\"></div></div></div><div></div><p>So it&apos;s obvious that Javascript is an interpreted language. But unlike other scripting languages JavaScript possess some characteristics of a compiled language.</p><div></div><h2><strong>Compile time errors</strong></h2> <div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/919x269.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612358.png\"></div></div></div><div></div><style data-emotion-css=\"1pq57dj\"> .css-1pq57dj{font-size: 22px !important;}</style> <p>Unlike other interpreted languages Javascript produces errors upfront. Usually interpreted languages will be executed line by line. So if there is an error at line 100, all 99 lines will be executed before it gets aware of the issue in 100th line.</p><div></div><h3>For an example consider the below shell script. </h3> <div> <div> <pre><code>#!/bin/bash<br># GNU bash, version 4.3.46<br><br>a=\"Hello\"<br>b=\"World\"<br>echo $a $b<br>int a = 2 + 2<br></code></pre> </div></div><p>The output of the above script will produce &quot;Hello World&quot; along with an error saying &quot;int: Command not found&quot;. So it is able to execute valid statements ignoring the invalid statement. As an interpreted language, Javascript also expected to work in the same way, but it wont.</p><div></div><p>Consider the below Javascript code.</p><div> <div> <pre><code>a=\"Hello\"<br>b=\"World\"<br>console.log(a + b)<br>int a = 2 + 2;<br></code></pre> </div></div><p>The above code will not produce any output except saying &quot;Syntax error. Unexpected token&quot; at line 4. The reason for this behavior is that Javascript undergo one other process before it gets executed - Parsing. The code will be transformed into abstract syntax tree. Abstract syntax trees are data structures widely used in compilers, due to their property of representing the structure of program code. An AST is usually the result of the syntax analysis phase of a compiler. Even thought Javascript is not compiled, it goes through one of the crucial step in a typical compilation process.</p><div></div><p>So it is not the right term to call these errors as compiler errors. Instead these are parser errors. And this behavior applicable only to syntax errors. So the process parsing can only catch syntax errors upfront. Other errors like type errors cannot be caught before and it will be thrown when that line is interpreted.</p><div></div><p>Kyle Simpson explains the behavior in below tweet.</p><div> <div> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Looks like javascript is interpreted line by line. Any thoughts ? <a href=\"https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw\">#javascript</a> <a href=\"https://twitter.com/getify?ref_src=twsrc%5Etfw\">@getify</a> <a href=\"https://twitter.com/YDKJS?ref_src=twsrc%5Etfw\">@YDKJS</a> <a href=\"https://twitter.com/FrontendMasters?ref_src=twsrc%5Etfw\">@FrontendMasters</a> <a href=\"https://t.co/yF8YBrW8KU\">pic.twitter.com/yF8YBrW8KU</a></p>&mdash; Jawahar (@jawahars_16) <a href=\"https://twitter.com/jawahars_16/status/1030298998463062016?ref_src=twsrc%5Etfw\">August 17, 2018</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </div></div><h2><strong>Functions can be invoked before declaring</strong></h2> <div></div><p>In a typical interpreted language, it is not possible to invoke a method before declaring it. Order of declaring and invoking a method does matter in interpreted languages. The below code will fail for the same reason. At the time of executing line number 4, it has no idea of the method &quot;say_hello&quot; and will fail.</p><div> <div> <pre><code>#!/bin/bash<br># GNU bash, version 4.3.46<br><br>say_hello<br><br>say_hello()<br>{<br>    echo \"Hello World\"<br>}<br></code></pre> </div></div><p>But for surprise, Javascript never worried about the order of declaring and invoking a function. The below code will work without any issue.</p><div> <div> <pre><code>sayHello()<br><br>function sayHello () {<br>  console.log('Hello World!')<br>}<br></code></pre> </div></div><p>The reason for this behavior is Javascript go though a different process called <u>hoisting</u> before it gets executed. Hoisting is the default behavior of moving all the declarations at the top of the scope (to the top of the current script or the current function). In other words, a variable can be used before it has been declared. But keep in mind that hoisting can only move declarations to the top and not the assignments.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/742x308.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613706.png\"></div></div></div><div></div><div></div><h2><strong>Babel - a Javascript compiler</strong></h2> <blockquote> <div>If Javascript is not compiled, then why there are so many Javascript compilers around? </div></blockquote> <p>As any other programming languages, Javascript also has different versions. ECMA is the term used to specify a particular version of Javascript. In reality ECMA is specification and Javascript is one of the implementation of it. As we already discussed, browser is the runtime for Javascript. </p><div></div><p>When Javascript gets evolved with advanced features and new syntax, browsers should also evolve to support the new syntax. But not all the browsers support the latest version of Javascript. The level of compatibility is also not same across browsers. For example some browsers support 90% and some support 10%.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1340x567.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609614812.png\" class=\"large\"></div></div></div><div></div><p>Javascript compilers now comes into picture. It transforms the non-compatible latest Javascript code into compatible code (mostly ES5) that can be recognised by all browsers. Ideally this process cannot be called compiling, since the input and output format has the same level of abstraction. So the actual term is <u>Transpiler</u>.</p><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1792x844.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609616177.png\" class=\"large\"></div></div></div><div></div><h2><strong>Conclusion</strong></h2> <div></div><p>We can conclude saying that Javascript is an interpreted language. But Javascript is already advancing very fast and some of the modern browsers actually compile Javascript for better performance. V8 engine is one of that. The V8 Engine which is built by Google is open source and written in C++. This engine is used inside Google Chrome. Unlike the rest of the engines, however, V8 is also used for the popular Node.js runtime.</p><div></div><p>V8 was first designed to increase the performance of JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines do such as SpiderMonkey or Rhino (Mozilla). The main difference here is that V8 doesn&#x2019;t produce byte code or any intermediate code.</p></div></div></div>"
  },
  {
    "postId": "mvvm-adapter-for-syncfusion-wpf-docking-manager",
    "content": "\n\t\t\t\t<p>This article explains how to adapt the Syncfusion docking manager to an MVVM application. Since our WPF Docking Manager is not an <i>item control</i>, it is not possible to have a traditional <i>item-source</i> binding to a collection of objects in the view model. This can, however, be achieved by creating a wrapper or adapter for the docking manager.  </p>\n<p>I have used a simple text-reader application to demonstrate this approach. <a href=\"http://www.syncfusion.com/blogs/post/MVVM-Adapter-for-WPF-Docking-Manager.aspx\">(Read more)</a></p>\n\t\t\t"
  },
  {
    "postId": "navigation-model-for-simple-mvvm-applications",
    "content": "\n\t\t\t\t<p>Not all the WPF applications are huge. A very few are still used as utilities, installers and simple tools to achieve a specific task. Navigation is very trivial in applications. PRISM supports a very nice navigation framework.&#xA0;To develop such simple WPF applications, developers really hesitate to use big frameworks like PRISM, Caliburn Micro, etc.</p>\n<p>So I thought of develop a simple helpers which achieve navigation in small MVVM applications without need of any enterprise frameworks. Let us develop a simple application looks like below, using this simple navigation model.</p>\n<p><span id=\"more-273\"></span></p>\n<p>Download the sample and you will find a Navigation library with simple helper classes.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png\"><img data-attachment-id=\"276\" data-permalink=\"https://wpfplayground.wordpress.com/2014/06/04/navigation-model-for-simple-mvvm-applications/navigation/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png\" data-orig-size=\"525,350\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"navigation\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=525\" src=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=736\" alt=\"navigation\" srcset=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png 525w, https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=300 300w\" sizes=\"(max-width: 525px) 100vw, 525px\"></a></p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>Declare regions in the shell, where the views needs to be injected at run time.&#xA0;Following is the way to declare a region in XAML.</p>\n<pre><code>&lt;ContentControl<br>nav:NavigationRegion.RegionName=&quot;{x:Static constants:RegionNames.MainRegion}&quot; /&gt;<br></code></pre>\n<p>This ContentControl will act as a region and views will be injected as content. NavigationService is a static class which contains the following methods.</p>\n<ul>\n<li>NavigateTo (Method which helps to inject a view into specific region)</li>\n<li>GoBack (Method helps to navigate back to previous view)</li>\n<li>CanGoBack (Method decides whether the region has the ability to go back)</li>\n<li>ClearViews (Method used to clear all views from the region)</li>\n</ul>\n<p>NavigateTo method accepts two parameters, the region name and the view object. The NavigationService will keep a record of registered regions. Also it keep track of views history in a stack.</p>\n<p>Here is how navigate and go back will work,</p>\n<pre><code>    public class ShellViewModel<br>    {<br>        public ShellViewModel()<br>        {<br>            NavigationService.NavigateTo(RegionNames.HeaderRegion, new HeaderView(new HeaderViewModel()));<br>            NavigationService.NavigateTo(RegionNames.NavigationRegion, new NavigationView(new NavigationViewModel()));<br>            NavigationService.NavigateTo(RegionNames.MainRegion, new FirstView());<br>        }<br>    }<br></code></pre>\n<p>The back button in the header region will be disabled, if there is no possibility for back navigation.</p>\n<pre><code>        public DelegateCommand&lt;object&gt; BackCommand<br>        {<br>            get<br>            {<br>                return new DelegateCommand&lt;object&gt;(this.OnGoBack, this.CanGoBack);<br>            }<br>        }<br><br>        private void OnGoBack(object obj)<br>        {<br>            NavigationService.GoBack(RegionNames.MainRegion);<br>        }<br><br>        private bool CanGoBack(object arg)<br>        {<br>            return NavigationService.CanGoBack(RegionNames.MainRegion);<br>        }<br></code></pre>\n<p><a title=\"Download Sample\" href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/NavigationDemo.zip\">Download Sample</a></p>\n<p>Happy Coding!!!</p>\n<p>&#xA0;</p>\n\t\t\t"
  },
  {
    "content": "<p>In programming memory can be categorised into two - Static and dynamic memory.</p><p>When memory size of the variables are known at compile time, we call that as static memory. For example primitive data types like int, floats and arrays are fixed size. Fixed size values usually sits in Stack. When a function start executing, all local variables get allocated in Stack. Once the function completes execution, local variables goes out of scope and will be removed from Stack.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/static_memory.png\"></p><p>Dynamic memory is exact opposite. If you think that the memory size of the variables might change at runtime, that is dynamic memory. Array List is a good example for Dynamic memory. It gets resized during runtime. Since the memory size is not known at compile time, this cannot be stored in Stack. Dynamic memory gets stored in a special section called heap. Pointers are fixed size. So in below example, pointers gets stored in stack and corresponding data gets stored in heap memory.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/dynamic_memory.png\"></p><p><br></p><p>Once the function done executing, the local variables goes out of scope and pointers will be removed from the stack. But what about heap memory? Languages like Java, C# has garbage collectors, that will take care of removing unused memory from heap. Memory management is manual for languages like C, C++.</p><h1>Dangling Pointers</h1><p>Dangling pointers is a situation where you have valid pointers in the stack, but it is pointing to invalid memory. You might end up in this situation, when you deallocate the heap memory before the pointers in stack deallocated.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/dangling_pointer.png\"></p><p>This is a security issue. Because when you deallocate a memory, we are informing Operating System, that we no longer need this section of memory. So OS will mark that piece of memory as <em>ready to allocate </em>and allocate to other applications, when they request for memory. If that happen, we end up having pointers to memory location that we don\u2019t own. What if we try to deallocate that memory?</p><p>This is a common issue in languages with manual memory management. In a recent article, it says that 70% of security patches released by Microsoft contains memory safety related fixes.</p><p>Let\u2019s go through a simple example in C++, to create a dangling pointer situation. Usually in C++, memory allocated and deallocated through a general pattern. Constructor in a class gets invoked when a class initialised and this is the right place to allocate memory in heap.Destructor will be invoked when the class instance goes out of scope, and this is the right place to deallocate memory from heap. Assume we already created a class that does allocation and deallocation of memory in constructor and destructor respectively.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">int</span> main() {\n  SomeClass pointer1 = SomeClass();\n  SomeClass pointer2 = pointer1;\n}\n</pre><p>In above example code, there are two variables declared but both holding the same value. When constructor invoked, it allocates a heap memory. Then we are declaring one more variable and assigning the same value. In C++ usually, when you assign a value of complex type, it does a shallow copy (unless you explicitly implemented copy constructor) instead of deep copy. That means only only pointer gets copied in Stack, but not the heap memory. Actually it is not recommended to copy heap memory for performance reasons. Now the final memory layout looks like that we have two pointers pointing to the same heap memory.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/cpp.png\"></p><p>Now when the function done with execution, local variables goes out of scope and it invokes destructor. First pointer2 invokes destructor that deallocates the heap memory. At this point, pointer1 becomes dangling pointer. It points to a memory that is already deallocated.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/dangling_pointer_cpp.png\"></p><p>From our example, we understood that the primary cause of dangling pointer is having multiple owners for the same resource. Because when one pointer deallocates memory other pointers became dangling pointers.</p><h1>Ownership</h1><p>Rust solves this problem by enforcing single owner concept during compile time. Rust follows certain rules for Ownership.</p><h3><strong>Rule #1</strong></h3><blockquote>Every value in Rust has an owner.</blockquote><p>Generally the variable is called as owner for that value.<img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/owner.png\"></p><h3><strong>Rule #2</strong></h3><blockquote>Value&nbsp;dropped,&nbsp;when owner goes out of scope.</blockquote><p>When owner goes out of the scope, heap memory will be deallocated out of the box.</p><h3><strong>Rule #3</strong></h3><blockquote>Only one owner per value.</blockquote><p>Multiple owners for a value is simply not allowed in Rust. Consider we declared one more variable and assign the same value as we did in C++ example.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/invalid_variable.png\"></p><p>Rust will make vector2 variable as new owner and vector1 as invalid. Rust will behave like as if the variable vector1 is not even declared. Rust gives compilation error for above example.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/error1.png\"></p><p>This not only happens when you reassign variables. The ownership also gets transferred when a variable passed to a different function. The below code also fail in Rust.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/error2.png\"></p><p>This ensures single owner for a value and prevents memory unsafe issues. But this looks like complicated and does not allow us to do typical programming. Because in a typical programming, we declare variables, we pass it to other variables and functions and that is how other parts of our program will get access to the variables\u2019s value. But looks like that Rust is not allowing us to do that.</p><h1>Borrowing</h1><p>In reality, most of the times we don\u2019t want to transfer ownership. Instead we just want to pass the value of a variable. To do that, Rust has another concept called Borrowing. Borrowing is a process of passing the variables to other parts of program without transferring the ownership. Just by adding an ampersand(&amp;) before the variable, we say that we don\u2019t want the ownership, but only a reference to that variable.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/reference.png\"></p><p>Again, Rust follows certain rules to achieve borrowing.</p><h3><strong>Rule #1</strong></h3><blockquote>All references are&nbsp;immutable&nbsp;by default.</blockquote><p>In Rust everything is immutable by default. Even if you declare a simple integer variable, it is immutable. To write that variable, it has to be explicitly marked as mutable. Same thing applicable for references. To make a mutable reference both the reference and owner must be mutable. Otherwise Rust gives a compilation error.</p><h3><strong>Rule #2</strong></h3><blockquote>Not more than&nbsp;one mutable reference&nbsp;allowed in a scope.</blockquote><p>You cannot have two references pointing to same value and both are updating the value at same time.</p><h3><strong>Rule #3</strong></h3><blockquote>Mutable and immutable reference&nbsp;cannot go hand in hand&nbsp;within a a scope.</blockquote><p>Rule number 2 and 3 are enforced to prevent race conditions. Consider you have multiple references to the same memory, and all are accessing the memory at same time from different threads, and one reference is writing to the memory. You cannot make sure that all references will have synchronised value, unless you have some other synchronisation mechanism to handle that.</p><h1>Conclusion</h1><p>So Rust avoids dangling pointers, data races and other memory unsafe issues during the compile time itself. That is the reason that Rust is able to provide the same performance that C++ offers. Rust has Zero Runtime Overhead. Rust is a major advancement in Systems Programming in terms of Memory Safety. But it still has a steep learning curve. When you code in Rust, most of the times, we think the code is valid, but Rust compiler will fail it. It needs more practice to get it right.</p><p>Hope this gives a good insight on Rust memory safety.</p>"
  },
  {
    "postId": "notification-control-in-silverlight",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<h2>Introduction</h2>\n<div><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight\" target=\"_blank\">(View this article in Code Project)</a></div>\n<div></div>\n<p>We used to see a Notification tool tip in Windows 7/Vista to inform something  about particular context. For example, Capslock warning will be given through a  balloon tip on Passwordbox, if capslock has ON. Or sometimes low battery  information will be displayed on the Taskbar.<br><img alt=\"Password.png\" height=\"262\" src=\"https://i2.wp.com/www.codeproject.com/KB/silverlight/320232/Password.png\" width=\"632\"><br>The unique feature of this control will be that it can be placed on any  Framework Element in Silverlight.  </p>\n<h2>Background </h2>\n<ul>\n<li>Basic understanding of <a href=\"http://www.codeproject.com/Articles/24131/Developing-a-Custom-Control-for-Silverlight-2-0\">Silverlight control development</a> is needed to  understand the code base.  </li>\n<li>UI Design &#x2013; <a href=\"http://expression.microsoft.com/en-us/cc184874\">Microsoft Expression Blend</a> </li>\n</ul>\n<h2>Using the code  </h2>\n<p>The base class for Notification control is Content  Control. The content can be of anything like a string, image, etc. The control  will be displayed on any <code>FrameworkElement</code> in Silverlight. A popup is used to  host the actual control and the popup will be placed on particular element based  on its position. <br>The generic template XAML goes like this,</p>\n<pre><code>&lt;Style&#xA0;TargetType=&quot;local:Balloon&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Setter&#xA0;Property=&quot;FontSize&quot;&#xA0;Value=&quot;13&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Setter&#xA0;Property=&quot;Template&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Setter.Value&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ControlTemplate&#xA0;TargetType=&quot;local:Balloon&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.Effect&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;DropShadowEffect&#xA0;ShadowDepth=&quot;2&quot;&#xA0;Direction=&quot;315&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.Effect&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;*&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Border&#xA0;Grid.Row=&quot;1&quot;&#xA0;BorderBrush=&quot;Gray&quot;&#xA0;BorderThickness=&quot;1&quot;&#xA0;CornerRadius=&quot;5&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Margin=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=MainMargin}&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Border.Background&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;LinearGradientBrush&#xA0;EndPoint=&quot;0.5,1&quot;&#xA0;StartPoint=&quot;0.5,0&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GradientStop&#xA0;Color=&quot;#FFE7E8F1&quot;&#xA0;Offset=&quot;1&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GradientStop&#xA0;Color=&quot;White&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GradientStop&#xA0;Color=&quot;#FFF3F4F6&quot;&#xA0;Offset=&quot;0.472&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/LinearGradientBrush&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Border.Background&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.ColumnDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ColumnDefinition&#xA0;Width=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ColumnDefinition&#xA0;Width=&quot;*&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.ColumnDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;*&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;{TemplateBinding&#xA0;Icon}&quot;&#xA0;Margin=&quot;5&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;TextBlock&#xA0;Margin=&quot;5&quot;&#xA0;Grid.Column=&quot;1&quot;&#xA0;Foreground=&quot;#FF28489F&quot;&#xA0;Text=&quot;{TemplateBinding&#xA0;Header}&quot;&#xA0;FontSize=&quot;16&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalAlignment=&quot;Center&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ContentPresenter&#xA0;Margin=&quot;5&quot;&#xA0;Grid.Column=&quot;1&quot;&#xA0;Grid.Row=&quot;1&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Border&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Path&#xA0;Data=&quot;M306.375,133.125L306.375,100.875L335.75,133.25&quot;&#xA0;Stroke=&quot;Gray&quot;&#xA0;Height=&quot;20&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Fill=&quot;White&quot;&#xA0;Margin=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Margin}&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;StrokeThickness=&quot;1&quot;&#xA0;Stretch=&quot;Uniform&quot;&#xA0;Visibility=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=bottom}&quot;&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HorizontalAlignment=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Alignment}&quot;/&gt;<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Path&#xA0;Data=&quot;M306.375,133.125L306.375,100.875L335.75,133.25&quot;&#xA0;Stroke=&quot;Gray&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Height=&quot;20&quot;&#xA0;Fill=&quot;#FFE7E8F1&quot;&#xA0;Margin=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Margin}&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;StrokeThickness=&quot;1&quot;&#xA0;Stretch=&quot;Uniform&quot;&#xA0;Grid.Row=&quot;2&quot;&#xA0;Visibility=&quot;{Binding&#xA0;Alignment,&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=top}&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;RenderTransformOrigin=&quot;0.5,&#xA0;0.5&quot;&#xA0;HorizontalAlignment=&quot;{Binding&#xA0;Alignment,&#xA0;</code></pre>\n<pre><code>                              Converter={StaticResource&#xA0;Converter},<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Alignment}&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Path.RenderTransform&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ScaleTransform&#xA0;ScaleY=&quot;-1&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Path.RenderTransform&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Path&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/ControlTemplate&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Setter.Value&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Setter&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Style&gt;</code></pre>\n<p><b>Balloon Alignment&#xA0;</b></p>\n<p>To position the Popup on particular location in the control, the co-ordinates  related to Browser needs to be find out. This can be done using <code>GeneralTransform</code>. The Alignment property in the control helps change the place where  popup needs to be hosted. <br>It can be of one among the following,</p>\n<div id=\"premain1\"><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight#\"></a></div>\n<pre><code>&#xA0;  public&#xA0;enum&#xA0;BalloonAlignment<br>&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;TopLeft,<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;TopRight,<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BottomLeft,<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BottomRight<br>&#xA0;&#xA0;&#xA0;&#xA0;} </code></pre>\n<h2>Ballon Tooltip Service </h2>\n<div lang=\"cs\">An attached property of type <code>DependencyObject </code>should be added to a static class, which can be used to set balloon on any <code>DependecyObject</code>. The object can be textBox, Checkbox, Combobox, etc.</div>\n<div id=\"premain2\"><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight#\"></a></div>\n<pre><code>public&#xA0;static&#xA0;class&#xA0;BalloonTooltipService<br>&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;Balloon&#xA0;GetBalloonTooltip(DependencyObject&#xA0;obj)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;(Balloon)obj.GetValue(BalloonTooltipProperty);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;void&#xA0;SetBalloonTooltip(DependencyObject&#xA0;obj,&#xA0;Balloon&#xA0;value)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj.SetValue(BalloonTooltipProperty,&#xA0;value);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Using&#xA0;a&#xA0;DependencyProperty&#xA0;as&#xA0;the&#xA0;backing&#xA0;store&#xA0;for&#xA0;BalloonTooltip.&#xA0;&#xA0;This&#xA0;enables&#xA0;animation,&#xA0;styling,&#xA0;binding,&#xA0;etc...<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;readonly&#xA0;DependencyProperty&#xA0;BalloonTooltipProperty&#xA0;=<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DependencyProperty.RegisterAttached(&quot;BalloonTooltip&quot;,&#xA0;&#xA0;</code></pre>\n<pre><code>            typeof(Balloon),&#xA0;typeof(BalloonTooltipService),&#xA0;</code></pre>\n<pre><code>            new&#xA0;PropertyMetadata(null,&#xA0;new&#xA0;PropertyChangedCallback(OnBalloonToolTipChanged)));<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;private&#xA0;static&#xA0;void&#xA0;OnBalloonToolTipChanged(DependencyObject&#xA0;sender,&#xA0;DependencyPropertyChangedEventArgs&#xA0;args)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;element&#xA0;=&#xA0;sender&#xA0;as&#xA0;FrameworkElement;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Balloon&#xA0;tooltip&#xA0;=&#xA0;args.NewValue&#xA0;as&#xA0;Balloon;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(tooltip&#xA0;!=&#xA0;null)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;tooltip.DataContext&#xA0;=&#xA0;element.DataContext;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;tooltip.Target&#xA0;=&#xA0;element;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;}<br></code></pre>\n<div lang=\"cs\"><img alt=\"Checkbox.png\" height=\"272\" src=\"https://i0.wp.com/www.codeproject.com/KB/silverlight/320232/Checkbox.png\" width=\"551\"></div>\n<h2>Application Usage </h2>\n<div lang=\"cs\">The  control can be used in application to show some usefull information  about the particular context. Following code shows how to set balloon  using <code>BallonTooltipService</code>.</div>\n<div id=\"premain3\"><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight#\"></a></div>\n<pre><code>&#xA0;          &lt;CheckBox&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;Width=&quot;100&quot;&#xA0;&#xA0;Margin=&quot;3&quot;&#xA0;GotFocus=&quot;OnFocus&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;balloon:BalloonTooltipService.BalloonTooltip&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;balloon:Balloon&#xA0;x:Name=&quot;balloon1&quot;&#xA0;Header=&quot;Checkbox&#xA0;Notification&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HorizontalAlignment=&quot;Center&quot;&#xA0;Alignment=&quot;{Binding&#xA0;Path=SelectedValue}&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;Icon=&quot;WarningHS.png&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;balloon:Balloon.Content&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;TextBlock&#xA0;TextWrapping=&quot;Wrap&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Text=&quot;Balloon&#xA0;can&#xA0;be&#xA0;placed&#xA0;on&#xA0;any&#xA0;Framework&#xA0;Element.&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/balloon:Balloon.Content&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/balloon:Balloon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/balloon:BalloonTooltipService.BalloonTooltip&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/CheckBox&gt;&#xA0;</code></pre>\n<pre><code>&#xA0; </code></pre>\n<pre><code>Sample Link:</code></pre>\n<pre><code>http://www.codeproject.com/KB/silverlight/320232/BalloonDemo.zip</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Source Code:</code></pre>\n<pre><code>http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight </code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n</div>\n\t\t\t"
  },
  {
    "postId": "on-demand-tooltip-for-wpf-textblock",
    "content": "\n\t\t\t\t<p>According to&#xA0;MSDN, a tooltip</p>\n<blockquote>\n<p>Represents a small rectangular pop-up window that displays a brief description of a control&#x2019;s purpose when the user rests the pointer on the control.</p>\n</blockquote>\n<p>Setting a tooltip is really easy with WPF controls.</p>\n<pre><code><br>&lt;Button Content=&quot;Save&quot;<br>        ToolTip=&quot;Save the contents&quot; /&gt;<br><br></code></pre>\n<p>But there are some situations when user want to see tool tip, only when the text is really not readable. Whether the text block size may become smaller, when user re-size the Window. Or the text becomes more lengthy in a text box, where the maximum width of the text box is really less.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png\"><img data-attachment-id=\"447\" data-permalink=\"https://wpfplayground.wordpress.com/2014/11/24/on-demand-tooltip-for-wpf-textblock/textblock/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png\" data-orig-size=\"230,180\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"textblock\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=230\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=230\" src=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=736\" alt=\"textblock\" srcset=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png 230w, https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=150 150w\" sizes=\"(max-width: 230px) 100vw, 230px\"></a><a href=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png\"><img data-attachment-id=\"448\" data-permalink=\"https://wpfplayground.wordpress.com/2014/11/24/on-demand-tooltip-for-wpf-textblock/textbox/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png\" data-orig-size=\"278,184\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"textbox\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=278\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=278\" src=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=736\" alt=\"textbox\" srcset=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png 278w, https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=150 150w\" sizes=\"(max-width: 278px) 100vw, 278px\"></a></p>\n<p><span id=\"more-441\"></span></p>\n<p>A possible way is to measure the text block / text box with maximum size, which will give you the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.uielement.desiredsize(v=vs.110).aspx\">DesiredSize</a>. Comparing that size with actual size&#xA0;is the right way to decide whether or not showing the toool tip. The following simple code snippet can do this trick.</p>\n<pre><code><br>        private void ShowTooltipOnDemand()<br>        {<br>            textBox.Measure(new Size(Double.MaxValue, Double.MaxValue));<br>            var width = textBox.DesiredSize.Width;<br><br>            if (textBox.ActualWidth &lt; width)<br>            {<br>                ToolTipService.SetToolTip(textBox, textBox.Text);<br>            }<br>            else<br>            {<br>                ToolTipService.SetToolTip(textBox, null);<br>            }<br>        }<br><br></code></pre>\n<p>This method can&#xA0;be called from SizeChanged and TextChanged event for&#xA0;text box. That will make the text always readable. (For text block, only SizeChanged is enough)</p>\n<p>Happy Coding!!!</p>\n\t\t\t"
  },
  {
    "postId": "oops-attribute-vs-state",
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>In Object oriented programming objects are the fundamental unit. Usually an object is defined to have two characteristics. </p><div></div><blockquote> <div>State and behavior</div></blockquote> <div></div><p>State is defined through variables, properties or functions (getter and setter) depends on the language. </p><div></div><p>Behavior is usually defined through functions. </p><div></div><p>Most of the times, the term <strong>state represent both attribute and state</strong> of an object. But state and attribute are not same.</p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2>Attribute</h2> <div></div><p>Attributes are immutable. When you create an object you set attributes. And those attribute values most likely do not change throughout the lifetime of object. </p><div></div><p>For example consider the below pseudocode.</p><div> <div> <pre><code>class Dog {<br>  // Attributes<br>  color;<br>  age;<br><br>  // State<br>  isThirsty;<br><br> // Behavior<br>  run();<br>}<br></code></pre> </div></div><p>The object dog here holds two attributes color and age. When you create a dog object you define the age and color. Actually you can create an object with colour attribute set to Black. So logically you are creating a Black dog. And the dog remains Black throughout the object lifetime. If you want to create a red dog you may have to create another dog object with red colour. </p><div></div><p>The way of creating objects with immutable attributes varies from language to language. Typical method is to create properties with private set function. </p><div></div><p>In above example color is an attribute. That doesn&apos;t mean color has to be an attribute in all cases. It will change based on the context. For example consider consider traffic light as an object, where color is not an attribute but a state.</p><div></div><h2>State</h2> <div></div><p>States are mutable. The state of an object changes several times throughout it&apos;s lifetime. The state gets changes either by some function applied on the object or through an event outside of the object. There are other scenarios but these are the typical cases. For example if the run function called frequently in dog object the thirsty state may toggle to true. </p><div></div><div> <hr/> </div><div></div><p>Sometimes in programming you may need to create an object without state but only attributes. Those objects are actually passive and do not have any behaviours. It is literally representing a group of logically related attributes. </p><div></div><p>Every object oriented programming language must have an option to create such objects. We can use structs in C# and objects with private set functions in Java. </p><div></div><p>This is one of the criteria to decide between struct and class in C#. When we create such structures in C#, make sure it is always immutable. Because mutable structures and public fields are always dangerous. </p><div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/500x649.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610701.jpg\"></div></div></div><div></div><div></div><p><a href=\"https://techiesimon.com/2017/02/18/mutable-structs-are-evil-yes-really/\" target=\"_blank\" rel=\"noopener\">Understand why mutable structs are evil. </a></p><p><a href=\"https://www.reddit.com/r/java/comments/2pqq1r/why_are_public_fields_so_demonized_in_java/\" target=\"_blank\" rel=\"noopener\">Why public fields are demonized in Java?</a></p><div></div></div></div></div>"
  },
  {
    "content": "\n\t\t\t\t<p>When applying style for a ListBoxItem, today I come across a weird problem. I have trigger for both Mouse over and Selected. On selected, the item should goLightBlue and Gray on mouse hover. But when user clicks an item, it gets selected. But still the color remains Gray. But when user leaves the mouse, it turns out LightBlue.</p>\n<p><span id=\"more-160\"></span></p>\n<figure data-shortcode=\"caption\" id=\"attachment_161\" aria-describedby=\"caption-attachment-161\"><a href=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png\"><img data-attachment-id=\"161\" data-permalink=\"https://wpfplayground.wordpress.com/2014/01/22/order-does-matter-for-wpf-triggers/sshot-3/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png\" data-orig-size=\"362,236\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"ListBox_Hover\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=362\" alt=\"On Mouse hover\" src=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=300&amp;h=195\" width=\"300\" height=\"195\" srcset=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=300&amp;h=195 300w, https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=150&amp;h=98 150w, https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png 362w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><figcaption id=\"caption-attachment-161\">On Mouse hover</figcaption></figure>\n<figure data-shortcode=\"caption\" id=\"attachment_163\" aria-describedby=\"caption-attachment-163\"><a href=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png\"><img data-attachment-id=\"163\" data-permalink=\"https://wpfplayground.wordpress.com/2014/01/22/order-does-matter-for-wpf-triggers/sshot-4/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png\" data-orig-size=\"362,236\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"ListBox_Selected\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=362\" alt=\"On Selected\" src=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=300&amp;h=195\" width=\"300\" height=\"195\" srcset=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=300&amp;h=195 300w, https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=150&amp;h=98 150w, https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png 362w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><figcaption id=\"caption-attachment-163\">On Selected</figcaption></figure>\n<figure data-shortcode=\"caption\" id=\"attachment_164\" aria-describedby=\"caption-attachment-164\"><a href=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png\"><img data-attachment-id=\"164\" data-permalink=\"https://wpfplayground.wordpress.com/2014/01/22/order-does-matter-for-wpf-triggers/sshot-5/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png\" data-orig-size=\"362,236\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"ListBox_SelectedMouseOver\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=362\" alt=\"On Selected and Mouse Over\" src=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=300&amp;h=195\" width=\"300\" height=\"195\" srcset=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=300&amp;h=195 300w, https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=150&amp;h=98 150w, https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png 362w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><figcaption id=\"caption-attachment-164\">On Selected and Mouse Over (Our real problem)</figcaption></figure>\n<p>When I look into ListBoxItem Style, I could see that Mouse Over trigger added last, whereas Selected trigger came first. WPF will take the last trigger as high priority. Since we are changing the same property, the trigger which resolved last will set the property. And that is the reason the background looks gray. When I changed the style, looks like below, everything started working fine.</p>\n<pre><code><br>     &lt;Style TargetType=&quot;ListBoxItem&quot;&gt;<br>        &lt;Setter Property=&quot;Template&quot;&gt;<br>            &lt;Setter.Value&gt;<br>                &lt;ControlTemplate TargetType=&quot;ListBoxItem&quot;&gt;<br>                    &lt;Grid&gt;<br>                        &lt;Rectangle Fill=&quot;{TemplateBinding Background}&quot; /&gt;<br>                        &lt;ContentPresenter Margin=&quot;10&quot; /&gt;<br>                    &lt;/Grid&gt;<br>                &lt;/ControlTemplate&gt;<br>            &lt;/Setter.Value&gt;<br>        &lt;/Setter&gt;<br>        &lt;Style.Triggers&gt;<br>            &lt;Trigger Property=&quot;IsMouseOver&quot;<br>                        Value=&quot;True&quot;&gt;<br>                &lt;Setter Property=&quot;Background&quot;<br>                        Value=&quot;Gray&quot; /&gt;<br>            &lt;/Trigger&gt;<br>            &lt;Trigger Property=&quot;IsSelected&quot;<br>                        Value=&quot;True&quot;&gt;<br>                &lt;Setter Property=&quot;Background&quot;<br>                        Value=&quot;LightBlue&quot; /&gt;<br>            &lt;/Trigger&gt;<br>        &lt;/Style.Triggers&gt;<br>    &lt;/Style&gt;<br><br></code></pre>\n\t\t\t",
    "postId": "order-does-matter-for-wpf-triggers"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">Most of the real world applications need custom file extensions. Double clicking the file with such extension should be opened with particular application. This article explaining how to register a custom file extension in Windows 7. Custom file extensions normally resides in registry under the following key,<p></p>\n<p>HKEY_CLASSES_ROOT</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/e2012-registry.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/e2012-registry.png?w=736\"></a></div>\n<p>For an example, let me take an application named <b>MyFoo.exe </b>which need a custom file with extension &#x201C;<i>*.foo&#x201D;</i><br><i><br></i><br>Step 1 : Create a new key under&#xA0;HKEY_CLASSES_ROOT with extension name (.foo).</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/94772-add.png\"><img border=\"0\" height=\"195\" src=\"https://wpfplayground.files.wordpress.com/2012/05/94772-add.png?w=320&amp;h=195\" width=\"320\"></a></div>\n<p>Edit the default value of the key and set it as &#x201C;MyFoo&#x201D;, the application name.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/b9612-value.png\"><img border=\"0\" height=\"281\" src=\"https://wpfplayground.files.wordpress.com/2012/05/b9612-value.png?w=640&amp;h=281\" width=\"640\"></a></div>\n<div></div>\n<p>Step 2 : Create another key under the same root with the name of the app &#x201C;MyFoo&#x201D;.</p>\n<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/026c2-foo.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/026c2-foo.png?w=736\"></a></div>\n<p>Step 3 : Create another sub node under MyFoo node and name it as DefaultIcon. Edit the default value and set the path to the icon file you want to add for your custom file.</p>\n<p>Step 4 : Create another sub node under MyFoo node with the name of &#x201C;shell&#x201D;. This node is responsible for adding commands.</p>\n<p>Step 5 : Under shell node, add your commands. Most of the traditional desktop applications came up with commands like open, play, preview, print, etc. For simplicity let me explain how to add a open command to this application. The MyFoo node should look like this once you have added the needed keys.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/fd017-command.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/fd017-command.png?w=736\"></a></div>\n<p>Now edit the command key and map the default value to the application exe.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/c977c-path.png\"><img border=\"0\" height=\"248\" src=\"https://wpfplayground.files.wordpress.com/2012/05/c977c-path.png?w=640&amp;h=248\" width=\"640\"></a></div>\n<p>Now we are done with registering the extension. All the files in the machine with .foo extension will be opened in MyFoo application. Also you can find the &#x201C;Open&#x201D; command on the context menu of the application tile.</p>\n<p>Everything is fine. But how your application would know the location of the file which is opened? Using Command line arguments we can extract the path. In WPF, we can get the command line&#xA0;arguments in Application Start up event in this way.</p>\n<pre><code>&#xA0;           if&#xA0;(e.Args.Count()&#xA0;&gt;&#xA0;0)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;this.Properties[&quot;FilePath&quot;]&#xA0;=&#xA0;e.Args[0];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<p>The file path we stored here can be used anywhere in the application,</p>\n<p><span>string</span><span>&#xA0;filepath&#xA0;=&#xA0;</span><span>Application</span><span>.Current.Properties[</span><span>&#x201C;FilePath&#x201D;</span><span>].ToString();</span></p>\n<pre><code>But to make this work, the default value of the command should be modified slighter.&quot;C:\\Users\\labuser\\Desktop\\MyFoo\\bin\\Debug\\MyFoo.exe&quot; &quot;%1&quot;.</code></pre>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/a93e7-sshot-7.png\"><img border=\"0\" height=\"240\" src=\"https://wpfplayground.files.wordpress.com/2012/05/a93e7-sshot-7.png?w=640&amp;h=240\" width=\"640\"></a></div>\n<p>Happy coding!!!&#x2026;</p>\n</div>\n\t\t\t",
    "postId": "registering-a-custom-file-extension-in-windows"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<h2> <span>Introduction&#xA0;</span></h2>\n<div align=\"baseline\">The article describes how to implement Rubberband behavior for WPF Listbox. Also it describes how to add this behavior using Expression Blend <a href=\"http://www.codeproject.com/Articles/404827/Rubberband-Behavior-for-WPF-Listbox\" target=\"_blank\">(Read more&#x2026;)</a></div>\n<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/06/a4268-rubberband.png\"><img border=\"0\" height=\"273\" src=\"https://wpfplayground.files.wordpress.com/2012/06/a4268-rubberband.png?w=400&amp;h=273\" width=\"400\"></a></div>\n<p></p>\n<div>\n<div align=\"baseline\"></div>\n</div>\n</div>\n\t\t\t",
    "postId": "rubberband-selection-for-wpf-listbox"
  },
  {
    "content": "\n\t\t\t\t<p>A contract is like an agreement between one or more apps. Contracts define the requirements that apps must meet to participate in these unique Windows interactions.</p>\n<p>For XAML Metro style apps, the Windows.UI.Xaml.Application class does a lot of the work needed for your app to support activation. This class exposes a set of strongly typed activation methods that you can override for supporting common contracts such as Search. For all contract activations that don&#x2019;t have a strongly typed method, you can override the OnActivated method and inspect the activation kind to determine the contract for which your app is activated. New XAML app projects in Visual Studio come with generated code that uses the Windows.UI.Xaml.Application class to make the app capable of being activated for a generic launch.</p>\n<p><span id=\"more-23\"></span></p>\n<p>There is an easier way than manually doing this work. You can use Visual Studio tooling for completing a lot of this work. Just right click on your project, select Add &gt; New Item, and choose Search Contract in the dialog. Most of the code you see here, and a search UI that displays results in a way that follows our <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh465233\">Search UX guidelines</a> is automatically created for you.</p>\n<p>To extend support for Search activation in your app:</p>\n<ol>\n<ol>\n<ol>\n<li>Add the Search declaration to your manifest using the Visual Studio Manifest Designer.</li>\n<li>Place in the App constructor of App.xaml.cs/cpp/vb any general initialization code that needs to run every time your application is started irrespective of the reason.</li>\n<li>Override the strongly typed OnSearchActivated method in App.xaml.cs/cpp/vb to handle search activation.</li>\n<li>Load your Search UI and show search results for the query you receive in the SearchActivatedEventArgs.</li>\n</ol>\n</ol>\n</ol>\n<p>We must override the OnSearchActivated method to support activation for Search:</p>\n<div>\n<pre><code>protected override void OnSearchActivated(SearchActivatedEventArgs args)<br>{<br>    // Load Search UI<br>    PhotoApp.SearchResultsPage.Activate(args.QueryText);<br>}<br></code></pre>\n</div>\n<p>The <b>Activate</b> method of the <b>SearchResultsPage</b> sets up a UI that shows search results for the user&#x2019;s search query:</p>\n<div>\n<pre><code>        // SearchResultsPage.xaml.cs code snippet<br>        public static void Activate(String queryText)<br>        {<br>            // If the window isn&apos;t already using Frame navigation, insert our own frame<br>            var previousContent = Window.Current.Content;<br>            var frame = previousContent as Frame;<br>            if (frame == null)<br>            {<br>                frame = new Frame();<br>                Window.Current.Content = frame;<br>            }<br>            // Use navigation to display the results, packing both the query text and the previous<br>            // Window content into a single parameter object<br>            frame.Navigate(typeof(SearchResultsPage1),<br>                new Tuple(queryText, previousContent));<br>            // The window must be activated in 15 seconds<br>            Window.Current.Activate();<br>        }<br></code></pre>\n</div>\n<p><img src=\"https://i1.wp.com/i.msdn.microsoft.com/dynimg/IC576244.png\" alt width=\"640\" height=\"307\"></p>\n\t\t\t",
    "postId": "search-contract-for-windows-store-apps"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">It is a well known fact, that Windows 8 UI is flat, chromeless and clean. Every single pixel on the screen is there to represent your information. App will be taken up&#xA0;the entire screen. Showing alert windows to users is more trivial for an App developer. But I am sure it is not possible to show something like below in new Windows 8 UI.<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/08/27235-thcazujxm5.jpg\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/08/27235-thcazujxm5.jpg?w=736\"></a></div>\n<p>Windows 8 has an alternate way to show alert. The article shows how to show an alert dialog in Windows 8 XAML app. </p>\n<p>Include the following namespace in your XAML project.</p>\n<p><em>using Windows.UI.Popups;</em></p>\n<p>Unlike WPF or Windows Forms, Windows 8 has no static Message box class. Instead above namespace contains a non-singleton class called <em>MessageDialog</em>.</p>\n<p><span><span><span>protected override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;<span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0; dialog.ShowAsync();<br>}</span><br><span></span></span></p>\n<div><span><span><a href=\"https://wpfplayground.files.wordpress.com/2012/08/0e161-screenshot_08122012_025326.png\"><img border=\"0\" height=\"480\" src=\"https://wpfplayground.files.wordpress.com/2012/08/0e161-screenshot_08122012_025326.png?w=640&amp;h=480\" width=\"640\"></a></span></span></div>\n<p><span><br></span><span><span>Unlike WPF or Windows Forms, ShowAsync() method is not awaited by default. So&#xA0;the execution of current method continues before the call is completed. To avoid this Windows 8 introduced a new keyword <span><em>await</em>.</span></span></span></p>\n<p><span>More information about <em><span>await</span></em> keyword is available <a href=\"http://blogs.msdn.com/b/windowsappdev/archive/2012/04/24/diving-deep-with-winrt-and-await.aspx\" target=\"_blank\">here</a>.</span></p>\n<p>The below code will do the magic. To add <em>await</em> keyword, the entire method should be <em>async</em>.<br><span><span>protected <strong><u>async</u></strong> override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0;&#xA0;&#xA0;&#xA0; <span><strong><u>await</u></strong></span> dialog.ShowAsync();<span>//Execution waits here until dialog processed.</span><br>&#xA0;&#xA0;&#xA0;&#xA0; System.Diagnostics.<span>Debug</span>.WriteLine(<span>&#x201C;Go ahead!!&#x201D;</span>);<br>}</span><br><span><br></span>Commands can be added, which renders button for each command in dialog.</p>\n<p><span><span>protected async override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0;&#xA0;&#xA0;&#xA0; dialog.Commands.Add(<span>new </span><span>UICommand</span>(&#x201C;Done&#x201D;, new <span>UICommandInvokedHandler</span>(delegate(IUICommand command) <br>&#xA0;&#xA0;&#xA0;&#xA0; { <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <span>//Action goes here&#x2026;.</span> </span><br><span>&#xA0;&#xA0;&#xA0;&#xA0; })));<br>&#xA0;&#xA0;&#xA0;&#xA0; dialog.Commands.Add(<span>new</span> <span>UICommand</span>(&#x201C;Retry&#x201D;, new <span>UICommandInvokedHandler</span>(delegate(IUICommand command)<br>&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <span>//Action goes here&#x2026;.</span> </span><br><span>&#xA0;&#xA0;&#xA0;&#xA0; })));<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>await</span> dialog.ShowAsync();&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br>}</span></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/08/e2dc8-screenshot_08122012_031904.png\"><img border=\"0\" height=\"480\" src=\"https://wpfplayground.files.wordpress.com/2012/08/e2dc8-screenshot_08122012_031904.png?w=640&amp;h=480\" width=\"640\"></a></div>\n<p><span></span></p>\n<p></p></div>\n\t\t\t",
    "postId": "show-alert-dialog-in-windows-8-xaml-app"
  },
  {
    "postId": "silverlight-like-data-validation-in-winrt",
    "content": "\n\t\t\t\t<p>According to a <a href=\"http://social.msdn.microsoft.com/Forums/en-US/winappswithcsharp/thread/1749b3e4-87f2-4617-af30-c7be91455b52\">recent MSDN.com forum discussion</a>, Silverlight-like data validation is not available in WinRT. Syncfusion&#x2019;s editor controls, however, do have built-in options to achieve such data validation. In Silverlight, data is validated by using the <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.idataerrorinfo(v=vs.100).aspx\"><b>IDataErrorInfo</b></a> interface. With Syncfusion WinRT editors, we use the <b>Syncfusion.UI.Xaml.Controls.Data.IDataValidation</b> interface for data validation&#x2026; [<a href=\"http://www.syncfusion.com/blogs/post/Silverlight-like-Data-Validation-in-WinRT.aspx\">Read more</a>]</p>\n\t\t\t"
  },
  {
    "postId": "splash-screen-for-windows-8",
    "content": "\n\t\t\t\t<p>When users launch an app, they are immediately welcome by the splash screen. Every Windows 8 app has a splash screen, which consists of a 620&#xD7;300 image and solid background color. Windows presents the splash screen on your behalf in order to welcome users while your app is activated. The activated event is received by all apps on launch, and gives your app the ability to perform any initialization work needed to present its initial UI.</p>\n<p><span id=\"more-21\"></span></p>\n<p>The splash screen URL has to be mentioned in application manifest file.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png\"><img data-attachment-id=\"490\" data-permalink=\"https://wpfplayground.wordpress.com/2012/09/27/splash-screen-for-windows-8/splashscreen/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png\" data-orig-size=\"862,304\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"splashscreen\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=736\" src=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=736&amp;h=259\" alt=\"splashscreen\" srcset=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=734&amp;h=259 734w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=150&amp;h=53 150w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=300&amp;h=106 300w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=768&amp;h=271 768w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png 862w\" sizes=\"(max-width: 736px) 100vw, 736px\"></a></p>\n<p>If you are interested in monitor when the splash screen has been dismissed, you can use the splash screen API. The API includes the SplashScreen.Dismissed event, which indicates when the transition from splash screen to app start page has occurred. This may be useful if you want to know when your skeleton landing page is in view.</p>\n<p>As you will see in the following example, your app can begin executing operations to fill the landing page inside of the launched callback. To optionally learn when the splash screen is dismissed, use the activated event args to obtain the splash screen object. Using this object, register for the dismissed event to be notified of splash screen dismissal.</p>\n<pre><code>async protected override void OnLaunched(LaunchActivatedEventArgs args)<br>{<br>    // Begin executing setup operations.<br>    PerformSetupTasks();<br><br>    // Retrieve splash screen object.<br>    SplashScreen splashScreen = args.SplashScreen;<br><br>    // Register an event handler to be executed when the splash screen has been dismissed.<br>    splashScreen.Dismissed += new TypedEventHandler&lt;SplashScreen, object&gt;(eSplash.onSplashScreenDismissed);<br>    ...<br>}<br><br>internal void PerformSetupTasks()<br>{<br>    // Begin additional loading tasks here&#x2026;<br>    ...<br>}<br><br>internal void onSplashScreenDismissed(Windows.ApplicationModel.Activation.SplashScreen sender, object e)<br>{<br>    // The splash screen has dismissed and the skeleton landing page is now in view.<br>    ...<br>}</code></pre>\n<pre><code></code></pre>\n\t\t\t"
  },
  {
    "postId": "syncfusion-radial-menu-command-binding",
    "content": "\n\t\t\t\t<p>Radial Menu has the ability to add items through ItemsSource property. A collection of different types of objects can be added into the Items collection. If the ItemsSource is not null, the items in the items property are read-only. You cannot add an object or change the objects in the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.itemscontrol.items%28v=vs.95%29.aspx\">Items</a> property.</p>\n<p>In this case, it is pretty easy to customize each item using ItemTemplate, but there is a problem in binding the Command property to every item. It is not possible to set binding through the style setter like you would be able to in WPF. [<a href=\"http://www.syncfusion.com/blogs/post/Radial-Menu-Command-Binding.aspx\">Read more&#x2026;</a>]</p>\n\t\t\t"
  },
  {
    "postId": "syncfusion-released-beta-version-of-winrt-controls",
    "content": "\n\t\t\t\t<p>Syncfusion now come up with a pack of WinRT XAML controls, which includes high performance chart, maps, diagram, radial menu, etc. It also includes a unique set of controls for reading and writing Excel, Word, and PDF documents in Windows store apps. The studio for WinRT can be downloaded from the below location.</p>\n<p><a href=\"http://www.syncfusion.com/products/winrt\">http://www.syncfusion.com/products/winrt</a></p>\n<p><span id=\"more-19\"></span></p>\n<h2>Chart</h2>\n<p>Essential Chart for WinRT is a high-performance charting component that is very easy to use and is also visually stunning. It includes the most common chart types ranging from line charts to specialized financial charts. It also utilizes DirectX rendering to deliver the best possible performance.</p>\n<p>\n</p><h2>Diagram</h2>\n<p>Essential Diagram for WinRT can be used to create and present feature-rich diagrams within your Windows store applications. It is commonly used to compose diagrams and workflows either visually using touch interactions or by automatically laying out the elements following specific rules.&#x201D;</p>\n<p>\n</p><h2>Maps</h2>\n<p>Essential Map for WinRT is a powerful data visualization control that can be used to easily visualize data on a map surface. It is frequently used on financial dashboards for plotting sales data on a map.</p>\n<p>\n</p><h2>Gauge</h2>\n<p>Essential Gauge for WinRT is a highly customizable gauge control that is used to visualize the given value over a circular scale. All the elements including scales, ticks, pointers and labels can be customized as required.</p>\n<p>\n</p><h2>Radial Menu</h2>\n<p>The radial menu control displays a hierarchical menu structure in a radial layout optimized for usage on touch devices. It is typically used as a context menu and can expose more menu items in the same space than a traditional menu control.</p>\n<p>\n</p><h2>Hub Tile</h2>\n<p>HubTile is a ContentControl that makes it possible to display live tiles within your application user interface. Content updates are shown through a variety of smooth animations similar to the live tile updates shown on the start screen of Windows 8.</p>\n<p>\n</p><p>And several more controls like Editors, Tab Control, Tile View, Cover flow etc are available in this toolkit.</p>\n\t\t\t"
  },
  {
    "postId": "text-binding-to-winrt-richtextblock",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<div>Normally it is not possible to bind text to WinRT RichTextBlock as we do for TextBlock. RichTextBlock is devoid of Text dependency property. So the only way is to populate the Blocks property with paragraphs in code behind. But by simply declaring an attached property, we can achieve binding to text in RichTextBlock.</div>\n<div></div>\n<div></div>\n<p><span id=\"more-9\"></span></p>\n<pre><code>        public static string GetText(DependencyObject obj)<br>        {<br>            return (string)obj.GetValue(TextProperty);<br>        }<br><br>        public static void SetText(DependencyObject obj, string value)<br>        {<br>            obj.SetValue(TextProperty, value);<br>        }<br><br>        // Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...<br>        public static readonly DependencyProperty TextProperty =<br>               DependencyProperty.RegisterAttached(&quot;Text&quot;, typeof(string), typeof(BindingHelper), new PropertyMetadata(String.Empty, OnTextChanged));<br><br>        private static void OnTextChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)<br>        {<br>            var control = sender as RichTextBlock;<br>            if (control != null)<br>            {<br>                control.Blocks.Clear();<br>                string value = e.NewValue.ToString();<br>                var paragraph = new Paragraph();<br>                paragraph.Inlines.Add(new Run { Text = value });<br>                control.Blocks.Add(paragraph);<br>            }<br>        }<br></code></pre>\n<div>&#xA0;The XAML side binding will looks like below,</div>\n<div></div>\n<pre><code>&lt;RichTextBlock common1:BindingHelper.Text=&quot;{Binding ElementName=calendar, Path=SelectedDate}&quot; /&gt;<br></code></pre>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/BindingHelper.zip\">Download BindingHelper.zip</a></p>\n</div>\n\t\t\t"
  },
  {
    "postId": "texture-background-in-wpf",
    "content": "\n\t\t\t\t<div dir=\"ltr\">Seems my first blog is this. I am enjoying working with WPF. Whenever I am creating a simple or large scale application, I like to use texture backgrounds other than plane background. Becacuse it looks crispy and makes our application more beautiful. So I want to show you how to create a texture background in WPF.<p></p>\n<p>Hope WPF developers are well familiar with DrawingBrush. Using Drawing Brush it is easy to create thatch backgrounds. Consider we are going to create a background which alikes Expression Blend.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/09/bace1-sshot-7.png\"><img border=\"0\" height=\"220\" src=\"https://wpfplayground.files.wordpress.com/2011/09/bace1-sshot-7.png?w=320&amp;h=220\" width=\"320\"></a></div>\n<p>Geometry Brush will contain a group of Geometry Drawings. Since the above texture contains only two colors, let me create two Geometry Drawings with rect size of 60 x 60.</p>\n<pre><code>&#xA0;&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92F2F2F&quot;&gt;<br>&#xA0;&#xA0; &lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;/GeometryGroup&gt;<br>&#xA0;&#xA0; &lt;/GeometryDrawing.Geometry&gt;<br> &lt;/GeometryDrawing&gt;</code></pre>\n<p>The Brush of Geometry Drawing decides the color of rectangle. I have given the another rect with size and brush.</p>\n<p></p>\n<pre><code>&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92D2D2D&quot;&gt;<br>&#xA0;&#xA0;&#xA0; &lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;/GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0; &lt;/GeometryDrawing.Geometry&gt;<br>&#xA0;&lt;/GeometryDrawing&gt;</code></pre>\n<p>Finally the Drawing Brush looks like the one below,</p>\n<p></p>\n<pre><code>&#xA0;        &lt;DrawingBrush&#xA0;x:Key=&quot;ThatchBackground&quot;&#xA0;Viewport=&quot;0,0,15,15&quot;&#xA0;ViewportUnits=&quot;Absolute&quot;&#xA0;Stretch=&quot;None&quot;&#xA0;TileMode=&quot;Tile&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;DrawingBrush.Drawing&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;DrawingGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92F2F2F&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92D2D2D&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/DrawingGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/DrawingBrush.Drawing&gt;</code></pre>\n<pre><code> &#xA0;</code></pre>\n<pre><code>You can use the Drawing Brush as a background of WPF objects as below,</code></pre>\n<p></p>\n<pre><code>&#xA0;&#xA0;&lt;Grid&#xA0;Background=&quot;{StaticResource&#xA0;ThatchBackground}&quot;/&gt;</code></pre>\n<p>I like to show the screenshot of my application, where I am using this texture background.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/09/e388a-sshot-8.png\"><img border=\"0\" height=\"281\" src=\"https://wpfplayground.files.wordpress.com/2011/09/e388a-sshot-8.png?w=320&amp;h=281\" width=\"320\"></a></div>\n<p>Enjoy with WPF&#x2026;&#x2026;&#x2026;..!!!!!!!!</p></div>\n\t\t\t"
  },
  {
    "content": "<p>Years back in 2013, I was working in a Hospitality management system. The application was used by front desk staff in star hotels. It helps to check in or check out rooms, book appointments and offer several other services. The entire application was written C#. Yes, you hear it right - the whole application including the user interface was written in C#. It was a desktop application and they used to install it in high resolution touch monitors backed by Windows OS and keep it in reception.</p><p>The UI was powered by Windows Presentation Framework (WPF) and backend was using&nbsp;<a href=\"http://asp.net/\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">ASP.NET</a>&nbsp;Web API. Even the database layer was abstracted using Entity Framework - one of the popular ORM in C#. I didn\u2019t remember writing a single native SQL query in that project.</p><p>It becomes a problem when the customer wanted the same application in web, since they have hard time provisioning the system, installing required dependencies and managing updates. So we proposed to build the web interface using Silverlight. Silverlight is a web platform used to build rich web interfaces using C#. (The technology is dead now). Our competitors were starting to explore AngularJS and React, while we stuck with a technology that was about to deprecate.</p><p>It was all happened because our limitation in the capability. Apart from organization perspective, it also created problem to the individual\u2019s learning. Our team has a great expertise in C#. We know each and every feature in C# and how it works. But we never know why some of the design decisions were made in that programming language. Many of the language decisions started to make sense, when we start learning other languages.</p><p><em>The option to pass by reference (ref and out) and pass by value feature in C# makes more sense, when I learn about borrowing feature in Rust.</em></p><p><em>I understood the actual purpose of dynamic keyword in C#, after I experienced the power of dynamic programming in Python.</em></p><p><em>Lambdas and anonymous functions in C# started to make sense, when I explored functional programming in Haskell.</em></p><p><em>The necessity of two way data binding in WPF now making more sense, after I learnt the problems of bi-directional data flow and how Redux solved the problem with Flux design pattern (uni-directional data flow)</em></p><p>The moment you start learning other languages, it opens up a lot of new boxes in your brain and you will be able to view programming languages from a different perspective. I like the way Uncle Bob Martin put it.</p><blockquote>The reason to learn a new language is to create new neural pathways in your mind. - Uncle Bob Martin</blockquote><h1>Polyglot Programming</h1><p>General definition</p><blockquote>Polyglot programming is the practice of writing code in multiple languages to capture additional functionality and efficiency not available in a single language.</blockquote><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/polyglot.png\" src=\"\"></p><p>There are lot of media sources already talking about advantages of polyglot programming. And my favorite is the interview with <a href=\"https://www.thoughtworks.com/profiles/neal-ford\" target=\"_blank\">Neal Ford</a> (Director, Software Architect, and Meme Wrangler at ThoughtWorks), discussing about the benefits of Polyglot Programming.</p><p><a href=\"https://www.youtube.com/watch?v=sBbGAzs9k-c\"> Video Link </a></p><p>In this article, I want to talk about few ideas that will help us to advance in the direction of becoming a polyglot programmer. Polyglot programming doesn\u2019t mean learning and being an expert in every programming language.</p><p>It is the matter of understanding the high level programming concepts and having awareness about evolving new language features.</p><h2>Dig deeper</h2><p>Understanding multiple languages becomes easier, when you are strong in programming fundamentals. When I say fundamentals, I mean the overall fundamental building blocks that make up a programming language. Consider type system - the nature of type system varies from language to language. A language could be either static or dynamic typed. It could be either strong or weekly typed. Or untyped (WebAssembly). Try to understand the rationale behind those design decisions. Some languages like C, C++ are statically typed, because type information is not available during run time. So they have to do type checking at compile time. Python has a sophisticated runtime, which can do type checking on the fly. So they don't need type information at compile time. Understanding these kind of fundamental working model will help you to pick up any new languages easily.</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/basics.jpg\" src=\"\"></p><p>Similarly try to understand other building blocks like memory management, execution environment like whether it is compiled or interpreted, executed by processor or virtual machine, the nature of threading. Also compare these features with the programming languages you already known. That helps you to get more insights on why certain design decisions are made. For example goroutines(lightweight threads) might be the result of costly nature of OS threads in Java.</p><h2>Best practices</h2><p>The common problem in Polyglot Programming is, when we try to master multiple programming languages, we may tend to lose the best practices in that particular language. A programmer who code Java for 10 years may follow good practices when compared to the programmer who practicing the language for an year. But that doesn't mean polyglot programmer write bad code. With proper understanding of language agnostics best practices, we can definitely write good code in any language. I recommend books like <a href=\"https://www.amazon.in/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\">Clean Code</a> (by Uncle Bob) and <a href=\"https://martinfowler.com/books/refactoring.html\">Refactoring</a> (by Martin Fowler).</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/best_practice.jpg\" src=\"\"></p><p>Write code that is readable, testable and extensible. You will always end up in a design pattern. Understanding the concepts like modularity, dependency management, composition will help you write efficient code in any programming language. I would say all the best practices rooted in the modularity. The level of modularity in your code decides the robustness of your code.</p><h2>Be open minded</h2><p>I know some of my fellow developers blame particular languages. They say the language has a bad design. I disagree with that. No language is bad. Every programming language has been designed with a purpose in mind. If you try to create a high performance, cross platform game engine using Javascript, then it will be a nightmare. Thats not the problem with language. You chose the wrong tool. One might argue that NodeJS is bad for web development, because of its single threaded nature. It might be !! But understand the rationale behind it. Even though it handles all the requests in a single main thread, how efficiently it delegates all asynchronous calls like I/O operations to multiple threads. It makes the main thread to be available all the time to handle incoming requests. You don't have to use NodeJS in your project, but understanding these kind of unique behaviors in multiple languages and frameworks help you to expand your programming brain.</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/learning.jpg\" src=\"\"></p><p>Some programmers are very biased with the language they use and they stick to that language no matter how many better languages pitch in. They try to find loopholes in the new languages as much as possible and try to debunk it. But I would recommend you to be aware of the new languages and frameworks. And if something interest you, go ahead and learn about it. There is nothing wrong for a Javascript developer who uses jQuery for long time to explore React for his side project. Don't use the same technology stack of your mainstream project in your side projects. That is the only way to break the barrier and jump into the fun world of polyglot programming.</p><h2>Taste the unique features</h2><p>When you learn a new programming language I bet you the first ten chapters would remain same in all languages. It include data types, variable declarations, conditional operations, functions and structures. But the last few chapters introduce the key features of that particular language. Being aware of the key features in a programming language will help you to choose the right tool for your problem. When you learn a new language, identify the key features and practice examples based on the key features. If you are learning Go, create a simple webserver and see how efficiently you can handle multiple requests concurrently using goroutines. If you are learning Rust, try to create simple image processing library and run it from browser using webassembly. By doing that you can understand the ease of manual memory management and the power of webassembly.</p><h2>Adapt the changes</h2><p>Changes are inevitable. New languages and frameworks born when new changes or problems arise into the technology. Think about the evolution of hardware and multi core processors. What about the amount of data that got accumulated across internet over the past 10 years. We need proper technology and frameworks to deal with that data. Web is revolutionized. jQuery was the most popular javascript library 10 years before. But now things changed. Web is not just a platform to read and submit data forms like before. Web is one true universal platform. Web is now expected to support broad range of applications like word processing, video and music editing, games, conference calls, screen sharing and so on. Agile and extreme programming becomes unavoidable in software development life cycle. Such practice of continuous delivery gave birth to devops. Devops opened up opportunities for various languages and frameworks. Programmers has to keep up with these changes by learning suitable technologies.</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/changes.jpg\" src=\"\"></p><h1>Closing</h1><p>Learning is fun. Learning new stuff is always exciting. No matter what we do, we cannot learn everything in our lifetime. Learning is an ongoing process. I would like to remind the words of Steve Jobs, which suits all the time.</p><blockquote>Stay hungry. Stay foolish.</blockquote><p>I myself sometimes ask whether I am a polyglot programmer. If you ask me how many programming languages I know, I cannot answer that question. I didn't even know how many languages exists at this point of writing this article. But if you give me a problem and ask me to solve it in any new programming language, I have the confidence that I can solve it. If that means a polyglot programmer, then of course I am a Polyglot Programmer.</p>"
  },
  {
    "postId": "the-elm-architecture",
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>Elm is a functional programming language that used to develop frontend applications. Even though you don&apos;t use Elm at work, understanding Elm architecture will help you to learn functional reactive programming (FRP) at high level. One of the most popular state management framework - Redux actually inspired from Elm architecture.</p><div></div><blockquote> <div>Redux evolves the ideas of flux, but avoids its complexity by taking cues from Elm. <span>Dan Abramov, Author of Redux</span></div></blockquote> <div></div><p>To understand Elm architecture better, let&apos;s try to understand our typical approach for building the frontend applications. Applications are usually divided into three layers </p><ul> <li> <p>Model </p></li><li> <p>Controller or View Model </p></li><li> <p>View</p></li></ul> <div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2000x1444.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610668.png\"></div></div></div><div></div><div></div><style data-emotion-css=\"1pq57dj\"> .css-1pq57dj{font-size: 22px !important;}</style> <h3>Model</h3> <div></div><p>In frontend applications, this is the common layer where we define the state of our user interface. This is the programmatic representation of the user interface. For example if we have a to-do list, our model might have a list of objects that represent the todo item and may be another boolean to represent the filter that is currently applied. But it doesn&apos;t have any business logic.</p><div></div><h3>Controller or View Model</h3> <div></div><p>There is where our business logic goes. This layer represents the core business implementation of the application. The model may hold the filter value and the to-do items, but the controller is the one that actually has the logic to filter the to-do items. Usually if something happens in the UI, controller would receive the notification and update the model and UI (if needed). </p><div></div><h3>View</h3> <div></div><p>The View has functions to render User Interface components. It decides how to render the Model. For example, if there is a list of to-do items, the View layer decides whether to render it as a list of labels or cards or check boxes. </p><div></div><div></div><div> <hr/> </div><div></div><div></div><p>This approach is been there for long time. It is not just used by web applications, even thick client desktop applications like WPF or Xamarin also uses the same approach. We can see what are the problems with this approach and how Elm architecture solves this problem.</p><div></div><p>Let&apos;s say we have cascade drop downs in UI. We have a Country dropdown and a State dropdown. When selected value gets changed in Country dropdown, the State dropdown list should get updated.</p><div></div><p>In a typical approach like MVC, the controller will get notified when the selection in country dropdown changed. So the controller will now update the Model with the new selected country value and it also fetch the new list of states based on the selected country and updated the UI.</p><div></div><p>If you take a closer look, the controller is actually doing two jobs. It is updating the Model as soon as something changed in the UI. Because Model is the representation of UI, so both View and Model has to be in sync. And the controller is also updates the UI, making sure the UI renders the right list of states based on the selected country.</p><div></div><p>The controller does the heavy job of synchronising the model and view. And the controller gets more complex and complex as the project grows. And also the data is flowing back and forth between the controller and view and that gives very less control over the data. This approach may be suitable for server client applications, but not for single page applications.</p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2>How Elm architecture solves the problem</h2> <div></div><p>Elm is a pure functional language. So it is all about functions. To understand Elm architecture we need to understand three primary functions.</p><div></div><h3>Init</h3> <h3></h3> <div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1352x484.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612280.png\"></div></div></div><div></div><p>This function does not take any input parameters but it returns a Model object. The object represents the initial state of the application. This gets called only once over the lifecycle of the component.</p><div></div><h3>View</h3> <div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2084x796.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613529.png\" class=\"large\"></div></div></div><div></div><div></div><p>This function takes Model object as input parameter and returns the DOM object. This function holds the logic, that decides how to render the Model as UI. For example if you have a list of to-do items, this function decides whether to display it as list of labels, cards or text boxes. The DOM object it returns is not just a passive object, it has ability to broadcast messages when something happens in UI.</p><div></div><h3>Update</h3> <h3></h3> <h3></h3> <div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2246x694.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609615118.png\" class=\"large\"></div></div></div><div></div><div></div><p>The Update function accepts two input parameters - a Message and the current State of the application. The message is sent from the DOM object that View function returns. It says what happened in the UI. And the second parameter state holds the current application state. Based on the message this function returns the new state for the application. This function holds the core business logic. </p><div></div><p>The Update and View functions will get invoked repeatedly, making sure the state and view are always in sync. And the data also flows in single direction, giving you more control over it.</p><div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2642x1530.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609616494.png\" class=\"large\"></div></div></div><div></div><div></div><p>But there is one problem. The View function now becomes a function that computes the User Interface based on the State. And the View get called multiple times, making it returns the whole DOM object every time. But applying the entire DOM to browser is not efficient. So now Virtual DOM comes into picture. Even though the application returns the whole DOM object, only the differences will be identified and applied to the actual DOM.</p><div></div><p>As I already said even if you don&apos;t use Elm at work, understanding Elm architecture will help you to write efficient state management code.</p><div></div></div></div></div>"
  },
  {
    "postId": "touch-and-hold-gesture-awaitable",
    "content": "\n\t\t\t\t<p>Touch and Hold gesture can not be identified using&#xA0;any built-in API. Surface SDKs may provide one. But I will show a simple awaitable way to detect this gesture. Using a timer, we can wait for a particular seconds and return the method once the timer elapsed. If user took his hand before timer elapsed, then immediately return the method with a false flag.</p>\n<p><span id=\"more-434\"></span></p>\n<pre><code>public static Task&lt;bool&gt;TouchHold(this FrameworkElement element, TimeSpan duration)<br>{<br>    DispatcherTimer timer = new DispatcherTimer();<br>    TaskCompletionSource&lt;bool&gt; task = new TaskCompletionSource&lt;bool&gt;();<br>    timer.Interval = duration;<br><br>    MouseButtonEventHandler touchUpHandler = delegate<br>    {<br>        timer.Stop();<br>        if (task.Task.Status == TaskStatus.Running)<br>        {<br>            task.SetResult(false);<br>        }<br>    };<br><br>    element.PreviewMouseUp += touchUpHandler;<br><br>    timer.Tick += delegate<br>    {<br>        element.PreviewMouseUp -= touchUpHandler;<br>        timer.Stop();<br>        task.SetResult(true);<br>    };<br><br>    timer.Start();<br>    return task.Task;<br>}<br></code></pre>\n<p>I made it as an extension method, which is easy to use. The seconds to wait can be configurable. The following code shows, how to use it.</p>\n<pre><code>        protected async override void OnMouseDown(MouseButtonEventArgs e)<br>        {<br>            base.OnMouseDown(e);<br><br>            bool isHold = await this.TouchHold(TimeSpan.FromSeconds(1));<br>            if (isHold)<br>            {<br>                MessageBox.Show(&quot;Touch and Hold detected!!&quot;);<br>            }<br>        }<br></code></pre>\n<p>Happy coding!!</p>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<p>WPF 4.0 comes up with attractive features. One of them is Multi touch. We can play with WPF scroll viewer using&#xA0; finger. Setting the property PanningMode will do the magic.</p>\n<pre><code>&#xA0;&#xA0;&#xA0;&lt;ScrollViewer&#xA0;PanningMode=&quot;Both&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HorizontalScrollBarVisibility=&quot;Auto&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalScrollBarVisibility=&quot;Auto&quot;/&gt;</code></pre>\n<p>     <span>PanningMode</span>    can be either set directly on a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> or used as an attached property.  When a control contains a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> in its <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate.aspx\">ControlTemplate</a>, use <span>ScrollViewer.PanningMode</span> as an attached property to specify the behavior of the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> in the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate.aspx\">ControlTemplate</a>. When you use a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> outside of a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate.aspx\">ControlTemplate</a>, set <span>PanningMode</span> directly on the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a>.</p>\n<div>\n<hr></div>\n<p><a href=\"http://www.blogger.com/blogger.g?blogID=2881656683168959552\" id=\"membersToggle\">    </a>    </p>\n<table id=\"memberList\">\n<tbody>\n<tr>\n<th></th>\n<th>Member name</th>\n<th>Description</th>\n</tr>\n<tr>\n<td></td>\n<td><span>None</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> does not respond to touch input.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>HorizontalOnly</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> scrolls horizontally only.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>VerticalOnly</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> scrolls vertically only.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>Both</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> scrolls horizontally and vertically.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>HorizontalFirst</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a>  scrolls when the user moves a finger horizontally first.  If the user  moves the vertically first, the movement is treated as mouse events.   After the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> begins to scroll, it will scroll horizontally and vertically.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>VerticalFirst</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a>  scrolls when the user moves a finger vertically first.  If the user  moves the horizontally first, the movement is treated as mouse events.   After the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> begins to scroll, it will scroll horizontally and vertically.</td>\n</tr>\n</tbody>\n</table>\n<div></div>\n</div>\n\t\t\t",
    "postId": "touch-gesture-in-wpf-scroll-viewer"
  },
  {
    "postId": "visual-tree-helpers",
    "content": "\n\t\t\t\t<p>WPF User Interface is&#xA0;represented in a way of tree.&#xA0;There are two ways that the complete object tree is conceptualized and can be reported to its public API: as the logical tree and as the visual tree. The Logical tree does not contain the core controls of WPF. For example, the child object of a ContentControl is just represented by Content property. The visual tree includes all the controls that WPF used internally to build the tree system. For example the content of ContentControl is represented by a TextBlock, if the value is string. And again the textblock may composed of a scroll viewer and error adorner, etc.</p>\n<p><span id=\"more-393\"></span></p>\n<p>WPF provides built-in API to traverse the tree, but it is limited. For example if you want to get an element in top of tree by its name or type, you need iterate over the tree by using <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.visualtreehelper(v=vs.110).aspx\">VisualTreeHelper </a>class. Below, I have provided some useful extensions that will help to get the&#xA0;parent or child in any application.</p>\n<h2>FindAncestor</h2>\n<h3>Usage</h3>\n<pre><code>Grid rootGrid = submitButton.FindAncestor&lt;Grid&gt;();<br></code></pre>\n<h3>Source</h3>\n<pre><code>        public static T FindAncestor&lt;T&gt;(this DependencyObject element)<br>            where T : DependencyObject<br>        {<br>            // Try get a parent and check for type.<br>            var parent = VisualTreeHelper.GetParent(element);<br>            if (parent is T)<br>            {<br>                return (T)parent;<br>            }<br>            return FindAncestor&lt;T&gt;(parent);<br>        }<br><br></code></pre>\n<h2>FindDescendant</h2>\n<h3>Usage</h3>\n<pre><code>Button submitButton = root.FindDescendant&lt;Button&gt;();<br></code></pre>\n<h3>Usage</h3>\n<pre><code>        public static T FindDescendant&lt;T&gt;(this DependencyObject element)<br>   where T : DependencyObject<br>        {<br>            if (element == null) return null;<br><br>            T foundChild = null;<br><br>            int childrenCount = VisualTreeHelper.GetChildrenCount(element);<br>            // Iterating through all children.<br>            for (int i = 0; i &lt; childrenCount; i++)<br>            {<br>                var child = VisualTreeHelper.GetChild(element, i);<br>                // Check whether child is of that type.<br>                T childType = child as T;<br>                if (childType == null)<br>                {<br>                    // A recursive call since it is null.<br>                    foundChild = FindDescendant&lt;T&gt;(child);<br><br>                    if (foundChild != null) break;<br>                }<br>                else<br>                {<br>                    // Child found<br>                    foundChild = (T)child;<br>                    break;<br>                }<br>            }<br><br>            return foundChild;<br>        }<br><br></code></pre>\n<p><a href=\"https://db.tt/G9TdV1kr\">VisualTreeExtensions.cs</a></p>\n<p>The class has another overload where the method will accept a string parameter for name. It will return the element of that type with that name.</p>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<p>It is obvious that there is no direct way to set Watermark in WPF textboxes. Some third party controls and codeplex gave extended textboxes which supports watermark. Watermark can also be achieved through overriding the default style of a textbox. A textblock/Label needs to be inserted in default control template to display the Watermark. But it will be a static one. To make it dynamic, developers used <strong>Tag</strong> property to store Watermark data.</p>\n<p>But here is a behavior, which creates an adorner on top of Textbox. The adorner is responsible to draw the Watermark text. Font&#xA0;related dependency properties can be added to the behavior. So this is highly dynamic.</p>\n<p><span id=\"more-351\"></span></p>\n<pre><code><br>        public class WaterMarkAdorner : Adorner<br>        {<br>            private string text;<br>            private double fontSize;<br>            private string fontFamily;<br>            private Brush foreground;<br><br>            public WaterMarkAdorner(UIElement element, string text, double fontsize, string font, Brush foreground)<br>                : base(element)<br>            {<br>                this.IsHitTestVisible = false;<br>                this.Opacity = 0.6;<br>                this.text = text;<br>                this.fontSize = fontsize;<br>                this.fontFamily = font;<br>                this.foreground = foreground;<br>            }<br><br>            protected override void OnRender(System.Windows.Media.DrawingContext drawingContext)<br>            {<br>                base.OnRender(drawingContext);<br>                var text = new FormattedText(<br>                        this.text,<br>                        System.Globalization.CultureInfo.CurrentCulture,<br>                        System.Windows.FlowDirection.LeftToRight,<br>                        new System.Windows.Media.Typeface(fontFamily),<br>                        fontSize,<br>                        foreground);<br><br>                drawingContext.DrawText(text, new Point(3, 3));<br>            }<br>        }<br></code></pre>\n<p>The behavior utilizing this adorner to decorate the textbox. Right now the behavior supports only TextBox. But still the idea can be extended to PasswordBox, ComboBox, etc.</p>\n<pre><code>        private void OnLoaded(object sender, RoutedEventArgs e)<br>        {<br>            if (!this.AssociatedObject.IsFocused)<br>            {<br>                if (String.IsNullOrEmpty(this.AssociatedObject.Text))<br>                {<br>                    var layer = AdornerLayer.GetAdornerLayer(this.AssociatedObject);<br>                    layer.Add(adorner);<br>                }<br>            }<br>        }<br></code></pre>\n<p>The XAML code looks as follows,</p>\n<pre><code>            &lt;TextBox Width=&quot;200&quot;<br>                     Margin=&quot;5&quot;<br>                     Height=&quot;20&quot;&gt;<br>                &lt;i:Interaction.Behaviors&gt;<br>                    &lt;behavior:WatermarkBehavior Text=&quot;Maximum 15 characters&quot; /&gt;<br>                &lt;/i:Interaction.Behaviors&gt;<br>            &lt;/TextBox&gt;<br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png\"><img data-attachment-id=\"370\" data-permalink=\"https://wpfplayground.wordpress.com/2014/06/30/watermark-behavior-for-textbox/watermark/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png\" data-orig-size=\"266,169\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"watermark\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=266\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=266\" src=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=736\" alt=\"watermark\" srcset=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png 266w, https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=150 150w\" sizes=\"(max-width: 266px) 100vw, 266px\"></a></p>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/Freelancing/WatermarkBehaviorDemo.zip\">Download Demo</a></p>\n\t\t\t",
    "postId": "watermark-behavior-for-textbox"
  },
  {
    "postId": "whats-new-in-prism-5-0-viewmodel-locator",
    "content": "\n\t\t\t\t<p>ViewModels are usually resolved and injected through DI containers. We will set the viewmodel as DataContext of View. But&#xA0;still there are some frameworks like <a href=\"https://caliburnmicro.codeplex.com/\">Caliburn Micro</a> who provided a conventional way of resolving the view models. Now Microsoft added this feature into the PRISM framework. The View and ViewModels can be wired together&#xA0;by a naming convention.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png\"><img data-attachment-id=\"539\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/04/whats-new-in-prism-5-0-viewmodel-locator/mvvm/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png\" data-orig-size=\"222,167\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"mvvm\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=222\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=222\" src=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=736\" alt=\"mvvm\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png 222w, https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=150 150w\" sizes=\"(max-width: 222px) 100vw, 222px\"></a></p>\n<p>In this project the Views and ViewModels followed a naming convention, which can be identified by the framework.</p>\n<p><em><strong>&lt;ViewName&gt;</strong>&#xA0;=&gt; Home</em><br>\n<em><strong> &lt;ViewName&gt; + ViewModel</strong>&#xA0;=&gt; HomeViewModel</em></p>\n<p><span id=\"more-533\"></span></p>\n<p>To&#xA0;initialize this view model location,&#xA0;view should implement the IView interface and AutoWire property should be true for the View.</p>\n<pre><code>    public partial class Home : UserControl, IView<br>    {<br>        public Home()<br>        {<br>            InitializeComponent();<br>        }<br>    }<br></code></pre>\n<pre><code>&lt;UserControl x:Class=&quot;WpfApplication16.Views.Home&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:prism=&quot;clr-namespace:Microsoft.Practices.Prism.Mvvm;assembly=Microsoft.Practices.Prism.Mvvm.Desktop&quot;<br>             prism:ViewModelLocator.AutoWireViewModel=&quot;True&quot;&gt;<br>    &lt;Grid&gt;<br>        &lt;TextBlock Text=&quot;{Binding Message}&quot; /&gt;<br>    &lt;/Grid&gt;<br>&lt;/UserControl&gt;<br></code></pre>\n<p>Sometimes this naming convention may not suitable for some applications. So if people want to follow a different convention, still they can consume this awesome feature. It means, it is possible to override the ViewModel locating logic. How cool it is.. huh..!!!</p>\n<p>I usually want to add View suffix to my Views (HomeView). So the locator code should change a bit like this,</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png\"><img data-attachment-id=\"549\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/04/whats-new-in-prism-5-0-viewmodel-locator/mvvm-2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png\" data-orig-size=\"237,168\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"mvvm\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=237\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=237\" src=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=736\" alt=\"mvvm\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png 237w, https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=150 150w\" sizes=\"(max-width: 237px) 100vw, 237px\"></a></p>\n<pre><code>    public partial class App : Application<br>    {<br>        private const string ViewNamespace = &quot;Views&quot;;<br>        private const string ViewModelNamespace = &quot;ViewModels&quot;;<br><br>        protected override void OnStartup(StartupEventArgs e)<br>        {<br>            base.OnStartup(e);<br>            ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) =&gt;<br>            {<br>                var friendlyName = viewType.FullName.Remove(viewType.FullName.Length - 4);<br>                friendlyName = friendlyName.Replace(ViewNamespace, ViewModelNamespace);<br>                var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;<br>                var viewModelName = String.Format(CultureInfo.InvariantCulture, &quot;{0}ViewModel, {1}&quot;, friendlyName, viewAssemblyName);<br>                return Type.GetType(viewModelName);<br>            });<br>        }<br>    }<br></code></pre>\n<p>Also it is possible to let your DI container resolve your viewmodel. Just the ViewModel locator will change something like this. I used UnityContainer here.</p>\n<pre><code>        protected override void OnStartup(StartupEventArgs e)<br>        {<br>            base.OnStartup(e);<br>            IUnityContainer _container = new UnityContainer();<br>            ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) =&gt;<br>            {<br>                return _container.Resolve(type);<br>            });<br>        }<br></code></pre>\n\t\t\t"
  },
  {
    "postId": "wpf-datepicker-blackoutdates-data-binding",
    "content": "\n\t\t\t\t<p>A problem with <strong>DatePicker</strong> is that BlackoutDates collection cannot be initalized without a Calendar instance. So in MVVM environment, it is bit hard to bind BlackoutDates dynamically. But attached properties are a handy way to handle these type of situations. An attached property of type <em><strong>List&lt;DateTime&gt;</strong></em> can be used to achieve this. The dates will be added to the collection in the callback event of attached property manually.</p>\n<p><span id=\"more-419\"></span></p>\n<pre><code>    public class BlackOutDatesAdapter<br>    {<br>        public static List&lt;DateTime&gt; GetBlackOutDates(DependencyObject obj)<br>        {<br>            return (List&lt;DateTime&gt;)obj.GetValue(BlackOutDatesProperty);<br>        }<br><br>        public static void SetBlackOutDates(DependencyObject obj, List&lt;DateTime&gt; value)<br>        {<br>            obj.SetValue(BlackOutDatesProperty, value);<br>        }<br><br>        // Using a DependencyProperty as the backing store for BlackOutDates.  This enables animation, styling, binding, etc...<br>        public static readonly DependencyProperty BlackOutDatesProperty =<br>            DependencyProperty.RegisterAttached(&quot;BlackOutDates&quot;, typeof(List&lt;DateTime&gt;), typeof(BlackOutDatesAdapter), new PropertyMetadata(null, OnBlackOutDatesChanged));<br><br>        private static void OnBlackOutDatesChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)<br>        {<br>            var control = sender as DatePicker;<br>            var list = (List&lt;DateTime&gt;)e.NewValue;<br>            foreach(var date in list)<br>            {<br>                control.BlackoutDates.Add(new CalendarDateRange(date));<br>            }<br>        }<br>    }<br></code></pre>\n<p>And this can be bound in XAML as below,</p>\n<pre><code>        &lt;DatePicker VerticalAlignment=&quot;Center&quot;<br>                    Width=&quot;200&quot;<br>                    local:BlackOutDatesAdapter.BlackOutDates=&quot;{Binding BlackOutDates}&quot;<br>                    DisplayDate=&quot;{Binding DisplayDate}&quot;/&gt;<br></code></pre>\n<p>In sample application the black out dates are populated based on the display date, so that user can see different blackout dates for different months. The Display Date property is bound to XAML.</p>\n<pre><code>        private void OnPropertyChanged(object sender, PropertyChangedEventArgs e)<br>        {<br>            if (e.PropertyName == &quot;DisplayDate&quot;)<br>            {<br>                BlackOutDates = new List&lt;DateTime&gt; { DisplayDate.Date.AddDays(randm.Next(1, 5)), DisplayDate.AddDays(randm.Next(1, 5)) };<br>            }<br>        }<br></code></pre>\n<p><a href=\"https://db.tt/X3vvCGiN\">Download Sample</a></p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png\"><img data-attachment-id=\"421\" data-permalink=\"https://wpfplayground.wordpress.com/2014/07/28/wpf-datepicker-blackoutdates-data-binding/datepicker/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png\" data-orig-size=\"332,313\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"datepicker\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=332\" src=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=300&amp;h=282\" alt=\"datepicker\" width=\"300\" height=\"282\" srcset=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=300&amp;h=282 300w, https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=150&amp;h=141 150w, https://wpfplayground.files.wordpress.com/2014/07/datepicker.png 332w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a></p>\n\t\t\t"
  },
  {
    "postId": "wpf-flipview",
    "content": "\n\t\t\t\t<p>FlipView control behaves like an ItemsControl and shows items one by one on swipe gesture. Also navigation buttons will be available to navigate using mouse. Many users nowadays expecting Windows store touch apps to be developed using WPF. That doesn&#x2019;t require to be published on store for distribution. Same time all the features and behaviors that can be done in WinRT can also be done in WPF. So many users prefer that.</p>\n<p><a href=\"http://www.codeproject.com/Articles/741026/WPF-FlipView\">Read more in CodeProject.</a></p>\n<p><img alt src=\"https://i1.wp.com/www.codeproject.com/KB/WPF/741026/flipview.png\" width=\"547\" height=\"483\"></p>\n<p>&#xA0;</p>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;} table.MsoTableGrid  {mso-style-name:\"Table Grid\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-priority:59;  mso-style-unhide:no;  border:solid windowtext 1.0pt;  mso-border-alt:solid windowtext .5pt;  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-border-insideh:.5pt solid windowtext;  mso-border-insidev:.5pt solid windowtext;  mso-para-margin:0in;  mso-para-margin-bottom:.0001pt;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><b>WPF Rendering Engine</b></div>\n<div></div>\n<div>Windows Presentation Foundation (WPF) is graphical display system for Windows Operating System. WPF hit the Windows users and Market, because of its high level Graphical rendering when compared to primitive graphical applications. Before .Net 3.0 it is not possible to create rich graphical Windows applications, since Windows Forms and MFC were in the way.</div>\n<div></div>\n<div>The main difference I can point out between Windows Forms and WPF is the way they used to render the User Interface.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span>Windows Forms completely depends on GDI/GDI+ (sometimes User32) for UI rendering.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span>Whereas WPF depends on <b>DirectX</b> for its UI rendering.</div>\n<div></div>\n<div><i>DirectX is an older error prone gaming tool, which is used to render rich shapes, textures, gradients, etc.</i></div>\n<div></div>\n<div>Shortly after Windows 95, DirectX has matured and it supports most of the advanced Video Cards. But still most of the DirectX programming API reflect its root to older game developer&#x2019;s toolkit.</div>\n<div></div>\n<div><b>Hardware Acceleration</b></div>\n<div></div>\n<div>Hardware acceleration is the use of computer hardware to perform some function faster than is possible in software running on the general-purpose CPU. Having a high powered video card is not a guarantee, that it will provide high level hardware acceleration. Software should also play a significant role.</div>\n<div></div>\n<div>WPF offers some sort of hardware acceleration to all WDDM (Windows Display Driver Model) and XPDM (Windows XP Driver Model) drivers. But the level of offering the acceleration differs. It assigns its rating in hardware acceleration from 0 to 2.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span><b>Rendering Tier 0:</b> The Video card will not provide any hardware acceleration. Corresponds to DirectX version less than 7.0.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span><b>Rendering Tier 1:</b> The Video card will provide partial hardware acceleration. Corresponds to DirectX version between 7.0 and 9.0.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span><b>Rendering Tier 2:</b> The Video card will provide complete hardware acceleration. Corresponds to DirectX version greater than 9.0.</div>\n<div></div>\n<div><b>What is a pixel?</b></div>\n<div></div>\n<div>A WPF Window and all its elements inside it are measure using <i>device independent units</i>. A single device independent unit is equal to 1/96 of an inch.</div>\n<div></div>\n<div><span>For example, if we create a WPF button with 1 inch(i.e. 96 by 96 units ) in size. And if we are using the standard Windows DPI (Dots per inch) settings (96 DPI), each device independent unit is equal to one real, physical <b>pixel</b>.</span></div>\n<div></div>\n<div><span>[Physical Unit Size] = [Device independent unit size] * [System DPI]</span></div>\n<div><span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>=1/96 inch * 96 dpi</span></div>\n<div><span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>=1 pixel</span></div>\n<div></div>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"638\">\n<div><b><span>Note</span></b><span> : WPF respond only to System   DPI settings and not to the System resolutions as Windows Forms or other   application does.</span></div>\n</td>\n</tr>\n</tbody>\n</table>\n<div></div>\n<div></div>\n<div><span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></div>\n<div></div>\n</div>\n\t\t\t",
    "postId": "wpf-rendering-engine"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\"><span>An editor supporting smileys is most important feature nowadays. Any chat editors should render smileys from a piece of text. For example, &#x201C;:)</span><strong>&#x201D;&#xA0;</strong><span>denotes a smiling face. This article helps you to create an extended rich text editor which support smileys. <a href=\"http://www.codeproject.com/Tips/599014/WPF-RichTextBox-supporting-smileys\" target=\"_blank\">[Read more]</a></span><br><span><br></span><p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2013/05/ca4f8-demo.png\"><img border=\"0\" height=\"206\" src=\"https://wpfplayground.files.wordpress.com/2013/05/ca4f8-demo.png?w=400&amp;h=206\" width=\"400\"></a></div>\n<p><span><br></span></p></div>\n\t\t\t",
    "postId": "wpf-richtextbox-supporting-smileys"
  },
  {
    "content": "\n\t\t\t\t<p>A style in WPF can be inherited. Usually, in real world scenarios most of the theme related styles will be merged in App.xaml. In such cases, if style needs to be defined again in scope of a view. That particular style will override the style defined in App. For example, the following style for ListBoxItem is defined in App.xaml.</p>\n<pre><code><br>&lt;Style TargetType=&quot;ListBoxItem&quot;&gt;<br>&lt;Setter Property=&quot;Background&quot; Value=&quot;Orange&quot; /&gt;<br>&lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot; /&gt;<br>&lt;Setter Property=&quot;Padding&quot; Value=&quot;10&quot; /&gt;<br>&lt;/Style&gt;<br><br></code></pre>\n<p><span id=\"more-213\"></span></p>\n<p>The above style clearly stick to theming. Since it is an implicit styling, the styling will apply to ListBox items defined below,</p>\n<pre><code><br>&lt;ListBox ItemsSource=&quot;{Binding Movies}&quot;<br> DisplayMemberPath=&quot;Name&quot; /&gt;<br><br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png\"><img data-attachment-id=\"217\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/05/wpf-style-inheritance/demo1/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png\" data-orig-size=\"555,381\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"demo1\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=555\" alt=\"demo1\" src=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png 555w, https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=300 300w\" sizes=\"(max-width: 555px) 100vw, 555px\"></a>The Listbox displaying the movies and showing the name of movie in each item. Now if we want to use ItemContainerStyle property of ListBoxItem to bind some other data, the framework will prefer shortest path to pick style and style that defined in App.xaml will be ignored.</p>\n<pre><code><br>&lt;ListBox ItemsSource=&quot;{Binding Movies}&quot;<br> DisplayMemberPath=&quot;Name&quot;&gt;<br> &lt;ListBox.ItemContainerStyle&gt;<br> &lt;Style TargetType=&quot;ListBoxItem&quot;&gt;<br> &lt;Setter Property=&quot;Opacity&quot;<br> Value=&quot;{Binding Rating}&quot; /&gt;<br> &lt;/Style&gt;<br> &lt;/ListBox.ItemContainerStyle&gt;<br> &lt;/ListBox&gt;<br><br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png\"><img data-attachment-id=\"223\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/05/wpf-style-inheritance/demo2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png\" data-orig-size=\"450,274\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"demo2\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=450\" alt=\"demo2\" src=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png 450w, https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=300 300w\" sizes=\"(max-width: 450px) 100vw, 450px\"></a></p>\n<p>Here I need both the styles I defined in App.xaml and the inline one. WPF provides a way to inherit the style by another one. <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.style.basedon(v=vs.110).aspx\">BasedOn </a>property helps us to achieve this.</p>\n<pre><code><br>&lt;ListBox ItemsSource=&quot;{Binding Movies}&quot;<br> DisplayMemberPath=&quot;Name&quot;&gt;<br> &lt;ListBox.ItemContainerStyle&gt;<br> &lt;Style TargetType=&quot;ListBoxItem&quot;<br> BasedOn=&quot;{StaticResource {x:Type ListBoxItem}}&quot;&gt;<br> &lt;Setter Property=&quot;Opacity&quot;<br> Value=&quot;{Binding Rating}&quot; /&gt;<br> &lt;/Style&gt;<br> &lt;/ListBox.ItemContainerStyle&gt;<br> &lt;/ListBox&gt;<br><br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png\"><img data-attachment-id=\"230\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/05/wpf-style-inheritance/demo3/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png\" data-orig-size=\"555,381\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"demo3\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=555\" alt=\"demo3\" src=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png 555w, https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=300 300w\" sizes=\"(max-width: 555px) 100vw, 555px\"></a>Since the style in App.xaml is implicit style without key, we are specifying the type for BasedOn attribute. Otherwise we have to specify the key of base style.</p>\n\t\t\t",
    "postId": "wpf-style-inheritance"
  },
  {
    "content": "\n\t\t\t\t<p>SQL Lite is the compact database system used by more client applications to manage local data. It is more lightweight and easy to use. This article will explain how to create SQL Lite DB and connect it to a WPF client application. Let&#x2019;s create a simple client app which read employees data from local SQL Lite DB.</p>\n<p>1. SQL Lite Adminstrator tool can be downloaded from the following link. From where we can manage our tables, queries, triggers and stored procedures.</p>\n<p><span id=\"more-6\"></span></p>\n<p><a href=\"http://sqliteadmin.orbmu2k.de/\">http://sqliteadmin.orbmu2k.de/</a></p>\n<p>2. SQL Lite binaries can be downloaded from below link. (The following assemblies compiled against .NET 2.0).</p>\n<p><a title=\"http://sourceforge.net/projects/sqlite-dotnet2/\" href=\"http://sourceforge.net/projects/sqlite-dotnet2/\">http://sourceforge.net/projects/sqlite-dotnet2/</a></p>\n<p>3. Now let&#x2019;s jump into WPF client application. We can go ahead with MVVM pattern. Our application will contain a main view where we can have a DataGrid to list the employees. And we need a viewmodel class which holds the EmployeeCollection property. Also we need a model class class which can store details of Employee</p>\n<p><a href=\"http://lh4.ggpht.com/-PAEDXd1zP8Y/Uhi2bVn-bSI/AAAAAAAABSw/5tD_pZDtFn4/s1600-h/Project%25255B2%25255D.png\"><img title=\"Project\" alt=\"Project\" src=\"https://i1.wp.com/lh6.ggpht.com/-usNi5jEn17Y/Uhi2cZJMB7I/AAAAAAAABS4/UBcOpvaX2o8/Project_thumb.png\" width=\"208\" height=\"244\" border=\"0\"></a></p>\n<p>4. Now lets&#x2019; create the data. Open the SQL Lite Admin tool. Create a new database. (DB.Employee). Run the following query to create a new table (Employee).</p>\n<div><span><span><span>CREATE</span><span>&#xA0;</span><span>TABLE</span><span>&#xA0;</span><span>Employee(</span></span></span><span><br>\n</span><span><span><span>EmployeeID</span><span>&#xA0;</span><span>NUMERIC</span><span>&#xA0;</span><span>PRIMARY</span><span>&#xA0;</span><span>KEY</span><span>,</span></span></span><span><br>\n</span><span><span><span>Name</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>),</span></span></span><span><br>\n</span><span><span><span>Email</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>),</span></span></span><span><br>\n</span><span><span><span>Phone</span><span>&#xA0;</span><span>NVARCHAR</span><span>(</span><span>30</span><span>))</span> ;</span></span></div>\n<div></div>\n<div><a href=\"http://lh3.ggpht.com/-onB4aXG4VX4/Uhi4mrCUyQI/AAAAAAAABTE/RnCmDJb6FVE/s1600-h/Capture%25255B8%25255D.png\"><img title=\"Capture\" alt=\"Capture\" src=\"https://i1.wp.com/lh5.ggpht.com/-VRpjFrDEIA0/Uhi4n8O1Y4I/AAAAAAAABTM/Mnkm6ii2fs4/Capture_thumb%25255B6%25255D.png\" width=\"454\" height=\"230\" border=\"0\"></a></div>\n<div>5. Add a new configuration file to your project to add connection string as below. Since the SQLLite assemblies compiled against 2.0 it will not work under .NET 4.0 environment. To make it compatible, set the attribute useLegacyV2RuntimeActivationPolicy to true. Otherwise it will crash the application.</div>\n<div><span><span><span>&lt;</span><span>connectionStrings</span><span>&gt;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0; </span></span><span><span><span>&lt;</span><span>add</span><span> name</span><span>=&#x201D;SQLiteDb&#x201D;</span><span> connectionString</span><span>=&#x201D;Data Source=AppData/DB.Employee.s3db;Version=3;&#x201D;</span><span>&#xA0;</span></span></span><span><span><span>/&gt;<br>\n&lt;/</span><span>connectionStrings</span><span>&gt;</span></span></span></div>\n<div>6. EmployeeService class will have static methods to query the DB. We are going to use this class from our viewmodel.</div>\n<div><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span><span><span>public</span><span>&#xA0;</span><span>static</span><span>&#xA0;</span><span>string</span><span>&#xA0;</span><span>ConnectionString</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>get</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>return</span><span>&#xA0;</span><span>ConfigurationManager.ConnectionStrings[</span><span>&#x201C;SQLiteDb&#x201D;</span><span>].ConnectionString</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><p></p>\n<p><span><span><span>public</span><span>&#xA0;</span><span>static</span><span>&#xA0;</span><span>List</span><span>&#xA0;</span><span>GetEmployees()</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>var</span><span>&#xA0;</span><span>list</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>List</span><span>()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>string</span><span>&#xA0;</span><span>query</span><span>&#xA0;</span><span>=</span><span> &#x201C;Select * from Employee&#x201D;</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>using</span><span>&#xA0;</span><span>(</span><span>var</span><span>&#xA0;</span><span>connection</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>SQLiteConnection(ConnectionString))</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>using</span><span>&#xA0;</span><span>(</span><span>var</span><span>&#xA0;</span><span>command</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>SQLiteCommand(query,</span><span>&#xA0;</span><span>connection))</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>connection.Open()</span><span>;</span></span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></p>\n<p><span><span><span>SQLiteDataReader</span><span>&#xA0;</span><span>rd</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>command.ExecuteReader()</span><span>;</span></span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></p>\n<p><span><span><span>while</span><span>&#xA0;</span><span>(rd.Read())</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>{</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>var</span><span>&#xA0;</span><span>model</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>new</span><span>&#xA0;</span><span>EmployeeModel()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Name</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>1</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Email</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>2</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>model.Phone</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>rd[</span><span>3</span><span>].ToString()</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>list.Add(model)</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span>}</span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>return</span><span>&#xA0;</span><span>list</span><span>;</span></span></span><span><br>\n<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span><span><span>}</span> </span></span></p></div>\n<div>\n<p>7. On constructor of ViewModel, call the GetEmployees method to populate the collection.</p>\n</div>\n<div><span><span><span>this</span><span>.Employees</span><span>&#xA0;</span><span>=</span><span>&#xA0;</span><span>EmployeeService.GetEmployees()</span><span>;</span></span></span></div>\n<div>8. Set EmployeeViewModel as DataContext for shell window.9. Bind Employees property to DataGrid ItemsSource property.<p></p>\n</div>\n<div><span><span><span>&lt;</span><span>DataGrid</span><span> Margin</span><span>=&#x201D;5&#x2033;</span><span> ItemsSource</span><span>=&#x201D;{Binding Employees}&#x201D;</span></span></span><span><span>/&gt;</span><br>\n</span><br>\n10. Run the application. That&#x2019;s it.Stay tuned for more articles on SQL Lite.<p></p>\n</div>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/SQLLiteDemo.zip\">Download Sample</a></p>\n\t\t\t",
    "postId": "10-steps-to-consume-sqlite-in-wpf"
  },
  {
    "postId": "5-tricks-you-dont-know-in-wpf",
    "content": "\n\t\t\t\t<h1>1. Write C# Code in XAML</h1>\n<p>We all know that XAML is a design language which helps in building user interface. But how many of us know, that, it is possible to write <strong>C# code inside XAML</strong>. This can be achived using <strong>x:Code</strong>. This attribute allows placement of code within a XAML production.</p>\n<p>The code within the x:Code XAML directive element is still interpreted within the general XML namespace and the XAML namespaces provided. Therefore, it is usually necessary to enclose the code used for x:Code inside a <strong>CDATA</strong> segment.</p>\n<p><span id=\"more-502\"></span></p>\n<pre><code>    &lt;Grid&gt;<br>        &lt;Button Content=&quot;Click me&quot;<br>                Click=&quot;Button_Click&quot;/&gt;<br>        &lt;x:Code&gt;<br>            &lt;![CDATA[<br>            private void Button_Click(object sender, RoutedEventArgs e)<br>            {<br>                MessageBox.Show(&quot;hey, I am from XAML&quot;);<br>            }<br>            ]]&gt;<br>        &lt;/x:Code&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<p>Even though XAML has the flexibility to add C# to it, it is not recommended to follow this approach. Because WPF always prefer developers to separate design code and business code as much as possible. Remember why we follow MVVM !!!. Also it does not support intellisense, that will make difficult in write code. In other hand, <em>using</em> directives cannot be declared so we need to use fully qualified names.</p>\n<p><strong>2. LINQ to Visual Tree</strong></p>\n<p>There are various situations where we need to traverse the visual tree and get the element that we are looking for. Traversing a visual tree is not so straight forward. But how about applying LINQ queries over visual objects in WPF. I hope you remember the XML way of traversing. (XElement.Descendants).</p>\n<p><a href=\"http://www.scottlogic.com/blog/ceberhardt/\">Colin Eberhardt</a> written a nice <a href=\"http://www.codeproject.com/Articles/62397/LINQ-to-Tree-A-Generic-Technique-for-Querying-Tree\">article</a> on it.</p>\n<pre><code>// get all the TextBox&apos;s which have a Grid as direct parent<br>var itemsFluent = this.Descendants&amp;amp;lt;TextBox&amp;amp;gt;()<br>                      .Where(i =&amp;amp;gt; i.Ancestors().FirstOrDefault() is Grid);<br><br>var itemsQuery = from v in this.Descendants&amp;amp;lt;TextBox&amp;amp;gt;()<br>                 where v.Ancestors().FirstOrDefault() is Grid<br>                 select v;<br><br>// get all the StackPanels that are within another StackPanel visual tree<br>var items2Fluent = this.Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                       .Descendants&amp;amp;lt;StackPanel&amp;amp;gt;();<br><br>var items2Query = from i in<br>                     (from v in this.Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                      select v).Descendants&amp;amp;lt;StackPanel&amp;amp;gt;()<br>                  select i;<br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png\"><img data-attachment-id=\"512\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/02/5-tricks-you-dont-know-in-wpf/linqtotree/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png\" data-orig-size=\"712,849\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"LINQToTree\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=712\" src=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252&amp;h=300\" alt=\"LINQToTree\" width=\"252\" height=\"300\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=252&amp;h=300 252w, https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=504&amp;h=600 504w, https://wpfplayground.files.wordpress.com/2014/12/linqtotree.png?w=126&amp;h=150 126w\" sizes=\"(max-width: 252px) 100vw, 252px\"></a></p>\n<h1>3. Design Time Attributes</h1>\n<p>Have you ever wonder what is mc:Ignorable=&#x201D;d&#x201D;, which usually declared automatically in your page root element? These namespace provides XAML definitions that will ignored by the XAML processor during run time. This is really helpful for XAML designers, especially who works with Expression Blend.</p>\n<p>The <strong>d:DesignHeight</strong> and <strong>d:DesignWidth</strong> sets a fixed height and width for the element at designtime.</p>\n<pre><code>&lt;UserControl x:Class=&quot;WpfApplication16.UserControl1&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; <br>             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; <br>             mc:Ignorable=&quot;d&quot; <br>             d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot;&gt;<br>    &lt;Grid &gt;<br>            <br>    &lt;/Grid&gt;<br>&lt;/UserControl&gt;<br></code></pre>\n<p>If designers want to work with sample data, it is possible with setting a design time DataContext. This datacontext will not be processed during run time.</p>\n<pre><code>    &lt;Grid&gt;<br>        &lt;Grid.Resources&gt;<br>            &lt;local:ViewModel x:Key=&quot;DesignTimeViewModel&quot; /&gt;<br>        &lt;/Grid.Resources&gt;<br>        &lt;Grid d:DataContext=&quot;{StaticResource DesignTimeViewModel}&quot;&gt;<br>            &lt;TextBlock Text=&quot;test&quot; /&gt;<br>        &lt;/Grid&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<h1>4. IsMouseOver and IsMouseDirectlyOver</h1>\n<p>Some times, we may not even consider the differences between these two properties. Using these properties without understanding it may impact the UI logic. The IsMouseOver property for a user interface element indicates whether the mouse is currently located over the element or any of its children.</p>\n<p>For example, for a Button contained in a StackPanel, when the user moves the mouse over the Button, IsMouseOver will be true for both the Button and the StackPanel. The IsMouseDirectlyOver, on the other hand, indicates whether the mouse is over a control and not over any of its children. So in this case, IsMouseDirectlyOver will be true for Button and false for StackPanel.</p>\n<h1>5. Name and x:Name</h1>\n<p>x:Name is a designer generated variable, used mainly to reference elements. When you give an element the x:Name XAML attribute, &#x201C;the specified x:Name becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.&#x201D;</p>\n<p>Name is the existing string property of a FrameworkElement, listed as any other WPF element property in the form of a XAML attribute. So the control which not inherited from Framework Element cannot use Name attribute. but can use x:Name attribute. So it is always better to use x:Name which covers everything.</p>\n\t\t\t"
  },
  {
    "postId": "5-tricks-you-should-know-in-wpf-part-2",
    "content": "\n\t\t\t\t<h1>1. TextBlock is not just for Text</h1>\n<p>We all know that TextBlock is an UI control, which will carry a piece of text. But actually MSDN explains it in a bit different way.</p>\n<blockquote><p>Provides a lightweight control for displaying small amounts of flow content.</p></blockquote>\n<p>Flow Content !!!, which not means only text. Lets look at the power of TextBlock. TextBlock can carry any UIElement. It may be an image, path or even a button.</p>\n<p><span id=\"more-555\"></span></p>\n<pre><code>&lt;TextBlock&gt;<br>    TextBlock can carry a <br>    &lt;Button Content=&quot;Button&quot;/&gt;<br>    and even a <br>    &lt;CheckBox Content=&quot;CheckBox&quot; IsChecked=&quot;True&quot;/&gt; .<br>    That is awesome. <br>    &lt;Image Source=&quot;smiley.png&quot; /&gt;<br>&lt;/TextBlock&gt;<br></code></pre>\n<p>The above code will give the following output.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png\"><img data-attachment-id=\"559\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/textblock-2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png\" data-orig-size=\"539,187\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"textblock\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=539\" src=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=736\" alt=\"textblock\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png 539w, https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=300 300w\" sizes=\"(max-width: 539px) 100vw, 539px\"></a></p>\n<h1>2. SharedSizeScope</h1>\n<p>Grid is the most flexible panel, where elements can arranged in rows and columns manner. Some situation, there might be multiple grids with same row and column sizing. So if there is any design change (design time or run time), we have to change the size in every grid. But SharedSizeScope feature will provide a flexibility, that multiple grids can share the size information. So if one grid affected by size change in its row/columns, others will get the change automatically.</p>\n<p>Rows and Columns having the same group name will share the size information.</p>\n<pre><code>    &lt;Grid Grid.IsSharedSizeScope=&quot;True&quot;&gt;<br>        &lt;Grid.RowDefinitions&gt;<br>            &lt;RowDefinition /&gt;<br>            &lt;RowDefinition /&gt;<br>        &lt;/Grid.RowDefinitions&gt;<br>        &lt;Grid x:Name=&quot;Grid1&quot; Margin=&quot;10&quot; ShowGridLines=&quot;True&quot;&gt;<br>            &lt;Grid.RowDefinitions&gt;<br>                &lt;RowDefinition Height=&quot;30&quot; SharedSizeGroup=&quot;HeaderRow&quot;/&gt;<br>                &lt;RowDefinition Height=&quot;120&quot; SharedSizeGroup=&quot;ContentRow&quot;/&gt;<br>            &lt;/Grid.RowDefinitions&gt;<br>            &lt;Rectangle Fill=&quot;LightCoral&quot;/&gt;<br>            &lt;Rectangle Fill=&quot;LightBlue&quot;<br>                       Grid.Row=&quot;1&quot;/&gt;<br>        &lt;/Grid&gt;<br>        &lt;Grid x:Name=&quot;Grid2&quot; Margin=&quot;10&quot; ShowGridLines=&quot;True&quot; Grid.Row=&quot;1&quot;&gt;<br>            &lt;Grid.RowDefinitions&gt;<br>                &lt;RowDefinition SharedSizeGroup=&quot;HeaderRow&quot;/&gt;<br>                &lt;RowDefinition SharedSizeGroup=&quot;ContentRow&quot;/&gt;<br>            &lt;/Grid.RowDefinitions&gt;<br>            &lt;Rectangle Fill=&quot;LightCoral&quot; /&gt;<br>            &lt;Rectangle Fill=&quot;LightBlue&quot;<br>                       Grid.Row=&quot;1&quot; /&gt;<br>        &lt;/Grid&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<p>The above code will produce the following output,</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/window.png\"><img data-attachment-id=\"565\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/window/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png\" data-orig-size=\"457,382\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"window\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=457\" src=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300&amp;h=251\" alt=\"window\" width=\"300\" height=\"251\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300&amp;h=251 300w, https://wpfplayground.files.wordpress.com/2014/12/window.png?w=150&amp;h=125 150w, https://wpfplayground.files.wordpress.com/2014/12/window.png 457w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><br>\n<strong>Note</strong> : SharedSizeScope will not work for Star Sizing. Star will be considered as auto.</p>\n<h1>3. x:References in XAML</h1>\n<p>The markup will directly refer an instance which is declared elsewhere in the XAML. the reference will be identified by the x:Name.</p>\n<pre><code>&lt;StackPanel&gt;<br>    &lt;Label Content=&quot;_Name&quot; Target=&quot;{x:Reference txtName}&quot;/&gt;<br>    &lt;TextBox x:Name=&quot;txtName&quot;/&gt;<br>&lt;/StackPanel&gt;<br></code></pre>\n<p>In the above code, the TextBox with name txtName will become the target of the Label. This can also be achieved using ElementName binding as below,</p>\n<pre><code>&lt;StackPanel&gt;<br>    &lt;Label Content=&quot;_Name&quot; Target=&quot;{Binding ElementName=txtName}&quot;/&gt;<br>    &lt;TextBox x:Name=&quot;txtName&quot;/&gt;<br>&lt;/StackPanel&gt;<br></code></pre>\n<p><strong>Note</strong> : Anybody confused about Target property of Label? No Problem !!! The property referes to the element which will get focus, when user presses the label&#x2019;s access key. Here the access key is &#x201C;N&#x201D;.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/label.png\"><img data-attachment-id=\"571\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/label/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png\" data-orig-size=\"265,93\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"Label\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=265\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=265\" src=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=736\" alt=\"Label\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/label.png 265w, https://wpfplayground.files.wordpress.com/2014/12/label.png?w=150 150w\" sizes=\"(max-width: 265px) 100vw, 265px\"></a></p>\n<h1>4. FallBackValue and TargetNullValue</h1>\n<p>When the binding is unable to return a valid value, Fallback value will be used as the result. A binding can fail for following reasons,</p>\n<p>1. The path to the binding not resolved.<br>\n2. The Value Converter (if any), not able to convert the value.<br>\n3. The resulting value is not valid for target property.</p>\n<p>Whenever the binding fails, <strong>DependencyProperty.UnsetValue</strong> will be return as the result. Fallback value will replace the UnsetValue. The following code will show &#x201C;Name cannot be shown&#x201D;, if binding fails.</p>\n<pre><code>&lt;TextBlock Text=&quot;{Binding Name, FallbackValue=&apos;Name cannot be shown&apos;}&quot;/&gt;<br></code></pre>\n<p>TargetNullValue will be considered when the source value is <strong>NULL</strong>. The below code will show &#x201C;Name cannot be show&#x201D;, when the Name property is NULL.</p>\n<pre><code>&lt;TextBlock Text=&quot;{Binding Name, TargetNullValue=&apos;Name cannot be shown&apos;}&quot;/&gt;<br></code></pre>\n<h1>5. Priority Binding</h1>\n<p>PriorityBinding works with list of Bindings. The value of the property will be resolved in priority basis. If the highest priority binding returns the value successfully, the other bindings will not be processed. If the highest priority binding took time to resolve the value, then the second highest priority binding will be processed and return the value until the highest priority binding done resolving the value.</p>\n<pre><code>  &lt;TextBlock&gt;<br>    &lt;TextBlock.Text&gt;<br>      &lt;PriorityBinding FallbackValue=&quot;defaultvalue&quot;&gt;<br>        &lt;Binding Path=&quot;SlowestValue&quot; IsAsync=&quot;True&quot;/&gt;<br>        &lt;Binding Path=&quot;SlowerValue&quot; IsAsync=&quot;True&quot;/&gt;<br>        &lt;Binding Path=&quot;FastValue&quot; /&gt;<br>      &lt;/PriorityBinding&gt;<br>    &lt;/TextBlock.Text&gt;<br>  &lt;/TextBlock&gt;<br></code></pre>\n<p>When the binding engine processes the Binding objects, it starts with the first Binding, which is bound to the SlowestValue property. When this Binding is processed, it does not return a value successfully if it going to take long time, so the next Binding element is processed. The next Binding does not return a value successfully if that going to take a few time. The binding engine then moves onto the next Binding element, which is bound to the FastValue property. This Binding returns the value &#x201C;Fast Value&#x201D;. The TextBlock now displays the value &#x201C;Fast Value&#x201D;.</p>\n\t\t\t"
  },
  {
    "postId": "accentbrush-for-wpf-metro-theme",
    "content": "\n\t\t\t\t<p><a href=\"http://mahapps.com/MahApps.Metro/\" target=\"_blank\">Mah Apps</a> provide a very easy way to style any WPF applications with Metro theme. They provided 22 different accent colours and two themes dark and light. Just by merging the resources in App.Resources, your app will look pretty much like Metro app.</p>\n<pre><code>&lt;ResourceDictionary&gt;<br> &lt;ResourceDictionary.MergedDictionaries&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml&quot; /&gt;<br> &lt;ResourceDictionary Source=&quot;pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml&quot; /&gt;<br> &lt;/ResourceDictionary.MergedDictionaries&gt;<br> &lt;/ResourceDictionary&gt;<br></code></pre>\n<p>Theme and accent brush can be dynamically switched by using following code.</p>\n<p><span id=\"more-4\"></span></p>\n<pre><code><br>public&#xA0;MainWindow()<br>{<br>       ThemeManager.ChangeTheme(App.Current,&#xA0;ThemeManager.DefaultAccents[0],&#xA0;Theme.Light);<br>       InitializeComponent();<br>}<br><br></code></pre>\n<div><span>When changing theme, the accent brush of all default controls will change and make your app more pretty. But some scenarios, we may want to colorize our app with our own colour like background gradient, etc. There is a way to make our own colour match with Metro accent. I have attached a sample, where on changing theme, in addition to controls, my own path icons (taken from </span><a href=\"http://www.syncfusion.com/downloads/metrostudio\" target=\"_blank\">Metro Studio</a><span>) will also change the colour.</span></div>\n<p>This can be achieved by using the &#x201C;AccentColorBrush&#x201D; as a dynamic resource.</p>\n<pre><code><br> &lt;Path Stretch=&quot;Uniform&quot;<br> Fill=&quot;{DynamicResource AccentColorBrush}&quot;<br> Width=&quot;50&quot;<br> Height=&quot;50&quot;<br> Margin=&quot;10&quot; /&gt;<br><br></code></pre>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/MetroSample.zip\" target=\"_blank\">Download Sample here</a></p>\n<p>Happy theming&#x2026; &#x1F642;</p>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<p>One of the powerful concept of WPF is Attached Properties. The primary purpose of attached property is to define a unique value to child elements for a property, which is defined in Parent element as <a href=\"http://msdn.microsoft.com/en-IN/library/ms749011(v=vs.110).aspx\">MSDN </a>suggests. Some of the typical examples are Grid.Row, DockPanel.Dock, etc.</p>\n<p>But it can also be used to attach additional information to an object, like Extension methods in C#. Examples are allowing an object to be draggable using Mouse, play music on some action, etc.&#xA0;I will take a simple piece of functionality to explain this. Lets consider, we need to <strong>focus a control on loaded</strong>.</p>\n<p><span id=\"more-588\"></span></p>\n<p><strong>Using Attached Property</strong></p>\n<pre><code>    public static class FocusOnLoad<br>    {<br>        public static bool GetCanFocusOnLoad(DependencyObject obj)<br>        {<br>            return (bool)obj.GetValue(CanFocusOnLoadProperty);<br>        }<br><br>        public static void SetCanFocusOnLoad(DependencyObject obj, bool value)<br>        {<br>            obj.SetValue(CanFocusOnLoadProperty, value);<br>        }<br><br>        // Using a DependencyProperty as the backing store for CanFocusOnLoad.  This enables animation, styling, binding, etc...<br>        public static readonly DependencyProperty CanFocusOnLoadProperty =<br>            DependencyProperty.RegisterAttached(&quot;CanFocusOnLoad&quot;, typeof(bool), typeof(FocusOnLoad), new PropertyMetadata(FocusOnLoadChanged));<br><br>        private static void FocusOnLoadChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)<br>        {<br>            var element = d as FrameworkElement;<br>            if (element != null)<br>            {<br>                element.Loaded += delegate<br>                {<br>                    element.Focus();<br>                };<br>            }<br>        }<br>    }<br></code></pre>\n<p><strong>Usage in XAML</strong></p>\n<pre><code>    &lt;TextBox behaviors:FocusOnLoad.CanFocusOnLoad=&quot;True&quot;<br>             VerticalAlignment=&quot;Center&quot;<br>             Width=&quot;200&quot;/&gt;<br></code></pre>\n<p>To make the work more systematic, Microsoft came up with an option called <a href=\"http://wpftutorial.net/Behaviors.html\">Behaviors</a>. It offers more encapsulated way to extend functionality. There are some <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/dn195718(v=vs.110).aspx\">built-in behaviors</a>&#xA0;shipped as part of Blend. Following code implements the same functionality using Behaviors.</p>\n<p><strong>Using Behaviors</strong></p>\n<pre><code>    public class FocusOnLoadBehavior : Behavior&lt;FrameworkElement&gt;<br>    {<br>        protected override void OnAttached()<br>        {<br>            this.AssociatedObject.Loaded += this.OnLoaded;<br>        }<br><br>        protected override void OnDetaching()<br>        {<br>            this.AssociatedObject.Loaded -= this.OnLoaded;<br>        }<br><br>        private void OnLoaded(object sender, System.Windows.RoutedEventArgs e)<br>        {<br>            this.AssociatedObject.Focus();<br>        }<br>    }<br></code></pre>\n<p><strong>Usage in XAML</strong></p>\n<pre><code>    &lt;TextBox behaviors:FocusOnLoad.CanFocusOnLoad=&quot;True&quot;<br>                VerticalAlignment=&quot;Center&quot;<br>                Width=&quot;200&quot;&gt;<br>        &lt;i:Interaction.Behaviors&gt;<br>            &lt;behaviors:FocusOnLoadBehavior /&gt;<br>        &lt;/i:Interaction.Behaviors&gt;<br>    &lt;/TextBox&gt;<br></code></pre>\n<p>There are some advantages and dis-advantages in both approach. Let me put it down to make the decision easier.</p>\n<h1><strong>1. Event Handlers</strong></h1>\n<p>Both scenario need an event subscription to the Control.Loaded event. In attached properties it is an ugly code, where we need to write extra plumbing to release those handlers. But behaviors offer a clean way to release event handlers &#x2013; <strong><em>OnAttached and OnDetaching</em></strong>. If the functionality dealing with more event handling mechanisms, Behaviors are the best way.</p>\n<h1>2.&#xA0;Configuration in Style</h1>\n<p>For example, if you want to attach this piece of functionality to all the TextBoxes in your application, a global style would be the best option. But&#xA0;attached properties can be set in Style, where Behaviors cannot. This is also an important factor need to be considered before taking decision.</p>\n<pre><code>&lt;Style TargetType=&quot;TextBox&quot;&gt;<br>    &lt;Setter Property=&quot;behaviors:FocusOnLoad.CanFocusOnLoad&quot;<br>            Value=&quot;True&quot; /&gt;<br>&lt;/Style&gt;<br></code></pre>\n<p><strong>3. Casting</strong></p>\n<p>The <strong>PropertyChanged</strong> callback will give you the dependency object. This is the element in XAML, where we set the property. But to access some property or to invoke a method we need to <strong>cast</strong> it to UIElement or FrameworkElement. But in Behavior, it is possible to mention the datatype &#x2013;&#xA0;<strong>Behavior&lt;T&gt;</strong>. So no more casting.&#xA0;Using <strong>AssociateObject</strong> all the members of the type can be accessed. In above case, I mentioned it as <strong>FrameworkElement</strong>, since the Loaded event coming from that.</p>\n<h1>4. Visual Designer</h1>\n<p>Behaviors can be drag and drop into particular object using Blend, where Attached properties are not.You can drag and drop behavior objects on other behavior objects to set up a hierarchy, and you can set properties on objects already in the designer through the properties window.</p>\n<p>Hope this will&#xA0;shed some light on choosing a right option. &#x1F642;</p>\n\t\t\t",
    "postId": "attached-properties-vs-behaviors"
  },
  {
    "postId": "awaitable-storyboard-in-wpf",
    "content": "\n\t\t\t\t<p>Normally when&#xA0;a storyboard is running, setting the FillBehavior (<a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.animation.timeline.fillbehavior(v=vs.110).aspx\" target=\"_blank\">Learn more about FillBehavior</a>) to <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.animation.fillbehavior(v=vs.110).aspx\">HoldEnd </a>is risk. Because&#xA0;for a dependency property, storyboard is considered to have highest priority of setting the value. So once storyboard is done, user cannot change its value locally. So users prefer the set the FillBehavior to Stop and change the target value once storyboard is done. So there must be always a need to do something once animation is done. Fortunately, storyboard provided an event called <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.animation.timeline.completed(v=vs.110).aspx\">Completed </a>where we can write our own logic.</p>\n<p>But once<a href=\"http://msdn.microsoft.com/en-in/library/hh191443.aspx\"> <em>async</em> and <em>await</em></a> released to get rid off these callback approach, why can&#x2019;t we make our storyboard an awaitable one. Let the storyboard Begin method wait until the animation completed, before it executed the next line.</p>\n<p><span id=\"more-404\"></span></p>\n<pre><code>        public static Task BeginAsync(this Storyboard timeline)<br>        {<br>            TaskCompletionSource&lt;object&gt; source = new TaskCompletionSource&lt;object&gt;();<br>            timeline.Completed += delegate<br>            {<br>                source.SetResult(null);<br>            };<br>            timeline.Begin();<br>            return source.Task;<br>        }<br></code></pre>\n<p>This is how we will be using it in our application,</p>\n<pre><code>        private async void MainWindow_Loaded(object sender, RoutedEventArgs e)<br>        {<br>            Storyboard animation = (Storyboard)this.Resources[&quot;HideAnimation&quot;];<br>            if (animation != null)<br>            {<br>                await animation.BeginAsync();<br>                MessageBox.Show(&quot;Animation completed&quot;);<br>            }<br>        }<br></code></pre>\n<p><strong>Note</strong> : It is always not recommended to use async void except UI event handlers.</p>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<p>Populating the WPF ComboBox with System Font Families is so easy and can be done in XAML without code behind.</p>\n<pre><code>&lt;ComboBox&#xA0;x:Name=&quot;fonts&quot;&#xA0;<br>          Width=&quot;200&quot;&#xA0;<br>          ItemsSource=&quot;{Binding&#xA0;Source={x:Static&#xA0;Member=Fonts.SystemFontFamilies}}&quot;&#xA0;/&gt;<br></code></pre>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/513d3-sshot-10.png\"><img src=\"https://wpfplayground.files.wordpress.com/2012/05/513d3-sshot-10.png?w=736\" alt border=\"0\"></a></div>\n<pre><code>Also to show each Font Item with its own corresponding Font Family, just modifying the Item template will make the magic.</code></pre>\n<pre><code>&lt;ComboBox.ItemTemplate&gt;<br>&#xA0;&#xA0;&#xA0;&lt;DataTemplate&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;TextBlock&#xA0;Text=&quot;{Binding}&quot;&#xA0;FontFamily=&quot;{Binding}&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/DataTemplate&gt;<br>&lt;/ComboBox.ItemTemplate&gt;<br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2012/05/ee31a-sshot-11.png\"><img src=\"https://wpfplayground.files.wordpress.com/2012/05/ee31a-sshot-11.png?w=736\" alt border=\"0\"><br>\n</a>Happy coding&#x2026;</p>\n</div>\n\t\t\t",
    "postId": "bind-system-font-families-to-combo-box-in-xaml"
  },
  {
    "postId": "building-a-deployable-custom-control-for-xaml-metro-style-apps",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<p>Tim Heuer wrote a very nice article about deployment of custom control for WinRT.</p>\n<p>At //build one of the surprising immediate things I heard about was folks wanting to build custom controls right away. &#xA0;I knew that would happen, but not so quick on something so new (WinRT). &#xA0;The XAML platform did not have good support for building custom controls in the Developer Preview but now that the Consumer Preview for Windows 8 and Visual Studio 11 Beta are out, there is much better support. &#xA0;There are two key things when thinking about custom controls: 1) building it and 2) making it consumable by developers (even if those developers are your own company). &#xA0;I&#x2019;ll try to articulate the methods of both here. <a href=\"http://timheuer.com/blog/archive/2012/03/07/creating-custom-controls-for-metro-style-apps.aspx\" target=\"_blank\">(Read more&#x2026;)</a></p>\n</div>\n\t\t\t"
  },
  {
    "postId": "c-text-processing-function-library",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><b><span>String Functions in C#.NET</span></b></div>\n<div></div>\n<div><span>C#.NET comes with a lot of great string processing functions like </span><span>Substring</span><span>, </span><span>Compare</span><span>, </span><span>IndexOf</span><span>. But the truth is the built-in .NET string functions are very limited. Programmers constantly have to rewrite similar text processing functions over and over.</span></div>\n<div><span>Luckily we can expand on them and create all kinds of <b>C# advanced string functions</b>. As for a matter of speed, there are is one thing to consider: </span><span>String</span><span> vs </span><span>StringBuilder</span></div>\n<div></div>\n<div><b><span>.NET &#x2013; String vs StringBuilder</span></b></div>\n<div></div>\n<div><span>Appending text to a string object is done in this fashion:</span></div>\n<div></div>\n<div>\n<div><span>stringObject += </span><span>&#x201C;more text&#x201D;</span><span>;</span></div>\n</div>\n<div></div>\n<div><span>Concating strings like that is very fast and reliable when it is done for a small amount of C# strings. In fact it can be significantly simpler and faster than using the </span><span>StringBuilder</span><span> class.</span></div>\n<div><span>The </span><span>StringBuilder</span><span> class on the other hand is excellent for processing text for a lot of iterations since it avoids creating new instances of a string each time the output string is modified. To add a string to a </span><span>StringBuilder</span><span> goes like this:</span></div>\n<div></div>\n<div>\n<div><span>stringBuilderObject.Append(</span><span>&#x201C;more text&#x201D;</span><span>);</span></div>\n</div>\n<div></div>\n<div><span>The downside to the </span><span>StringBuilder</span><span> is the overhead of initializing a class. However if we are going to need to create some C# functions that will processes large amounts of text, then StringBuilder saves processing time in the long run.</span></div>\n<div><span>In the <b>C# String Processing Library</b> functions are divided into two sections, the </span><span>StringProcessing</span><span> and the </span><span>StringBuilderProcess</span><span> classes, so you can run whichever one is more fitting.</span></div>\n<div></div>\n<div><b><span>Advanced Csharp String Functions</span></b></div>\n<div></div>\n<table border=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td width=\"50%\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><span>Capitalize</span></div>\n<div></div>\n<div><span>This C# function takes the first letter of a string an capitalizes it:<br>word -&gt; Word<br>this is a sentence -&gt; This is a sentence</span></div>\n<div></div>\n<div><span>IsCapitalized</span></div>\n<div></div>\n<div><span>This C# function checks to see if the first letter of a string is capitalized:<br>Word -&gt; True<br>word -&gt; False</span></div>\n<div></div>\n<div><span>IsLowerCase</span></div>\n<div></div>\n<div><span>Checks to see that an entire string is in lower cases<br>word -&gt; True<br>Word -&gt; False</span></div>\n<div></div>\n<div><span>IsUpperCase</span></div>\n<div></div>\n<div><span>Checks to see that an entire string is in upper cases<br>Word -&gt; False<br>WORD -&gt; True</span></div>\n<div></div>\n<div><span>SwapCases</span></div>\n<div></div>\n<div><span>This C# function swaps the cases of a string<br>word -&gt; WORD<br>Word -&gt; wORD</span></div>\n<div></div>\n<div><span>AlternateCases</span></div>\n<div></div>\n<div><span>Takes the first character&#x2019;s casing an alternates the casing of the rest of the string<br>Hi -&gt; Hi<br>helloworld -&gt; hElLoWoRlD</span></div>\n<div></div>\n<div><span>AlternateCases</span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></div>\n<div></div>\n<div><span>This C# string function works exactly the same except the user specifies on which case the string will start (Upper case or Lower case)</span></div>\n<div></div>\n<div><span>IsAlternateCases</span></div>\n<div></div>\n<div><span>Checks to see whether a string has alternating cases</span></div>\n<div></div>\n<div><span>CountTotal</span></div>\n<div></div>\n<div><span>Counts the total number of occurances of a string within another string<br>hello, l -&gt; 2<br>hello, el -&gt; 1</span></div>\n<div></div>\n<div><span>RemoveVowels</span></div>\n<div></div>\n<div><span>This C# string function removes the vowels in a string<br>hello -&gt; hll</span></div>\n<div></div>\n<div><span>KeepVowels</span></div>\n<div></div>\n<div><span>This C# string function removes everything but the vowels in a string<br>hello -&gt; eo</span></div>\n<div></div>\n<div><span>HasVowels</span></div>\n<div></div>\n<div><span>Checks to see if there is any vowel psent in a string</span></div>\n<div></div>\n<div><span>IsSpaces</span></div>\n<div></div>\n<div><span>Quickly and effortlessly checks to see if a string is nothing but spaces</span></div>\n<div></div>\n<div><span>IsRepeatedChar</span></div>\n<div></div>\n<div><span>Quickly and effortlessly checks to see if a string is nothing but the same letter repeated<br>aaaaaaaaaa -&gt; True<br>aaaaaaaaad -&gt; False</span></div>\n<div></div>\n<div><span>IsNumeric</span></div>\n<div></div>\n<div><span>Processes a string to see if it contains only numbers</span></div>\n<div></div>\n<div><span>HasNumbers</span></div>\n<div></div>\n<div><span>Checks a string to see if it contains any numbers.</span></div>\n<div></div>\n<div><span>IsAlphaNumberic</span></div>\n<div></div>\n<div><span>This C# function evaluates whether a string contains only numbers and letters (no symbols).</span></div>\n<div></div>\n<div><span>isLetters</span></div>\n<div></div>\n<div><span>Checks for a string to contain nothing but letters, no numbers or symbols.</span></div>\n<div></div>\n<div><span>GetInitials</span></div>\n<div></div>\n<div><span>Converts a string, like a name, into its initials<br>Bob Landon -&gt; B.L.</span></div>\n<div></div>\n<div><span>GetTitle</span></div>\n<div></div>\n<div><span>Capitalizes the first letter of every word in a string<br>the good story -&gt; The Good Story</span></div>\n<div></div>\n<div><span>GetNameCasing</span></div>\n<div></div>\n<div><span>Similar to the GetTitle function, capitalizes the first letter of every word, but has some additional rules for names<br>mcdonald -&gt; McDonald<br>macdonald -&gt; MacDonald<br>Credits to ShutlOrbit&#xA0;</span></div>\n<div><span>(<a href=\"http://www.thirdstagesoftware.com/\" target=\"_blank\"><span>http://www.thirdstagesoftware.com</span></a>) from <a href=\"http://www.codeproject.com/\" target=\"_blank\"><span>CodeProject</span></a></span></div>\n<div></div>\n<div><span>IsTitle</span></div>\n<div></div>\n<div><span>This C# string function checks if the first letter of every word is capitalized<br>The Big Story -&gt; True<br>The big story -&gt; False</span></div>\n<div></div>\n<div><span>IsEmailAddress</span></div>\n<div></div>\n<div><span>Verifies that an email address is written in the correct format. Useful for checking email addressed entered in a web application.</span></div>\n<div></div>\n<div><span>IndexOfAll</span></div>\n<div></div>\n<div><span>This very useful C# function returns all the indicies of a string in another string. As opposed to IndexOf which only returns the first index.</span></div>\n<div></div>\n<div><span>ArrayToString</span></div>\n<div></div>\n<div><span>This C# string function is a must for all developers. Quickly turns any array into a single string that can be displayed to survey an array&#x2019;s data. Check out a more complete <a href=\"http://www.vcskicks.com/array-to-string.php\" target=\"_blank\"><span>array to string function</span></a> right here on Visual C# Kicks.</span></div>\n<div><span>PasswordStrength</span></div>\n<div></div>\n<div><span>Evaluate the effectiveness of a string as a password. Original idea credits go to D. Rijmenants. (If there are any copyright issues please contact us).</span></div>\n<div></div>\n<div><span>CharRight</span></div>\n<div></div>\n<div><span>Basically a Substring function that works backwards. Programmers from older languages will appciate this missing C# function.</span></div>\n<div></div>\n<div><span>CharMid</span></div>\n<div></div>\n<div><span>Another function that is missing from the original C# Net string processing list. Works like Substring but starts from a specified position.</span></div>\n<div></div>\n<div><span>InsertSeparator</span></div>\n<div></div>\n<div><span>Inserts a separator after each letter in a string, excluding the last letter<br>hello, &#x2013; -&gt; h-e-l-l-o</span></div>\n<div></div>\n<div><span>InsertSeparatorEvery</span></div>\n<div></div>\n<div><span>Inserts a separator after a specified number of letters, excluding the last letter</span></div>\n<div></div>\n<div><span>SubstringEnd</span></div>\n<div></div>\n<div><span>This C# function works exactly like the built-in Substring. The only difference is it takes in a Start and End parameter instead of the default Start and Length. (Basically the Java version of Substring)</span></div>\n<div></div>\n<div><span>Reverse</span></div>\n<div></div>\n<div><span>Reverses a string without the need for a recursive function.</span></div>\n<div></div>\n<div><span>SplitQuotes</span></div>\n<div></div>\n<div><span>This C# function works like the built-in Split function. The only difference is it will respect parts of a string surrounded by quotes. For example the string </span><span>This is a &#x201C;very long&#x201D; string</span><span> would get split into: <br></span><span>This<br>is<br>a<br>very long<br>string</span><span><br>Careful however, the function does not work with nested quotes.</span></div>\n</td>\n<td valign=\"top\" width=\"50%\"></td>\n</tr>\n</tbody>\n</table>\n<div></div>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">Capturing screen shot in Windows Forms is&#xA0;straight&#xA0;forward. But in WPF, we need some Pinvoke calls. We going to use the methods from User32.dll and gdi32.dll. For more reference about available methods in User32.dll, go through <a href=\"http://wpfplayground.blogspot.in/2011/09/digging-into-user32dll.html\" target=\"_blank\">here</a>.<p></p>\n<p></p>\n<pre><code>&#xA0;public&#xA0;class&#xA0;InteropHelper<br>&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;GetDesktopWindow();<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd144871(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;GetDC(IntPtr&#xA0;hwnd);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183370(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[return:&#xA0;MarshalAs(UnmanagedType.Bool)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;BitBlt(IntPtr&#xA0;hDestDC,&#xA0;int&#xA0;x,&#xA0;int&#xA0;y,&#xA0;int&#xA0;nWidth,&#xA0;int&#xA0;nHeight,&#xA0;IntPtr&#xA0;hSrcDC,&#xA0;int&#xA0;xSrc,&#xA0;int&#xA0;ySrc,&#xA0;Int32&#xA0;dwRop);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183488(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;CreateCompatibleBitmap(IntPtr&#xA0;hdc,&#xA0;int&#xA0;nWidth,&#xA0;int&#xA0;nHeight);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183489(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;,&#xA0;SetLastError&#xA0;=&#xA0;true)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;CreateCompatibleDC(IntPtr&#xA0;hdc);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd162957(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;,&#xA0;ExactSpelling&#xA0;=&#xA0;true,&#xA0;PreserveSig&#xA0;=&#xA0;true,&#xA0;SetLastError&#xA0;=&#xA0;true)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;SelectObject(IntPtr&#xA0;hdc,&#xA0;IntPtr&#xA0;hgdiobj);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183539(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;DeleteObject(IntPtr&#xA0;hObject);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd162920(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;int&#xA0;ReleaseDC(IntPtr&#xA0;hwnd,&#xA0;IntPtr&#xA0;dc);<br></code></pre>\n<pre><code></code></pre>\n<pre><code>}</code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<div>To get a copy of desktop screen, first we need to get the bitmap source from the desktop. Use the pinvoke methods in following way.</div>\n<pre><code></code></pre>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;BitmapSource&#xA0;CaptureRegion(IntPtr&#xA0;hWnd,&#xA0;int&#xA0;x,&#xA0;int&#xA0;y,&#xA0;int&#xA0;width,&#xA0;int&#xA0;height)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;sourceDC&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;targetDC&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;compatibleBitmapHandle&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BitmapSource&#xA0;bitmap&#xA0;=&#xA0;null;<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;try<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gets&#xA0;the&#xA0;main&#xA0;desktop&#xA0;and&#xA0;all&#xA0;open&#xA0;windows<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sourceDC&#xA0;=&#xA0;InteropHelper.GetDC(InteropHelper.GetDesktopWindow());<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//sourceDC&#xA0;=&#xA0;User32.GetDC(hWnd);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;targetDC&#xA0;=&#xA0;InteropHelper.CreateCompatibleDC(sourceDC);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;a&#xA0;bitmap&#xA0;compatible&#xA0;with&#xA0;our&#xA0;target&#xA0;DC<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;compatibleBitmapHandle&#xA0;=&#xA0;InteropHelper.CreateCompatibleBitmap(sourceDC,&#xA0;width,&#xA0;height);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gets&#xA0;the&#xA0;bitmap&#xA0;into&#xA0;the&#xA0;target&#xA0;device&#xA0;context<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.SelectObject(targetDC,&#xA0;compatibleBitmapHandle);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;from&#xA0;source&#xA0;to&#xA0;destination<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.BitBlt(targetDC,&#xA0;0,&#xA0;0,&#xA0;width,&#xA0;height,&#xA0;sourceDC,&#xA0;x,&#xA0;y,&#xA0;InteropHelper.SRCCOPY);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Here&apos;s&#xA0;the&#xA0;WPF&#xA0;glue&#xA0;to&#xA0;make&#xA0;it&#xA0;all&#xA0;work.&#xA0;It&#xA0;converts&#xA0;from&#xA0;an<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;hBitmap&#xA0;to&#xA0;a&#xA0;BitmapSource.&#xA0;Love&#xA0;the&#xA0;WPF&#xA0;interop&#xA0;functions<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bitmap&#xA0;=&#xA0;System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;compatibleBitmapHandle,&#xA0;IntPtr.Zero,&#xA0;Int32Rect.Empty,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BitmapSizeOptions.FromEmptyOptions());<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;catch&#xA0;(Exception&#xA0;ex)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;finally<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DeleteObject(compatibleBitmapHandle);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ReleaseDC(IntPtr.Zero,&#xA0;sourceDC);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ReleaseDC(IntPtr.Zero,&#xA0;targetDC);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;bitmap;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br><br>For more information on pinvoke methods, this will help.<br></code></pre></div>\n\t\t\t",
    "postId": "capture-screenshot-in-wpf"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">It is very obvious that we can change the cursor in WPF using FrameworkElement.Cursor. But the trick is, it only works within your application and not outside your application Main Window. In case if you want to change the cursor for the entire OS, we&#xA0;don&#x2019;t&#xA0;have any direct way in WPF. But most of the developers worried why we need to change the entire Windows cursor. But take an example, if we are developing an eye dropper control in WPF (used to pick color). Not like the one in Illustrator or Photoshop (cannot pick color outside the application), but the one we have in Expression Blend or Visual Studio designer (can pick color even outside the application also).<p></p>\n<p>In that cases, the cursor should be changed, because arrow cursor will not be a comfortable one to pick color. Normally cursor values resides in registry.</p>\n<p><b>Registry Key :&#xA0;</b>HKEY_CURRENT_USER\\Control Panel\\Cursors</p>\n<p>Changing the values here will change the cursor, but your system needs a reboot to take effect (I can understand, none of the developers will accept this). To avoid that and make your app. taking immediate effect, you need to invoke a pinvoke call.</p>\n<p>The following method will refresh the cursor &#xA0;values,</p>\n<p></p>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;,&#xA0;EntryPoint&#xA0;=&#xA0;&quot;SystemParametersInfo&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;SystemParametersInfo(int&#xA0;uAction,&#xA0;int&#xA0;uParam,&#xA0;string&#xA0;lpvParam,&#xA0;int&#xA0;fuWinIni);&#xA0;<br></code></pre>\n<p>Iterate through registry values and change the cursor path.</p>\n<p></p>\n<pre><code>        private&#xA0;void&#xA0;ChangeCursor()<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RegistryKey&#xA0;pRegKey&#xA0;=&#xA0;Registry.CurrentUser;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;pRegKey&#xA0;=&#xA0;pRegKey.OpenSubKey(@&quot;Control&#xA0;Panel\\Cursors&quot;);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;paths.Clear();<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;foreach&#xA0;(var&#xA0;key&#xA0;in&#xA0;pRegKey.GetValueNames())<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Object&#xA0;_key&#xA0;=&#xA0;pRegKey.GetValue(key);</code></pre>\n<pre><code>                //Take&#xA0;a&#xA0;backup.<br><br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;paths.Add(key,&#xA0;_key.ToString()); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Object&#xA0;val&#xA0;=&#xA0;Registry.GetValue(@&quot;HKEY_CURRENT_USER\\Control&#xA0;Panel\\Cursors&quot;,&#xA0;key,&#xA0;null); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control&#xA0;Panel\\Cursors&quot;,&#xA0;key,&#xA0;&quot;foo.cur&quot;); &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;} &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;SystemParametersInfo(InteropHelper.SPI_SETCURSORS,&#xA0;0,&#xA0;null,&#xA0;InteropHelper.SPIF_UPDATEINIFILE&#xA0;|&#xA0;InteropHelper.SPIF_SENDCHANGE);&#xA0;&#xA0; &#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>Make sure you store the registry values before change it, so that you can restore the cursor to the default values.<br>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0;&#xA0;private&#xA0;void&#xA0;ResetCursorToDefault()<br>&#xA0; &#xA0; &#xA0; &#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RegistryKey&#xA0;pRegKey&#xA0;=&#xA0;Registry.CurrentUser;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;pRegKey&#xA0;=&#xA0;pRegKey.OpenSubKey(@&quot;Control&#xA0;Panel\\Cursors&quot;);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;foreach&#xA0;(string&#xA0;key&#xA0;in&#xA0;paths.Keys)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;string&#xA0;path&#xA0;=&#xA0;paths[key];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control&#xA0;Panel\\Cursors&quot;,&#xA0;key,&#xA0;path);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.SystemParametersInfo(InteropHelper.SPI_SETCURSORS,&#xA0;0,&#xA0;null,&#xA0;InteropHelper.SPIF_UPDATEINIFILE&#xA0;|&#xA0;InteropHelper.SPIF_SENDCHANGE);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br><br><br>The InteropHelper class has been posted in this article.<br></code></pre></div>\n\t\t\t",
    "postId": "change-windows-cursor-globally-in-wpf"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\"><p></p>\n<h2>Introduction&#xA0;<span>&#xA0;&#xA0;</span></h2>\n<div><span><a href=\"http://www.codeproject.com/Articles/396811/Character-Map-in-WPF\" target=\"_blank\">(View this article in code project)</a></span></div>\n<div></div>\n<div>The&#xA0;<strong>Character Map</strong>&#xA0;utility is free on all Windows machines and can be used to copy and paste accented letters and other foreign language characters into any Windows application. The&#xA0;<em>Character Map</em>&#xA0;is similar to the<em>&#xA0;Insert Symbol</em>&#xA0;tool found in some Windows applications such as&#xA0;<em>Microsoft Word</em>.</div>\n<div>This article explains how to implement this tool using WPF with great performance. This tool can be easily integrated into any of your WPF applications easily.&#xA0;&#xA0;</div>\n<div><img src=\"https://i1.wp.com/www.codeproject.com/KB/WPF/396811/character_map.gif\"></div>\n<h2>Using the code&#xA0;</h2>\n<div>When I was start thinking about implementing this in WPF, I realized the main challenge would be the performance. But the native character map in Windows is really faster and will give a nice user experience.&#xA0;So I am sure this article will be valid only if this tool would also give the same experience.&#xA0;</div>\n<h3><span>Getting the symbols&#xA0;&#xA0;</span></h3>\n<div>Let me first start with getting the symbols from Font files. Populating a&#xA0;<code>ComboBox&#xA0;</code>with installed Font families is not a big deal in WPF. The&#xA0;<a href=\"http://wpfplayground.blogspot.in/2012/05/bind-system-font-families-to-combo-box.html\" title=\"Bind Font Families to WPF Combo Box\">article</a>&#xA0;explains how to do that. Also the code is so simple.</div>\n<div id=\"premain0\"></div>\n<pre><code>&lt;ComboBox ItemsSource=&quot;{x:Static Fonts.SystemFontFamilies}&quot; /&gt;</code></pre>\n<div>To get the available symbols from a Typeface, first iterate through the typefaces in a Font family and choose the appropriate one. Once you got the Typeface, get the glyph which gives you the character map dictionary.&#xA0;</div>\n<div id=\"premain1\"></div>\n<pre><code>IDictionary&lt;int, ushort&gt; characterMap;<br>foreach (Typeface typeface in font.GetTypefaces())<br>{<br>   typeface.TryGetGlyphTypeface(out glyph);<br>   if (glyph != null)<br>   {<br>     characterMap = glyph.CharacterToGlyphMap;<br>   }<br>}</code></pre>\n<div>The&#xA0;variable&#xA0;<code>characterMap&#xA0;</code>is a dictionary, which stores the unicode values for our symbols. So now we can go ahead and display the symbols in UI.</div>\n<h3><span>Symbols UI&#xA0;&#xA0;</span></h3>\n<div>As I previously stated, the performance will be a major bottle neck in WPF. Since some font families may have more than 20,000 symbols. In case if you like to show them in a traditional ListBox with a wrap panel you would lose the user experience which Windows default character map has. I am sure there is a Virtualization Wrap Panel for WPF posted in this code project&#xA0;<a href=\"http://www.codeproject.com/Articles/75847/Virtualizing-WrapPanel\" title=\"Virtualizing Wrap Panel\">article</a>.&#xA0;But I am going to use something better in which we don&#x2019;t need to care about the containers generation and disposing them.</div>\n<div>I am going to use a Canvas and I decided my viewport size would be 345 X 250 and not more than that. Based on this I have placed 150&#xA0;<code>SymbolView</code>&#xA0;(view that holds the symbol)&#xA0;objects into the canvas in horizontal wrap manner. Each view will have a textbox displaying the corresponding text of the symbol unicode.</div>\n<div id=\"premain2\"></div>\n<pre><code>&lt;Border x:Class=&quot;CharacterMap.SymbolView&quot;<br>         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>         xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; <br>         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; <br>         RenderTransformOrigin=&quot;0.5, 0.5&quot;<br>         mc:Ignorable=&quot;d&quot; Width=&quot;23&quot; <br>         Height=&quot;25&quot; Background=&quot;White&quot;<br>         d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot; <br>         BorderBrush=&quot;Black&quot; BorderThickness=&quot;0 0 1 1&quot;&gt;<br>    &lt;TextBlock Text=&quot;&quot; x:Name=&quot;charcter&quot; FontSize=&quot;17&quot; <br>      VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot;/&gt;<br>&lt;/Border&gt;</code></pre>\n<div>So now, everytime the user choose the Font family in the Combo Box, I will update the 150 tiles with corresponding symbols. I am using a Dispatcher timer to ensure the things will not kill the UI thread.&#xA0;</div>\n<div id=\"premain3\"></div>\n<pre><code>private void Repaint(double value)<br>{<br>    i = Convert.ToInt32((value / 0.1) * 15);<br>    item_index = 0;<br>    timer.Start();<br>} </code></pre>\n<div>In the tick event of the timer, I am updating the tiles,</div>\n<div id=\"premain4\"></div>\n<pre><code>void timer_Tick(object sender, EventArgs e)<br>{<br>     try<br>     {<br>         SymbolView view = canvas.Children[item_index] as SymbolView;<br>         int index = characterMap.Keys.ElementAt(i);<br>         char c = Convert.ToChar(index);<br>         view.charcter.Text = c.ToString();<br>         item_index++;<br>         i++;<br>     }<br>     catch (Exception)<br>     {<br>         SymbolView view = canvas.Children[item_index] as SymbolView;<br>         view.charcter.Text = &quot;&quot;;<br>         item_index++;<br>         i++;<br>     }<br>     if (item_index &gt;= 150)<br>     {<br>         timer.Stop();<br>         item_index = 0;<br>     }<br>}</code></pre>\n<h3><span>Scrolling&#xA0;</span><span>&#xA0;</span></h3>\n<div>Now its time to handle the Scroll bar. Since I am not using the WPF Items Control, the scrollbars will not work for my case. And it is clear that we will be having only 150 tiles in the UI. So the idea is, we have a&#xA0;<code>ScrollBar</code>&#xA0;near to the canvas showing symbols. Based on the scroll offset, the entire tiles are repainted with updated symbols. The work, is we should match the scrollbar offset to the current symbols in the view.&#xA0;&#xA0;</div>\n<div>The base idea is, even though we got 20,000 symbols for a Font Family, we are showing only 150 symbols. On scrolling we will update the symbols based on the offset. &#xA0;&#xA0;</div>\n<div id=\"premain5\"></div>\n<pre><code>private void OnScroll(object sender, ScrollEventArgs e)<br>{<br>   Repaint(e.NewValue);<br>}<br><br>private void Repaint(double value)<br>{<br>    i = Convert.ToInt32((value / 0.1) * 15);<br>    item_index = 0;<br>    timer.Start();<br>}  </code></pre>\n<div>So now we got a nice scrolling effect even though we have huge number of symbols.&#xA0;Also I have added the Key Down behavior. You could also navigate through the symbols using the Keyboard. A textbox is also there to select and copy the symbols.&#xA0;</div>\n<div></div>\n<div><a href=\"http://www.codeproject.com/KB/WPF/396811/Demo.zip\" target=\"_blank\">Download Demo</a></div>\n<div></div>\n<div><a href=\"http://www.codeproject.com/KB/WPF/396811/CharacterMap.zip\" target=\"_blank\">Download Source</a></div>\n<div></div>\n</div>\n\t\t\t",
    "postId": "character-map-in-wpf"
  },
  {
    "content": "\n\t\t\t\t<p>Today I just came across a problem in ListBox, probably with all Selectors. When you bind a CollectionView object which has GroupDescriptions added as below, the first item of Selector will set to be selected by default without user interaction.</p>\n<pre><code>&lt;CollectionViewSource x:Key=&quot;source&quot; Source=&quot;{Binding}&quot;&gt;<br>    &lt;CollectionViewSource.GroupDescriptions&gt;<br>        &lt;PropertyGroupDescription PropertyName=&quot;Genre&quot;/&gt;<br>    &lt;/CollectionViewSource.GroupDescriptions&gt;<br>&lt;/CollectionViewSource&gt;<br></code></pre>\n<p><span id=\"more-239\"></span></p>\n<p>The grouped source bound to ListBox in following way,</p>\n<pre><code>&lt;ListBox ItemsSource=&quot;{Binding Source={StaticResource source}}&quot;<br>         DisplayMemberPath=&quot;Name&quot;&gt;<br>    &lt;ListBox.GroupStyle&gt;<br>        &lt;GroupStyle&gt;<br>            &lt;GroupStyle.HeaderTemplate&gt;<br>                &lt;DataTemplate&gt;<br>                    &lt;TextBlock Text=&quot;{Binding Name}&quot;/&gt;<br>                &lt;/DataTemplate&gt;<br>            &lt;/GroupStyle.HeaderTemplate&gt;<br>        &lt;/GroupStyle&gt;<br>    &lt;/ListBox.GroupStyle&gt;<br>&lt;/ListBox&gt;<br></code></pre>\n<p>In this case, the first item of ListBox will be selected by default without user interaction.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png\"><img data-attachment-id=\"250\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/08/collectionviewsource-grouping-selecteditem-problem/groupingdemo/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png\" data-orig-size=\"418,272\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"groupingdemo\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=418\" alt=\"groupingdemo\" src=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png 418w, https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/groupingdemo.png?w=300 300w\" sizes=\"(max-width: 418px) 100vw, 418px\"></a></p>\n<p>This clearly seems to be an unwanted behavior, probably an issue. <a href=\"http://joshsmithonwpf.wordpress.com/about/\">Josh Smith</a> in his <a href=\"http://joshsmithonwpf.wordpress.com/2008/09/18/the-initially-selected-item-when-binding-to-a-grouped-icollectionview/\">blog</a>, explained a solution for this problem. But it is not so straightforward. Instead of that setting the <strong>IsSynchronizedWithCurrentItem to false</strong> will solve the problem.</p>\n<pre><code>&lt;ListBox ItemsSource=&quot;{Binding Source={StaticResource source}}&quot;<br>         IsSynchronizedWithCurrentItem=&quot;False&quot;<br>         DisplayMemberPath=&quot;Name&quot;&gt;<br>    &lt;ListBox.GroupStyle&gt;<br>        &lt;GroupStyle&gt;<br>            &lt;GroupStyle.HeaderTemplate&gt;<br>                &lt;DataTemplate&gt;<br>                    &lt;TextBlock Text=&quot;{Binding Name}&quot;/&gt;<br>                &lt;/DataTemplate&gt;<br>            &lt;/GroupStyle.HeaderTemplate&gt;<br>        &lt;/GroupStyle&gt;<br>    &lt;/ListBox.GroupStyle&gt;<br>&lt;/ListBox&gt;<br></code></pre>\n\t\t\t",
    "postId": "collectionviewsource-grouping-selecteditem-problem"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">Most of the times, I wonder how System Menu in Native Window has been replaced with custom Menu in WPF. Finally I found the trick. I just want to share the idea here.<p></p>\n<p>Normally WPF does not allow direct customization to Non-client area of Window. But that can be done using native methods. We need to hook the WndProc method. WPF has no override method as Win Forms does. The following code shows how to hook WndProc();</p>\n<pre><code>&#xA0;       private&#xA0;void&#xA0;OnLoaded(object&#xA0;sender,&#xA0;RoutedEventArgs&#xA0;e)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;windowhandle&#xA0;=&#xA0;new&#xA0;WindowInteropHelper(this).Handle;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HwndSource&#xA0;hwndSource&#xA0;=&#xA0;HwndSource.FromHwnd(windowhandle);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;hwndSource.AddHook(new&#xA0;HwndSourceHook(WndProc));<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;private&#xA0;IntPtr&#xA0;WndProc(IntPtr&#xA0;hwnd,&#xA0;int&#xA0;msg,&#xA0;IntPtr&#xA0;wParam,&#xA0;IntPtr&#xA0;lParam,&#xA0;ref&#xA0;bool&#xA0;handled)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{</code></pre>\n<pre><code>            //Code&#xA0;goes&#xA0;here...<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<p>First we should hide the default System Menu in Window. </p>\n<p><img alt src=\"image/png;base64,\"></p>\n<p>To hide the default System Menu in Window, we should handle the particular message. Corresponding window message and parameter for opening System Menu is 0xa4 and 0x02 respectively.</p>\n<pre><code>&#xA0;       private&#xA0;const&#xA0;uint&#xA0;WM_SYSTEMMENU&#xA0;=&#xA0;0xa4;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;private&#xA0;const&#xA0;uint&#xA0;WP_SYSTEMMENU&#xA0;=&#xA0;0x02;</code></pre>\n<p></p>\n<pre><code>        private&#xA0;IntPtr&#xA0;WndProc(IntPtr&#xA0;hwnd,&#xA0;int&#xA0;msg,&#xA0;IntPtr&#xA0;wParam,&#xA0;IntPtr&#xA0;lParam,&#xA0;ref&#xA0;bool&#xA0;handled)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//Message&#xA0;for&#xA0;System&#xA0;Menu...<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;((msg&#xA0;==&#xA0;WM_SYSTEMMENU)&#xA0;&amp;&amp;&#xA0;(wParam.ToInt32()&#xA0;==&#xA0;WP_SYSTEMMENU))<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ShowContextMenu();<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;handled&#xA0;=&#xA0;true;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; return&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>ShowContextMenu() method will show our custom Context Menu declared in Window resources.</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>&#xA0;   &lt;Window.Resources&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ContextMenu&#xA0;x:Key=&quot;systemMenu&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Help&quot;&#xA0;InputGestureText=&quot;F1&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;Help.png&quot;&#xA0;Height=&quot;16&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Choose&#xA0;theme&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;ChooseColor.png&quot;&#xA0;Height=&quot;16&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Add&#xA0;Note&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;NoteHS.png&quot;&#xA0;Height=&quot;16&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem.Icon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/MenuItem&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Separator&#xA0;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;MenuItem&#xA0;Header=&quot;Exit&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/ContextMenu&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Window.Resources&gt; </code></pre>\n<pre><code></code></pre>\n<pre><code>        public&#xA0;ContextMenu&#xA0;SystemMenu<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;get<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;Resources[&quot;systemMenu&quot;]&#xA0;as&#xA0;ContextMenu;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>&#xA0;       private&#xA0;void&#xA0;ShowContextMenu()<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(SystemMenu&#xA0;!=&#xA0;null)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;SystemMenu.IsOpen&#xA0;=&#xA0;true;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Now you can see the below output.</code></pre>\n<pre><code></code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Download the sample from below location:</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>http://www.4shared.com/zip/Sno5IMwy/WpfApplication1.html</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Happy coding... </code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<pre><code>&#xA0;</code></pre>\n</div>\n\t\t\t",
    "postId": "customize-system-menu-in-wpf"
  },
  {
    "postId": "dependency-inversion-a-real-world-comparison",
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>Let me start with a story.</p><div></div><p>Bob need a new assistant for his startup. He hired Janice. Bob wanted Janice to concentrate more on the paper work. One day Bob wanted print outs of some old invoices. Janice collected those invoices. She then get a new printer from the store and get those invoices printed. Bob was happy. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/864x568.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610840.png\"></div></div></div><div></div><p>Few days later Bob wanted some of his user feed back forms to be scanned and uploaded. Janice went out and get a new scanner and get the job done. Similarly every time Bob assign a new job, Janice has to look for required materials to get the job done. Also she has to manage those inventories. Whenever the printer ran out of ink she had to fix it. She was little worried, since she was not able concentrate on her actual job. She brought the concern to Bob. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/722x508.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612281.png\"></div></div></div><div></div><p>Bob thought through that and realised the problem. So he decided to provide the required materials to Janice whenever he assign a job. Janice was happy. But Bob cannot manage those materials continuously because of his busy schedule. So Bob hired Joey as admin and he wants Joey to manage all those inventories for him. So whenever Bob assign a new job to Janice Joey make sure he provide all the required materials to complete the job. All three of them now understood their responsibilities and lived happily. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1100x552.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613616.png\"></div></div></div><div></div><p>Let&apos;s get to the point. </p><div> <div> <hr class=\"divider\"/> </div></div><p>In object oriented programming, an object must depend on one or more other objects to perform a job. Consider our employee class. </p><div> <div> <pre><code>public class Employee <br>{<br>  private readonly IPrinter printer;<br>  private readonly IScanner scanner;<br><br>  public Employee()<br>  {<br>    this.printer = new BlackWhitePrinter();<br>    this.scanner = new Scanner();<br>  }<br><br>  public void GetInvoices()<br>  {<br>    // Get invoices.<br>    this.printer.Print(invoices);<br>  }<br><br>  public void UploadFeedbacks()<br>  {<br>    this.scanner.Scan(feedbacks);<br>    // Upload feedbacks to database<br>  }<br>}<br></code></pre> </div></div><p>It needs to perform certain functions for which it has to depend on certain other low level objects. For example, to hand over few old invoices to Bob Janice has to depend on a printer. The employee class is creating and managing it&apos;s own dependencies. This approach has several disadvantages. </p><ol> <li> <p>Whenever the dependencies get modified, the objects depend on them are also likely to be changed. What if the constructor of the class BlackWhitePrinter changed to accept parameters. </p></li><li> <p>Whenever we create an object for the employee class it comes with black and white printer by default. What if in another context we need a color printer. </p></li><li> <p>The employee class is not focusing on its core job. Instead it is also focusing on managing dependencies, thereby increasing complexity of the class. </p></li><li> <p>Mocking dependencies are not possible and unit testing becomes a pain.</p></li></ol> <div></div><blockquote> <div>Dependency injection is the technique of supplying the required dependencies to an object from outside. </div></blockquote> <div></div><p>Let&apos;s refactor our employee class to adapt dependency injection technique. </p><div> <div> <pre><code>public class Employee <br>{<br>  private readonly IPrinter printer;<br>  private readonly IScanner scanner;<br><br>  public Employee(IPrinter printer, IScanner scanner)<br>  {<br>    this.printer = printer;<br>    this.scanner = scanner;<br>  }<br><br>  public void GetInvoices()<br>  {<br>    // Get invoices.<br>    this.printer.Print(invoices);<br>  }<br><br>  public void UploadFeedbacks()<br>  {<br>    this.scanner.Scan(feedbacks);<br>    // Upload feedbacks to database<br>  }<br>}<br></code></pre> </div></div><p>Instead of creating the printer and scanner dependencies by itself, now the employee get those objects through constructor.</p><div> <div> <pre><code>var printer = new BlackWhitePrinter();<br>var scanner = new Scanner();<br><br>var employee = new Employee(printer, scanner);<br>employee.GetInvoices();<br></code></pre> </div></div><p>The caller has to supply the dependencies, whenever it creates the employee object. The control over the dependencies has been shifted from the employee class to outside. </p><p>By doing this we eliminate all the disadvantages we listed earlier. </p><div></div><p>Any change to the dependencies doesn&apos;t affect the employee class. The employee class depends on the interface and not on the implementation. So a different type of printer can be injected to employee class. Employee class doesn&apos;t need to focus on managing dependencies anymore. Its responsibility is clearly defined. Unit testing employee class is now simple, since mock implementations can be supplied. </p><div></div><p>The code can be further refactored by delegating the dependency management to an external framework. (Now it&apos;s time to hire our Joey to manage all our inventories.)</p><div></div><p>Popular DI frameworks for .NET</p><div></div><p>1. <a href=\"https://code.msdn.microsoft.com/Dependency-Injection-in-11d54863\" target=\"_blank\" rel=\"noopener\">Unity</a>2. <a href=\"https://autofac.org/\" target=\"_blank\" rel=\"noopener\">Autofac</a>3. <a href=\"http://www.ninject.org/\" target=\"_blank\" rel=\"noopener\">Ninject</a></p><div></div><p>For Java</p><div></div><p>1. <a href=\"https://google.github.io/dagger/\" target=\"_blank\" rel=\"noopener\">Dagger</a>2. <a href=\"https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/beans.html\" target=\"_blank\" rel=\"noopener\">Spring</a></p><div></div><p>I am not going to explain the API details of every framework. You can go through the links above to understand that. If we using unity framework this is how to register the dependencies and resolve objects. </p><div> <div> <pre><code>IUnityContainer container = new UnityContainer();<br><br>container.RegisterType<IPrinter, BlackWhitePrinter>();<br>container.RegisterType<IScanner, Scanner>();<br><br>var employee = container.Resolve<Employee>();<br>employee.GetInvoices();<br></code></pre> </div></div><p>When you resolve an object using DI container, it will make sure that it create and supply all the dependencies to the object. So the caller and the employee class does not have to worry about the dependencies. This helps to build system with loosely coupled components. </p><p> </p><p>Thanks for reading. </p></div></div></div>"
  },
  {
    "postId": "detect-capslock-status-in-c",
    "content": "\n\t\t\t\t<div dir=\"ltr\">All usual registration forms will contain a password edit and users has to be warned for the Caps Lock state. So it is pretty easy in C# to check this. The following line will do the magic.<p></p>\n<p></p>\n<pre><code>if&#xA0;(Console.CapsLock)<br>{<br>&#xA0;&#xA0;&#xA0; Console.WriteLine(&quot;CapsLock&#xA0;On!!!&quot;);<br>}</code></pre>\n<p>Happy C#&#x2026;..</p>\n<div></div>\n<p></p></div>\n\t\t\t"
  },
  {
    "postId": "different-sized-tile-items-in-winrt-gridview",
    "content": "\n\t\t\t\t<p>GridView in WinRT allows you to arrange tile items in wrap manner. In case, if you want to arrange items as in Windows store app, we need different sized tile items. There is no direct way to configure different sized items while using data binding in Grid View. I am going to explain the solution in this article.</p>\n<p>VariableSizedWrapGrid should be the panel for Grid View. This panel has two attached properties <em>ColumnSpan</em> and <em>RowSpan</em>. To set this property to the containers, we have to inherit the GridView class and override the <em>PrepareContainerForItemOverride</em>.</p>\n<p><span id=\"more-15\"></span></p>\n<pre><code>    public class VariableGrid : GridView<br>    {<br>        protected override void PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject element, object item)<br>        {<br>            var tile = item as Model;<br><br>            if (tile != null)<br>            {<br>                var griditem = element as GridViewItem;<br><br>                if (griditem != null)<br>                {<br>                    VariableSizedWrapGrid.SetColumnSpan(griditem, tile.ColumnSpan);<br>                    VariableSizedWrapGrid.SetRowSpan(griditem, tile.RowSpan);<br>                }<br>            }<br><br>            base.PrepareContainerForItemOverride(element, item);<br>        }<br>    }<br></code></pre>\n<p>I have the Model class as below. It contains the ColumnSpan and RowSpan property.</p>\n<pre><code>    public class Model<br>    {<br>        public int ColumnSpan { get; set; }<br><br>        public int RowSpan { get; set; }<br><br>        public string Header { get; set; }<br>    }<br></code></pre>\n<p>Our VariableGrid class will map the span properties from model to containers and you can see the following output.</p>\n<pre><code>        &lt;local:VariableGrid ItemsSource=&quot;{Binding Models}&quot;<br>                            Padding=&quot;0&quot;<br>                            Margin=&quot;100&quot;<br>                            Height=&quot;630&quot;&gt;<br>            &lt;local:VariableGrid.ItemTemplate&gt;<br>                &lt;DataTemplate&gt;<br>                    &lt;Grid Background=&quot;MediumOrchid&quot;&gt;<br>                        &lt;TextBlock Text=&quot;{Binding Header}&quot;<br>                                   Margin=&quot;10&quot;<br>                                   HorizontalAlignment=&quot;Left&quot;<br>                                   VerticalAlignment=&quot;Bottom&quot; /&gt;<br>                    &lt;/Grid&gt;<br>                &lt;/DataTemplate&gt;<br>            &lt;/local:VariableGrid.ItemTemplate&gt;<br>            &lt;local:VariableGrid.ItemsPanel&gt;<br>                &lt;ItemsPanelTemplate&gt;<br>                    &lt;VariableSizedWrapGrid ItemHeight=&quot;200&quot;<br>                                           ItemWidth=&quot;200&quot; /&gt;<br>                &lt;/ItemsPanelTemplate&gt;<br>            &lt;/local:VariableGrid.ItemsPanel&gt;<br>        &lt;/local:VariableGrid&gt;<br></code></pre>\n\t\t\t"
  },
  {
    "postId": "digging-into-user32-dll",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><span>Most of the times, we need to interact with native windows actions in WPF or Win Forms. C# provides a better way to import an assembly dynamically and we can effectively use the methods of native System assembly.&#xA0;</span><p></p>\n<p></p>\n<pre><code>&#xA0;       class&#xA0;Example<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Use&#xA0;DllImport&#xA0;to&#xA0;import&#xA0;the&#xA0;Win32&#xA0;MessageBox&#xA0;function.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;,&#xA0;CharSet&#xA0;=&#xA0;CharSet.Unicode)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;int&#xA0;MessageBox(IntPtr&#xA0;hWnd,&#xA0;String&#xA0;text,&#xA0;String&#xA0;caption,&#xA0;uint&#xA0;type);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;static&#xA0;void&#xA0;Main()<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Call&#xA0;the&#xA0;MessageBox&#xA0;function&#xA0;using&#xA0;platform&#xA0;invoke.<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;MessageBox(new&#xA0;IntPtr(0),&#xA0;&quot;Hello&#xA0;World!&quot;,&#xA0;&quot;Hello&#xA0;Dialog&quot;,&#xA0;0);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br></code></pre>\n<p><span>One of the most useful assembly if user32 assembly which contains the 732 methods.</span></p>\n<p><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;} table.MsoTableGrid  {mso-style-name:\"Table Grid\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-priority:59;  mso-style-unhide:no;  border:solid windowtext 1.0pt;  mso-border-alt:solid windowtext .5pt;  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-border-insideh:.5pt solid windowtext;  mso-border-insidev:.5pt solid windowtext;  mso-para-margin:0in;  mso-para-margin-bottom:.0001pt;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  </p>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"100%\">\n<div align=\"center\"><span>ActivateKeyboardLayout 1<br>AdjustWindowRect 2<br>AdjustWindowRectEx 3<br>AlignRects 4<br>AllowForegroundActivation 5<br>AllowSetForegroundWindow 6<br>AnimateWindow 7<br>AnyPopup 8<br>AppendMenuA 9<br>AppendMenuW 10<br>ArrangeIconicWindows 11<br>AttachThreadInput 12<br>BeginDeferWindowPos 13<br>BeginPaint 14<br>BlockInput 15<br>BringWindowToTop 16<br>BroadcastSystemMessage 17<br>BroadcastSystemMessageA 18<br>BroadcastSystemMessageExA 19<br>BroadcastSystemMessageExW 20<br>BroadcastSystemMessageW 21<br>BuildReasonArray 22<br>CalcMenuBar 23<br>CallMsgFilter 24<br>CallMsgFilterA 25<br>CallMsgFilterW 26<br>CallNextHookEx 27<br>CallWindowProcA 28<br>CallWindowProcW 29<br>CascadeChildWindows 30<br>CascadeWindows 31<br>ChangeClipboardChain 32<br>ChangeDisplaySettingsA 33<br>ChangeDisplaySettingsExA 34<br>ChangeDisplaySettingsExW 35<br>ChangeDisplaySettingsW 36<br>ChangeMenuA 37<br>ChangeMenuW 38<br>CharLowerA 39<br>CharLowerBuffA 40<br>CharLowerBuffW 41<br>CharLowerW 42<br>CharNextA 43<br>CharNextExA 44<br>CharNextW 45<br>CharPrevA 46<br>CharPrevExA 47<br>CharPrevW 48<br>CharToOemA 49<br>CharToOemBuffA 50<br>CharToOemBuffW 51<br>CharToOemW 52<br>CharUpperA 53<br>CharUpperBuffA 54<br>CharUpperBuffW 55<br>CharUpperW 56<br>CheckDlgButton 57<br>CheckMenuItem 58<br>CheckMenuRadioItem 59<br>CheckRadioButton 60<br>ChildWindowFromPoint 61<br>ChildWindowFromPointEx 62<br>CliImmSetHotKey 63<br>ClientThreadSetup 64<br>ClientToScreen 65<br>ClipCursor 66<br>CloseClipboard 67<br>CloseDesktop 68<br>CloseWindow 69<br>CloseWindowStation 70<br>CopyAcceleratorTableA 71<br>CopyAcceleratorTableW 72<br>CopyIcon 73<br>CopyImage 74<br>CopyRect 75<br>CountClipboardFormats 76<br>CreateAcceleratorTableA 77<br>CreateAcceleratorTableW 78<br>CreateCaret 79<br>CreateCursor 80<br>CreateDesktopA 81<br>CreateDesktopW 82<br>CreateDialogIndirectParamA 83<br>CreateDialogIndirectParamAorW 84<br>CreateDialogIndirectParamW 85<br>CreateDialogParamA 86<br>CreateDialogParamW 87<br>CreateIcon 88<br>CreateIconFromResource 89<br>CreateIconFromResourceEx 90<br>CreateIconIndirect 91<br>CreateMDIWindowA 92<br>CreateMDIWindowW 93<br>CreateMenu 94<br>CreatePopupMenu 95<br>CreateSystemThreads 96<br>CreateWindowExA 97<br>CreateWindowExW 98<br>CreateWindowStationA 99<br>CreateWindowStationW 100<br>CsrBroadcastSystemMessageExW 101<br>CtxInitUser32 102<br>DdeAbandonTransaction 103<br>DdeAccessData 104<br>DdeAddData 105<br>DdeClientTransaction 106<br>DdeCmpStringHandles 107<br>DdeConnect 108<br>DdeConnectList 109<br>DdeCreateDataHandle 110<br>DdeCreateStringHandleA 111<br>DdeCreateStringHandleW 112<br>DdeDisconnect 113<br>DdeDisconnectList 114<br>DdeEnableCallback 115<br>DdeFreeDataHandle 116<br>DdeFreeStringHandle 117<br>DdeGetData 118<br>DdeGetLastError 119<br>DdeGetQualityOfService 120<br>DdeImpersonateClient 121<br>DdeInitializeA 122<br>DdeInitializeW 123<br>DdeKeepStringHandle 124<br>DdeNameService 125<br>DdePostAdvise 126<br>DdeQueryConvInfo 127<br>DdeQueryNextServer 128<br>DdeQueryStringA 129<br>DdeQueryStringW 130<br>DdeReconnect 131<br>DdeSetQualityOfService 132<br>DdeSetUserHandle 133<br>DdeUnaccessData 134<br>DdeUninitialize 135<br>DefDlgProcA 136<br>DefDlgProcW 137<br>DefFrameProcA 138<br>DefFrameProcW 139<br>DefMDIChildProcA 140<br>DefMDIChildProcW 141<br>DefRawInputProc 142<br>DefWindowProcA 143<br>DefWindowProcW 144<br>DeferWindowPos 145<br>DeleteMenu 146<br>DeregisterShellHookWindow 147<br>DestroyAcceleratorTable 148<br>DestroyCaret 149<br>DestroyCursor 150<br>DestroyIcon 151<br>DestroyMenu 152<br>DestroyReasons 153<br>DestroyWindow 154<br>DeviceEventWorker 155<br>DialogBoxIndirectParamA 156<br>DialogBoxIndirectParamAorW 157<br>DialogBoxIndirectParamW 158<br>DialogBoxParamA 159<br>DialogBoxParamW 160<br>DisableProcessWindowsGhosting 161<br>DispatchMessageA 162<br>DispatchMessageW 163<br>DisplayExitWindowsWarnings 164<br>DlgDirListA 165<br>DlgDirListComboBoxA 166<br>DlgDirListComboBoxW 167<br>DlgDirListW 168<br>DlgDirSelectComboBoxExA 169<br>DlgDirSelectComboBoxExW 170<br>DlgDirSelectExA 171<br>DlgDirSelectExW 172<br>DragDetect 173<br>DragObject 174<br>DrawAnimatedRects 175<br>DrawCaption 176<br>DrawCaptionTempA 177<br>DrawCaptionTempW 178<br>DrawEdge 179<br>DrawFocusRect 180<br>DrawFrame 181<br>DrawFrameControl 182<br>DrawIcon 183<br>DrawIconEx 184<br>DrawMenuBar 185<br>DrawMenuBarTemp 186<br>DrawStateA 187<br>DrawStateW 188<br>DrawTextA 189<br>DrawTextExA 190<br>DrawTextExW 191<br>DrawTextW 192<br>EditWndProc 193<br>EmptyClipboard 194<br>EnableMenuItem 195<br>EnableScrollBar 196<br>EnableWindow 197<br>EndDeferWindowPos 198<br>EndDialog 199<br>EndMenu 200<br>EndPaint 201<br>EndTask 202<br>EnterReaderModeHelper 203<br>EnumChildWindows 204<br>EnumClipboardFormats 205<br>EnumDesktopWindows 206<br>EnumDesktopsA 207<br>EnumDesktopsW 208<br>EnumDisplayDevicesA 209<br>EnumDisplayDevicesW 210<br>EnumDisplayMonitors 211<br>EnumDisplaySettingsA 212<br>EnumDisplaySettingsExA 213<br>EnumDisplaySettingsExW 214<br>EnumDisplaySettingsW 215<br>EnumPropsA 216<br>EnumPropsExA 217<br>EnumPropsExW 218<br>EnumPropsW 219<br>EnumThreadWindows 220<br>EnumWindowStationsA 221<br>EnumWindowStationsW 222<br>EnumWindows 223<br>EqualRect 224<br>ExcludeUpdateRgn 225<br>ExitWindowsEx 226<br>FillRect 227<br>FindWindowA 228<br>FindWindowExA 229<br>FindWindowExW 230<br>FindWindowW 231<br>FlashWindow 232<br>FlashWindowEx 233<br>FrameRect 234<br>FreeDDElParam 235<br>GetActiveWindow 236<br>GetAltTabInfo 237<br>GetAltTabInfoA 238<br>GetAltTabInfoW 239<br>GetAncestor 240<br>GetAppCompatFlags 242<br>GetAppCompatFlags2 241<br>GetAsyncKeyState 243<br>GetCapture 244<br>GetCaretBlinkTime 245<br>GetCaretPos 246<br>GetClassInfoA 247<br>GetClassInfoExA 248<br>GetClassInfoExW 249<br>GetClassInfoW 250<br>GetClassLongA 251<br>GetClassLongW 252<br>GetClassNameA 253<br>GetClassNameW 254<br>GetClassWord 255<br>GetClientRect 256<br>GetClipCursor 257<br>GetClipboardData 258<br>GetClipboardFormatNameA 259<br>GetClipboardFormatNameW 260<br>GetClipboardOwner 261<br>GetClipboardSequenceNumber 262<br>GetClipboardViewer 263<br>GetComboBoxInfo 264<br>GetCursor 265<br>GetCursorFrameInfo 266<br>GetCursorInfo 267<br>GetCursorPos 268<br>GetDC 269<br>GetDCEx 270<br>GetDesktopWindow 271<br>GetDialogBaseUnits 272<br>GetDlgCtrlID 273<br>GetDlgItem 274<br>GetDlgItemInt 275<br>GetDlgItemTextA 276<br>GetDlgItemTextW 277<br>GetDoubleClickTime 278<br>GetFocus 279<br>GetForegroundWindow 280<br>GetGUIThreadInfo 281<br>GetGuiResources 282<br>GetIconInfo 283<br>GetInputDesktop 284<br>GetInputState 285<br>GetInternalWindowPos 286<br>GetKBCodePage 287<br>GetKeyNameTextA 288<br>GetKeyNameTextW 289<br>GetKeyState 290<br>GetKeyboardLayout 291<br>GetKeyboardLayoutList 292<br>GetKeyboardLayoutNameA 293<br>GetKeyboardLayoutNameW 294<br>GetKeyboardState 295<br>GetKeyboardType 296<br>GetLastActivePopup 297<br>GetLastInputInfo 298<br>GetLayeredWindowAttributes 299<br>GetListBoxInfo 300<br>GetMenu 301<br>GetMenuBarInfo 302<br>GetMenuCheckMarkDimensions 303<br>GetMenuContextHelpId 304<br>GetMenuDefaultItem 305<br>GetMenuInfo 306<br>GetMenuItemCount 307<br>GetMenuItemID 308<br>GetMenuItemInfoA 309<br>GetMenuItemInfoW 310<br>GetMenuItemRect 311<br>GetMenuState 312<br>GetMenuStringA 313<br>GetMenuStringW 314<br>GetMessageA 315<br>GetMessageExtraInfo 316<br>GetMessagePos 317<br>GetMessageTime 318<br>GetMessageW 319<br>GetMonitorInfoA 320<br>GetMonitorInfoW 321<br>GetMouseMovePointsEx 322<br>GetNextDlgGroupItem 323<br>GetNextDlgTabItem 324<br>GetOpenClipboardWindow 325<br>GetParent 326<br>GetPriorityClipboardFormat 327<br>GetProcessDefaultLayout 328<br>GetProcessWindowStation 329<br>GetProgmanWindow 330<br>GetPropA 331<br>GetPropW 332<br>GetQueueStatus 333<br>GetRawInputBuffer 334<br>GetRawInputData 335<br>GetRawInputDeviceInfoA 336<br>GetRawInputDeviceInfoW 337<br>GetRawInputDeviceList 338<br>GetReasonTitleFromReasonCode 339<br>GetRegisteredRawInputDevices 340<br>GetScrollBarInfo 341<br>GetScrollInfo 342<br>GetScrollPos 343<br>GetScrollRange 344<br>GetShellWindow 345<br>GetSubMenu 346<br>GetSysColor 347<br>GetSysColorBrush 348<br>GetSystemMenu 349<br>GetSystemMetrics 350<br>GetTabbedTextExtentA 351<br>GetTabbedTextExtentW 352<br>GetTaskmanWindow 353<br>GetThreadDesktop 354<br>GetTitleBarInfo 355<br>GetTopWindow 356<br>GetUpdateRect 357<br>GetUpdateRgn 358<br>GetUserObjectInformationA 359<br>GetUserObjectInformationW 360<br>GetUserObjectSecurity 361<br>GetWinStationInfo 362<br>GetWindow 363<br>GetWindowContextHelpId 364<br>GetWindowDC 365<br>GetWindowInfo 366<br>GetWindowLongA 367<br>GetWindowLongW 368<br>GetWindowModuleFileName 369<br>GetWindowModuleFileNameA 370<br>GetWindowModuleFileNameW 371<br>GetWindowPlacement 372<br>GetWindowRect 373<br>GetWindowRgn 374<br>GetWindowRgnBox 375<br>GetWindowTextA 376<br>GetWindowTextLengthA 377<br>GetWindowTextLengthW 378<br>GetWindowTextW 379<br>GetWindowThreadProcessId 380<br>GetWindowWord 381<br>GrayStringA 382<br>GrayStringW 383<br>HideCaret 384<br>HiliteMenuItem 385<br>IMPGetIMEA 386<br>IMPGetIMEW 387<br>IMPQueryIMEA 388<br>IMPQueryIMEW 389<br>IMPSetIMEA 390<br>IMPSetIMEW 391<br>ImpersonateDdeClientWindow 392<br>InSendMessage 393<br>InSendMessageEx 394<br>InflateRect 395<br>InitializeLpkHooks 396<br>InitializeWin32EntryTable 397<br>InsertMenuA 398<br>InsertMenuItemA 399<br>InsertMenuItemW 400<br>InsertMenuW 401<br>InternalGetWindowText 402<br>IntersectRect 403<br>InvalidateRect 404<br>InvalidateRgn 405<br>InvertRect 406<br>IsCharAlphaA 407<br>IsCharAlphaNumericA 408<br>IsCharAlphaNumericW 409<br>IsCharAlphaW 410<br>IsCharLowerA 411<br>IsCharLowerW 412<br>IsCharUpperA 413<br>IsCharUpperW 414<br>IsChild 415<br>IsClipboardFormatAvailable 416<br>IsDialogMessage 417<br>IsDialogMessageA 418<br>IsDialogMessageW 419<br>IsDlgButtonChecked 420<br>IsGUIThread 421<br>IsHungAppWindow 422<br>IsIconic 423<br>IsMenu 424<br>IsRectEmpty 425<br>IsServerSideWindow 426<br>IsWinEventHookInstalled 427<br>IsWindow 428<br>IsWindowEnabled 429<br>IsWindowInDestroy 430<br>IsWindowUnicode 431<br>IsWindowVisible 432<br>IsZoomed 433<br>KillSystemTimer 434<br>KillTimer 435<br>LoadAcceleratorsA 436<br>LoadAcceleratorsW 437<br>LoadBitmapA 438<br>LoadBitmapW 439<br>LoadCursorA 440<br>LoadCursorFromFileA 441<br>LoadCursorFromFileW 442<br>LoadCursorW 443<br>LoadIconA 444<br>LoadIconW 445<br>LoadImageA 446<br>LoadImageW 447<br>LoadKeyboardLayoutA 448<br>LoadKeyboardLayoutEx 449<br>LoadKeyboardLayoutW 450<br>LoadLocalFonts 451<br>LoadMenuA 452<br>LoadMenuIndirectA 453<br>LoadMenuIndirectW 454<br>LoadMenuW 455<br>LoadRemoteFonts 456<br>LoadStringA 457<br>LoadStringW 458<br>LockSetForegroundWindow 459<br>LockWindowStation 460<br>LockWindowUpdate 461<br>LockWorkStation 462<br>LookupIconIdFromDirectory 463<br>LookupIconIdFromDirectoryEx 464<br>MBToWCSEx 465<br>MB_GetString 466<br>MapDialogRect 467<br>MapVirtualKeyA 468<br>MapVirtualKeyExA 469<br>MapVirtualKeyExW 470<br>MapVirtualKeyW 471<br>MapWindowPoints 472<br>MenuItemFromPoint 473<br>MenuWindowProcA 474<br>MenuWindowProcW 475<br>MessageBeep 476<br>MessageBoxA 477<br>MessageBoxExA 478<br>MessageBoxExW 479<br>MessageBoxIndirectA 480<br>MessageBoxIndirectW 481<br>MessageBoxTimeoutA 482<br>MessageBoxTimeoutW 483<br>MessageBoxW 484<br>ModifyMenuA 485<br>ModifyMenuW 486<br>MonitorFromPoint 487<br>MonitorFromRect 488<br>MonitorFromWindow 489<br>MoveWindow 490<br>MsgWaitForMultipleObjects 491<br>MsgWaitForMultipleObjectsEx 492<br>NotifyWinEvent 493<br>OemKeyScan 494<br>OemToCharA 495<br>OemToCharBuffA 496<br>OemToCharBuffW 497<br>OemToCharW 498<br>OffsetRect 499<br>OpenClipboard 500<br>OpenDesktopA 501<br>OpenDesktopW 502<br>OpenIcon 503<br>OpenInputDesktop 504<br>OpenWindowStationA 505<br>OpenWindowStationW 506<br>PackDDElParam 507<br>PaintDesktop 508<br>PaintMenuBar 509<br>PeekMessageA 510<br>PeekMessageW 511<br>PostMessageA 512<br>PostMessageW 513<br>PostQuitMessage 514<br>PostThreadMessageA 515<br>PostThreadMessageW 516<br>PrintWindow 517<br>PrivateExtractIconExA 518<br>PrivateExtractIconExW 519<br>PrivateExtractIconsA 520<br>PrivateExtractIconsW 521<br>PrivateSetDbgTag 522<br>PrivateSetRipFlags 523<br>PtInRect 524<br>QuerySendMessage 525<br>QueryUserCounters 526<br>RealChildWindowFromPoint 527<br>RealGetWindowClass 528<br>RealGetWindowClassA 529<br>RealGetWindowClassW 530<br>ReasonCodeNeedsBugID 531<br>ReasonCodeNeedsComment 532<br>RecordShutdownReason 533<br>RedrawWindow 534<br>RegisterClassA 535<br>RegisterClassExA 536<br>RegisterClassExW 537<br>RegisterClassW 538<br>RegisterClipboardFormatA 539<br>RegisterClipboardFormatW 540<br>RegisterDeviceNotificationA 541<br>RegisterDeviceNotificationW 542<br>RegisterHotKey 543<br>RegisterLogonProcess 544<br>RegisterMessagePumpHook 545<br>RegisterRawInputDevices 546<br>RegisterServicesProcess 547<br>RegisterShellHookWindow 548<br>RegisterSystemThread 549<br>RegisterTasklist 550<br>RegisterUserApiHook 551<br>RegisterWindowMessageA 552<br>RegisterWindowMessageW 553<br>ReleaseCapture 554<br>ReleaseDC 555<br>RemoveMenu 556<br>RemovePropA 557<br>RemovePropW 558<br>ReplyMessage 559<br>ResolveDesktopForWOW 560<br>ReuseDDElParam 561<br>ScreenToClient 562<br>ScrollChildren 563<br>ScrollDC 564<br>ScrollWindow 565<br>ScrollWindowEx 566<br>SendDlgItemMessageA 567<br>SendDlgItemMessageW 568<br>SendIMEMessageExA 569<br>SendIMEMessageExW 570<br>SendInput 571<br>SendMessageA 572<br>SendMessageCallbackA 573<br>SendMessageCallbackW 574<br>SendMessageTimeoutA 575<br>SendMessageTimeoutW 576<br>SendMessageW 577<br>SendNotifyMessageA 578<br>SendNotifyMessageW 579<br>SetActiveWindow 580<br>SetCapture 581<br>SetCaretBlinkTime 582<br>SetCaretPos 583<br>SetClassLongA 584<br>SetClassLongW 585<br>SetClassWord 586<br>SetClipboardData 587<br>SetClipboardViewer 588<br>SetConsoleReserveKeys 589<br>SetCursor 590<br>SetCursorContents 591<br>SetCursorPos 592<br>SetDebugErrorLevel 593<br>SetDeskWallpaper 594<br>SetDlgItemInt 595<br>SetDlgItemTextA 596<br>SetDlgItemTextW 597<br>SetDoubleClickTime 598<br>SetFocus 599<br>SetForegroundWindow 600<br>SetInternalWindowPos 601<br>SetKeyboardState 602<br>SetLastErrorEx 603<br>SetLayeredWindowAttributes 604<br>SetLogonNotifyWindow 605<br>SetMenu 606<br>SetMenuContextHelpId 607<br>SetMenuDefaultItem 608<br>SetMenuInfo 609<br>SetMenuItemBitmaps 610<br>SetMenuItemInfoA 611<br>SetMenuItemInfoW 612<br>SetMessageExtraInfo 613<br>SetMessageQueue 614<br>SetParent 615<br>SetProcessDefaultLayout 616<br>SetProcessWindowStation 617<br>SetProgmanWindow 618<br>SetPropA 619<br>SetPropW 620<br>SetRect 621<br>SetRectEmpty 622<br>SetScrollInfo 623<br>SetScrollPos 624<br>SetScrollRange 625<br>SetShellWindow 626<br>SetShellWindowEx 627<br>SetSysColors 628<br>SetSysColorsTemp 629<br>SetSystemCursor 630<br>SetSystemMenu 631<br>SetSystemTimer 632<br>SetTaskmanWindow 633<br>SetThreadDesktop 634<br>SetTimer 635<br>SetUserObjectInformationA 636<br>SetUserObjectInformationW 637<br>SetUserObjectSecurity 638<br>SetWinEventHook 639<br>SetWindowContextHelpId 640<br>SetWindowLongA 641<br>SetWindowLongW 642<br>SetWindowPlacement 643<br>SetWindowPos 644<br>SetWindowRgn 645<br>SetWindowStationUser 646<br>SetWindowTextA 647<br>SetWindowTextW 648<br>SetWindowWord 649<br>SetWindowsHookA 650<br>SetWindowsHookExA 651<br>SetWindowsHookExW 652<br>SetWindowsHookW 653<br>ShowCaret 654<br>ShowCursor 655<br>ShowOwnedPopups 656<br>ShowScrollBar 657<br>ShowStartGlass 658<br>ShowWindow 659<br>ShowWindowAsync 660<br>SoftModalMessageBox 661<br>SubtractRect 662<br>SwapMouseButton 663<br>SwitchDesktop 664<br>SwitchToThisWindow 665<br>SystemParametersInfoA 666<br>SystemParametersInfoW 667<br>TabbedTextOutA 668<br>TabbedTextOutW 669<br>TileChildWindows 670<br>TileWindows 671<br>ToAscii 672<br>ToAsciiEx 673<br>ToUnicode 674<br>ToUnicodeEx 675<br>TrackMouseEvent 676<br>TrackPopupMenu 677<br>TrackPopupMenuEx 678<br>TranslateAccelerator 679<br>TranslateAcceleratorA 680<br>TranslateAcceleratorW 681<br>TranslateMDISysAccel 682<br>TranslateMessage 683<br>TranslateMessageEx 684<br>UnhookWinEvent 685<br>UnhookWindowsHook 686<br>UnhookWindowsHookEx 687<br>UnionRect 688<br>UnloadKeyboardLayout 689<br>UnlockWindowStation 690<br>UnpackDDElParam 691<br>UnregisterClassA 692<br>UnregisterClassW 693<br>UnregisterDeviceNotification 694<br>UnregisterHotKey 695<br>UnregisterMessagePumpHook 696<br>UnregisterUserApiHook 697<br>UpdateLayeredWindow 698<br>UpdatePerUserSystemParameters 699<br>UpdateWindow 700<br>User32InitializeImmEntryTable 701<br>UserClientDllInitialize 702<br>UserHandleGrantAccess 703<br>UserLpkPSMTextOut 704<br>UserLpkTabbedTextOut 705<br>UserRealizePalette 706<br>UserRegisterWowHandlers 707<br>VRipOutput 708<br>VTagOutput 709<br>ValidateRect 710<br>ValidateRgn 711<br>VkKeyScanA 712<br>VkKeyScanExA 713<br>VkKeyScanExW 714<br>VkKeyScanW 715<br>WCSToMBEx 716<br>WINNLSEnableIME 717<br>WINNLSGetEnableStatus 718<br>WINNLSGetIMEHotkey 719<br>WaitForInputIdle 720<br>WaitMessage 721<br>Win32PoolAllocationStats 722<br>WinHelpA 723<br>WinHelpW 724<br>WindowFromDC 725<br>WindowFromPoint 726<br>keybd_event 727<br>mouse_event 728<br>wsprintfA 729<br>wsprintfW 730<br>wvsprintfA 731<br>wvsprintfW 732</span></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<div></div>\n<div align=\"center\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td></td>\n<td align=\"center\" bgcolor=\"#949449\" width=\"2\"></td>\n<td align=\"center\" bgcolor=\"#cccc99\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">Any real world appliation would like bind the Enum values to a ComboBox. So it is always better to have common code that will do the logic. Below, I have a helper class which exposed a property to get the enum type, so that I can resolve the enum values.<p></p>\n<div id=\"codeSnippetWrapper\">\n<div id=\"codeSnippet\">\n<pre><code>   1: public static Type GetEnum(DependencyObject obj)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             return (Type)obj.GetValue(EnumProperty);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:         public static void SetEnum(DependencyObject obj, string value)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:             obj.SetValue(EnumProperty, value);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         // Using a DependencyProperty as the backing store for Enum.  This enables animation, styling, binding, etc...</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         public static readonly DependencyProperty EnumProperty =</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:             DependencyProperty.RegisterAttached(&quot;Enum&quot;, typeof(Type), typeof(EnumHelper), new PropertyMetadata(null, OnEnumChanged));</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Get the values of enum and set it as ComboBox ItemsSource.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: private static void OnEnumChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             var control = sender as ItemsControl;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:             if (control != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:             {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:                 if (e.NewValue != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:                     var _enum = Enum.GetValues(e.NewValue as Type);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:                     control.ItemsSource = _enum;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:             }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:         }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Now the ComboBox will bind to the enum values, if we set the enum value in XAML.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public enum Designation</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:         SoftwareEngineer,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:         TeamLead,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         ProductManager</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:     }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p></p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: &lt;ComboBox x:Name=&quot;Designation&quot; Margin=&quot;5&quot; Grid.Row=&quot;5&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:                          SelectedItem=&quot;{Binding Designation, Mode=TwoWay}&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:                          local:EnumHelper.Enum=&quot;{x:Type local:Designation}&quot;&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:                   </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5: &lt;/ComboBox&gt;</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p></p>\n<div><a href=\"http://lh6.ggpht.com/-QY_gUY3kSSY/UX4NHT3uMhI/AAAAAAAABP8/rBuP_hwuwaU/s1600-h/image8.png\"><img align=\"left\" alt=\"image\" border=\"0\" height=\"137\" src=\"https://i1.wp.com/lh3.ggpht.com/-dguBFDsAySA/UX4NHw7l9WI/AAAAAAAABQE/CH5mNCRUwcs/image_thumb6.png\" title=\"image\" width=\"320\"></a></div>\n<p>Look at the names of every item. It is not well spaced. It should be Product Manager instead of ProductManager. For this we will use the Display attribute to enum values. Further we can also use Description attribute to let the user see more details.</p>\n<p>I have modified my enum looks below.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public enum Designation</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:         [Display(Name=&quot;Software Engineer&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         [Description(&quot;Software engineer responsible for core developement.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:         SoftwareEngineer,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         [Display(Name = &quot;Team Lead&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:         [Description(&quot;Team lead responsible for leading a small team of 5 to 10 members.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         TeamLead,</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         [Display(Name = &quot;Product Manager&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         [Description(&quot;Product manager responsible for core management.&quot;)]</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:         ProductManager</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  14:     }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Also our helper class should expose another property to get the values of attributes and set it wherever needed. For example, in this case I will show the description as tooltip and display as text.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: public static bool GetMoreDetails(DependencyObject obj)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:             return (bool)obj.GetValue(MoreDetailsProperty);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:         public static void SetMoreDetails(DependencyObject obj, bool value)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:             obj.SetValue(MoreDetailsProperty, value);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9:         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  10:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  11:         // Using a DependencyProperty as the backing store for MoreDetails.  This enables animation, styling, binding, etc...</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  12:         public static readonly DependencyProperty MoreDetailsProperty =</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  13:             DependencyProperty.RegisterAttached(&quot;MoreDetails&quot;, typeof(bool), typeof(EnumHelper), new PropertyMetadata(false, OnMoreDetailsChanged));</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  14:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  15:         private static void OnMoreDetailsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  16:         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  17:             var control = sender as FrameworkElement;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  18:             if (control != null)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  19:             {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  20:                 var enumobject = control.DataContext;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  21:                 var fieldInfo = enumobject.GetType().GetField(enumobject.ToString());</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  22:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  23:                 var array = fieldInfo.GetCustomAttributes(false);</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  24:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  25:                 if (array.Length == 0)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  26:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  27:                     if (control is TextBlock)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  28:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  29:                         ((TextBlock)control).Text = enumobject.ToString();</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  30:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  31:                     else if (control is ContentControl)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  32:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  33:                         ((ContentControl)control).Content = enumobject;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  34:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  35:                     return;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  36:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  37:&#xA0; </code></pre>\n<p><!--CRLF--></p>\n<pre><code>  38:                 foreach (var o in array)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  39:                 {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  40:                     if (o is DescriptionAttribute)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  41:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  42:                         control.ToolTip = ((DescriptionAttribute) o).Description;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  43:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  44:                     else if (o is DisplayAttribute)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  45:                     {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  46:                         if (control is TextBlock)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  47:                         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  48:                             ((TextBlock) control).Text = ((DisplayAttribute) o).Name;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  49:                         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  50:                         else if (control is ContentControl)</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  51:                         {</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  52:                             ((ContentControl)control).Content = ((DisplayAttribute)o).Name;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  53:                         }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  54:                     }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  55:                 }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  56:             }</code></pre>\n<p><!--CRLF--></p>\n<pre><code>  57:         }</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p>Let&#x2019;s add a simple DataTemplate to our ComboBox.</p>\n<div id=\"codeSnippetWrapper\"><p></p>\n<div id=\"codeSnippet\">\n<pre><code>   1: &lt;ComboBox x:Name=&quot;Designation&quot; Margin=&quot;5&quot; Grid.Row=&quot;5&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   2:                           SelectedItem=&quot;{Binding Designation, Mode=TwoWay}&quot;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   3:                           local:EnumHelper.Enum=&quot;{x:Type local:Designation}&quot;&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   4:                     &lt;ComboBox.ItemTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   5:                         &lt;DataTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   6:                             &lt;TextBlock local:EnumHelper.MoreDetails=&quot;true&quot;/&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   7:                         &lt;/DataTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   8:                     &lt;/ComboBox.ItemTemplate&gt;</code></pre>\n<p><!--CRLF--></p>\n<pre><code>   9: &lt;/ComboBox&gt;</code></pre>\n<p><!--CRLF--></p></div>\n</div>\n<p><a href=\"http://lh4.ggpht.com/-i37DV7SCNSk/UX4NIvszNBI/AAAAAAAABQM/zofUux62Si0/s1600-h/image14.png\"><img align=\"left\" alt=\"image\" border=\"0\" height=\"239\" src=\"https://i2.wp.com/lh5.ggpht.com/-CwW_It4w_a0/UX4NJI3-kmI/AAAAAAAABQU/gtcq0s1ZKAI/image_thumb10.png\" title=\"image\" width=\"696\"></a></p>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/EnumHelper.zip\">Download EnumHelper.zip</a></p></div>\n\t\t\t",
    "postId": "enum-to-combobox-binding"
  },
  {
    "postId": "eye-dropper-control-in-wpf",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><p></p>\n<h2>   Introduction&#xA0;</h2>\n<div><a href=\"http://www.codeproject.com/Articles/374887/Eye-Dropper-control-in-WPF\" target=\"_blank\">(View this article in Code Project)</a></div>\n<div></div>\n<div align=\"baseline\">Usually we come across different types of eye dropper controls in designers. We can move the mouse over the desktop and other applications to pick the color under the mouse.&#xA0;A normal eye dropper will pick color only within the application like the one in Adobe Illustrator or Photoshop. But the control I posted here will helps you to choose color from anywhere even outside your application like the one in Expression Blend or Visual Studio Designer.&#xA0;</div>\n<div><img height=\"259\" src=\"https://i1.wp.com/www.codeproject.com/KB/WPF/374887/Eyedropper_control.png\" width=\"400\"></div>\n<h2>   <span>Implementation</span></h2>\n<div>The base idea is to pick color from the screen&#xA0;wherever the mouse moving.&#xA0;The underlying magic behind the implementation is, need to take a snap shot of the entire desktop. For every mouse move we going to pick the appropriate pixel information from the image.</div>\n<h3>   Capturing Screenshot&#xA0;</h3>\n<div>Lets start with capturing the screen shot,&#xA0;</div>\n<div>Capturing the screenshot is pretty easy with Windows Forms. But in WPF, we need to call&#xA0;<a href=\"http://www.pinvoke.net/\" target=\"_blank\" title=\"http://www.pinvoke.net/\">pinvoke&#xA0;</a>methods&#xA0;to do that. We need few methods from User32.dll and gdi32.dll.</div>\n<div id=\"premain0\"></div>\n<pre><code>public class InteropHelper<br>    {<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern IntPtr GetDesktopWindow();<br><br>        // http://msdn.microsoft.com/en-us/library/dd144871(VS.85).aspx<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern IntPtr GetDC(IntPtr hwnd);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183370(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        [return: MarshalAs(UnmanagedType.Bool)]<br>        public static extern bool BitBlt(IntPtr hDestDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, Int32 dwRop);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183488(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        public static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183489(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;, SetLastError = true)]<br>        public static extern IntPtr CreateCompatibleDC(IntPtr hdc);<br><br>        // http://msdn.microsoft.com/en-us/library/dd162957(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;, ExactSpelling = true, PreserveSig = true, SetLastError = true)]<br>        public static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);<br><br>        // http://msdn.microsoft.com/en-us/library/dd183539(VS.85).aspx<br>        [DllImport(&quot;gdi32.dll&quot;)]<br>        public static extern bool DeleteObject(IntPtr hObject);<br><br>        // http://msdn.microsoft.com/en-us/library/dd162920(VS.85).aspx<br>        [DllImport(&quot;user32.dll&quot;)]<br>        public static extern int ReleaseDC(IntPtr hwnd, IntPtr dc);<br>}  </code></pre>\n<div></div>\n<div>Using these Interop Helpers take a screen shot of your desktop. The screen capture method will get parameters like X, Y, Width and height parameters. Since we going to take snap shot of the entire screen, get Width and Height of the screen using the static class&#xA0;<code>SystemParameters.&#xA0;</code></div>\n<div><code></code></div>\n<div id=\"premain1\"></div>\n<pre><code>public static BitmapSource CaptureRegion(IntPtr hWnd, int x, int y, int width, int height)<br>        {<br>            IntPtr sourceDC = IntPtr.Zero;<br>            IntPtr targetDC = IntPtr.Zero;<br>            IntPtr compatibleBitmapHandle = IntPtr.Zero;<br>            BitmapSource bitmap = null;<br><br>            try<br>            {<br>                // gets the main desktop and all open windows<br>                sourceDC = InteropHelper.GetDC(InteropHelper.GetDesktopWindow());<br><br>                //sourceDC = User32.GetDC(hWnd);<br>                targetDC = InteropHelper.CreateCompatibleDC(sourceDC);<br><br>                // create a bitmap compatible with our target DC<br>                compatibleBitmapHandle = InteropHelper.CreateCompatibleBitmap(sourceDC, width, height);<br><br>                // gets the bitmap into the target device context<br>                InteropHelper.SelectObject(targetDC, compatibleBitmapHandle);<br><br>                // copy from source to destination<br>                InteropHelper.BitBlt(targetDC, 0, 0, width, height, sourceDC, x, y, InteropHelper.SRCCOPY);<br><br>                // Here&apos;s the WPF glue to make it all work. It converts from an<br>                // hBitmap to a BitmapSource. Love the WPF interop functions<br>                bitmap = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(<br>                    compatibleBitmapHandle, IntPtr.Zero, Int32Rect.Empty,<br>                    BitmapSizeOptions.FromEmptyOptions());<br><br>            }<br>            catch (Exception ex)<br>            {<br><br>            }<br>            finally<br>            {<br>                DeleteObject(compatibleBitmapHandle);<br>                ReleaseDC(IntPtr.Zero, sourceDC);<br>                ReleaseDC(IntPtr.Zero, targetDC);<br>            }<br><br>            return bitmap;<br>        } </code></pre>\n<div>Method invoke:</div>\n<div id=\"premain2\"></div>\n<pre><code>InteropHelper.CaptureRegion(InteropHelper.GetDesktopWindow(),(int)SystemParameters.VirtualScreenLeft,(int)SystemParameters.VirtualScreenTop, (int)SystemParameters.PrimaryScreenWidth,(int)SystemParameters.PrimaryScreenHeight); </code></pre>\n<h3>   Global Mouse position&#xA0;</h3>\n<div>Now we are done with taking the screen shot. Lets pick the color from the appropriate pixel by matching the mouse position. So now we need the Mouse Move event for not only the entire application but also outside of the app to get the mouse position.&#xA0;To achieve a global mouse move hook, we need some native method calls as explained in this<a href=\"http://www.codeproject.com/Articles/7294/Processing-Global-Mouse-and-Keyboard-Hooks-in-C\" target=\"_blank\" title=\"http://www.codeproject.com/Articles/7294/Processing-Global-Mouse-and-Keyboard-Hooks-in-C\">article</a>.&#xA0;But this is little bit complex. So I have started a timer while clicking the eye dropper button. And each tick of the timer, I am getting the mouse position using the following code,</div>\n<div id=\"premain3\"></div>\n<pre><code>System.Drawing.Point _point = System.Windows.Forms.Control.MousePosition;<br></code></pre>\n<h3>   Copy Pixel Information&#xA0;</h3>\n<div>Now we are done with getting the mouse position. Using this position get the appropriate pixel information from the<code>BitmapSource&#xA0;</code>that we have taken.&#xA0;<code>BitmapSource.CopyPixel</code>&#xA0;will give you an array of bytes, in which the first 3 values are enough to find the color.&#xA0;</div>\n<div id=\"premain4\"></div>\n<pre><code>int stride = (screenimage.PixelWidth * screenimage.Format.BitsPerPixel + 7) / 8;<br>pixels = new byte[screenimage.PixelHeight * stride];<br>Int32Rect rect = new Int32Rect((int)point.X, (int)point.Y, 1, 1);<br>screenimage.CopyPixels(rect, pixels, stride, 0);<br>rectcolor.Fill = new SolidColorBrush(Color.FromRgb(pixels[2], pixels[1], pixels[0])); </code></pre>\n<h3>   Global Mouse cursor&#xA0;&#xA0;</h3>\n<div><em>(The following implementation has not included in the attached sample and source code for safety reasons, since it will affect the client registry values. It was considered the following code may risky in certain conditions and&#xA0;ignored in the sample.)</em><span>&#xA0;</span></div>\n<div><span><br></span></div>\n<div>Everything is fine except the mouse cursor. &#xA0;It is very obvious that we can change the cursor in WPF using<code>FrameworkElement.Cursor</code>. But the trick is, it only works within your application and not outside your application Main Window. In case if you want to change the cursor for the entire OS, we don&#x2019;t have any direct way in WPF. But most of the developers worried why we need to change the entire Windows cursor. But take an example, if we are developing an eye dropper control in WPF (used to pick color). Not like the one in Illustrator or Photoshop (cannot pick color outside the application), but the one we have in Expression Blend or Visual Studio designer (can pick color even outside the application also).</div>\n<div>In that cases, the cursor should be changed, because arrow cursor will not be a comfortable one to pick color. Normally cursor values resides in registry.</div>\n<div><strong>Registry Key</strong>&#xA0;:&#xA0;<em>HKEY_CURRENT_USER\\Control Panel\\Cursors</em></div>\n<div>Changing the values here will change the cursor, but your system needs a reboot to take effect (I can understand, none of the developers will accept this). To avoid that and make your app. taking immediate effect, you need to invoke a&#xA0;<code>pinvoke&#xA0;</code>call.&#xA0;</div>\n<div>The following method will refresh the cursor &#xA0;values,&#xA0;</div>\n<div id=\"premain5\"></div>\n<pre><code>[DllImport(&quot;user32.dll&quot;, EntryPoint = &quot;SystemParametersInfo&quot;)]<br>public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);  </code></pre>\n<div>Iterate through registry values and change the cursor path.&#xA0;</div>\n<div id=\"premain6\"></div>\n<pre><code>private void ChangeCursor()<br>        {<br>            RegistryKey pRegKey = Registry.CurrentUser;<br>            pRegKey = pRegKey.OpenSubKey(@&quot;Control Panel\\Cursors&quot;);<br>            paths.Clear();<br>            foreach (var key in pRegKey.GetValueNames())<br>            {<br>                Object _key = pRegKey.GetValue(key);<br>                //Take a backup.<br><br>                paths.Add(key, _key.ToString());<br>                Object val = Registry.GetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, null);<br>                Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, &quot;foo.cur&quot;);<br>            }<br>           <br>            SystemParametersInfo(InteropHelper.SPI_SETCURSORS, 0, null, InteropHelper.SPIF_UPDATEINIFILE | InteropHelper.SPIF_SENDCHANGE);  <br>        }<br></code></pre>\n<div>Make sure you store the registry values before change it, so that you can restore the cursor to the default values.&#xA0;</div>\n<div id=\"premain7\"></div>\n<pre><code> private void ResetCursorToDefault()<br>        {<br>            RegistryKey pRegKey = Registry.CurrentUser;<br>            pRegKey = pRegKey.OpenSubKey(@&quot;Control Panel\\Cursors&quot;);<br>            foreach (string key in paths.Keys)<br>            {<br>                string path = paths[key];<br>                Registry.SetValue(@&quot;HKEY_CURRENT_USER\\Control Panel\\Cursors&quot;, key, path);<br>            }<br>            InteropHelper.SystemParametersInfo(InteropHelper.SPI_SETCURSORS, 0, null, InteropHelper.SPIF_UPDATEINIFILE | InteropHelper.SPIF_SENDCHANGE);<br>        }  </code></pre>\n<div></div>\n<div></div>\n<div><a href=\"http://dl.dropbox.com/u/71941230/EyeDropper.zip\" target=\"_blank\"><span>Download Demo&#xA0;&#x2013; 14.9 KB</span>&#xA0;</a></div>\n<div></div>\n<div><a href=\"http://dl.dropbox.com/u/71941230/SourceCode.zip\" target=\"_blank\"><span>Download Source code&#xA0;&#x2013; 20.1 KB</span>&#xA0;</a></div>\n<p></p></div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<div></div>\n<p><!--[if !mso]&gt; v\\:* {behavior:url(#default#VML);} o\\:* {behavior:url(#default#VML);} w\\:* {behavior:url(#default#VML);} .shape {behavior:url(#default#VML);}  &lt;![endif]--><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0   false            false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  </p>\n<div><span lang=\"EN\">There are numbers of blogs that folks wrote about memory leaks in Microsoft .Net Framework managed code and unmanaged code based applications. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This blog,</span><span lang=\"EN\"></span></div>\n<ul type=\"disc\">\n<li><span lang=\"EN\">Show coding practices      that can cause memory leaks which are more unique to WPF-base apps </span><span lang=\"EN\"></span></li>\n<li><span lang=\"EN\">Share information about      memory leaks in the .NET Framework;</span><span lang=\"EN\"> </span></li>\n<li><span lang=\"EN\">Show how to avoid these      leaks </span><span lang=\"EN\"></span></li>\n<li><span lang=\"EN\">Discuss the tools and      techniques available to detect the leaks </span><span lang=\"EN\"></span></li>\n</ul>\n<div><span lang=\"EN\"></span><span lang=\"EN\"></span></div>\n<h2 align=\"center\"><strong><u><span lang=\"EN\">The Sample</span></u></strong><span lang=\"EN\"></span></h2>\n<div><span lang=\"EN\">To illustrate the issues I am showing a sample application. The application can launch different child windows; each can cause a separate memory leak. In each of the cases, closing the child window does not actually release the memory held by Window object as you would expect.</span><span lang=\"EN\"></span></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/f1ad1-1.jpg\"><img border=\"0\" height=\"299\" src=\"https://wpfplayground.files.wordpress.com/2011/10/f1ad1-1.jpg?w=320&amp;h=299\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">For clarity, I&#x2019;ve included a table of the leaks:</span></div>\n<div></div>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"1\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"395\">\n<div align=\"center\"><b><span>Leak   Description</span></b><span></span></div>\n</td>\n<td valign=\"top\" width=\"112\">\n<div align=\"center\"><strong><span>Developer Error</span></strong><span></span></div>\n</td>\n<td valign=\"top\" width=\"84\">\n<div align=\"center\"><strong><span>NETFX 3.0 </span></strong><span></span></div>\n</td>\n<td valign=\"top\" width=\"92\">\n<div align=\"center\"><strong><span>NETFX 3.5 </span></strong><span></span></div>\n</td>\n<td valign=\"top\" width=\"133\">\n<div align=\"center\"><strong><span>NETFX 3/5 sp1</span></strong><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"393\">   <span>Improper Use of Event Handlers</span><span></span></td>\n<td valign=\"top\" width=\"113\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"85\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"133\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"390\">   <span>Improper Use of Data Binding</span><span></span></td>\n<td valign=\"top\" width=\"114\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"86\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"390\">   <span>Improper Use of Command Binding</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"87\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"389\">   <span>Improper Use of Static Event   Handlers</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"88\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Use BitmapImage in ImageSource</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Multiple Use of BitmapImage</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Use of downloaded BitmapImage</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>CMilChannel leaks if initial HWND   destroyed on XP</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X   (XP only)</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X   (XP only)</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X   (XP only)</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>ShutdownListener leaked for each   thread using Binding</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>Create and Destroy WriteableBitmap   on XP in HW</span><span></span></td>\n<td valign=\"top\" width=\"115\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"89\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"93\">\n<div align=\"center\"></div>\n</td>\n<td valign=\"top\" width=\"132\">\n<div align=\"center\"><span>X   (XP in HW Only)</span><span></span></div>\n</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"388\">   <span>SW Viewport 3D w/ VisualBrush, WB,   etc. leaks on XP</span><span></span></td>\n<td valign=\"top\" width=\"116\"></td>\n<td valign=\"top\" width=\"90\"></td>\n<td valign=\"top\" width=\"94\"></td>\n<td valign=\"top\" width=\"133\">\n<div align=\"center\"><span>X   (XP in HW Only)</span><span></span></div>\n</td>\n</tr>\n</tbody>\n</table>\n<div align=\"center\"></div>\n<div align=\"center\"><strong><u><span lang=\"EN\">The Leak</span></u></strong></div>\n<div align=\"center\"></div>\n<div><span lang=\"EN\">To see the leak:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>1.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">On Windows Vista, launch </span><span lang=\"EN\"><a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx\"><span>Process Explorer</span></a></span><span lang=\"EN\">.&#xA0; Open the process property dialog for your app (Right-Click/Properties) </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>2.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Launch few of the Child windows.&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>3.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Notice memory grows by ~50MB on each launch.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>4.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Close a dialog without checking the checkbox (e.g. &#x201C;Clear events on Close to avoid memory Leak&#x201D;.)</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>5.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Click of &#x201C;Force GC&#x201D; to force garbage collection.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>6.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Notice memory is not re-claimed </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>7.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Repeat (4)+(5) , but now check each of the Checkbox.&#xA0; This will free the objects being held when window closes. Notice in Process Explorer that memory is now reclaimed.</span><span lang=\"EN\"> </span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/clip_image004_2.jpg\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/4ca34-2.jpg\"><img border=\"0\" height=\"320\" src=\"https://wpfplayground.files.wordpress.com/2011/10/4ca34-2.jpg?w=269&amp;h=320\" width=\"269\"></a></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/clip_image004_2.jpg\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/clip_image004_2.jpg\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Each of the child windows causes a leak because of the reasons below.</span><span lang=\"EN\"> </span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">1. <u>Use of Event Handler</u></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_9.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/e0fdc-3.jpg\"><img border=\"0\" height=\"211\" src=\"https://wpfplayground.files.wordpress.com/2011/10/e0fdc-3.jpg?w=320&amp;h=211\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_9.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 1-Leak caused by use of Event Handler</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because the child window (Window2) has a reference (it registered to an event) to Window1 TextBox1 which remains alive causing the Window2 object and its element tree to remain alive.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">In general, if you do this:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Foo.SomeEvent += new EventHandler(Bar.SomeMethod)&#xA0; </code></pre>\n</div>\n<div><span lang=\"EN\">Then when you done using <i>Bar</i>, but you are still using <i>Foo</i> then <i>Bar</i> will still remain alive as well. Not what you might have expected.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div>\n<pre><code>Window1.w1.TextBox1.TextChanged += new TextChangedEventHandler(this.TextBox1_TextChanged);</code></pre>\n</div>\n<div><span lang=\"EN\">The Window2 object will remains &#x201C;alive&#x201D; as long as TextBox1 in Windows1 remain alive.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are couple of approaches, the easiest one is simply to un-register the Windows2 object from its various event sources when the windows is about to close.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">e.g.: </span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>Window1.w1.TextBox1.TextChanged -= new TextChangedEventHandler(TextBox1_TextChanged);</code></pre>\n</div>\n<div><span lang=\"EN\">The second approach is to create some sort of indirections (e.g. &#x201C;Weak references&#x201D;). See this </span><span lang=\"EN\"><a href=\"http://blogs.msdn.com/greg_schechter/archive/2004/05/27/143605.aspx\"><span>Greg Schechter&#x2019;s blog</span></a></span><span lang=\"EN\"> for an example.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">2. <u>Use of Data Binding</u></span></b><b><u><span lang=\"EN\"> </span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_15.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/b324a-4.jpg\"><img border=\"0\" height=\"201\" src=\"https://wpfplayground.files.wordpress.com/2011/10/b324a-4.jpg?w=320&amp;h=201\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_15.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 2 &#x2013; Leak caused by use of Data Binding </span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak documented in this </span><span lang=\"EN\"><a href=\"http://support.microsoft.com/kb/938416/en-us\"><span>kb article</span></a></span><span lang=\"EN\">. It is triggered because:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The TextBlock control has a binding to an object (myGrid) that has a reference back to the TextBlock (it is one of myGrid children&#x2019;s).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Note that this type of a DataBinding leak is unique to a specific scenario (and not to all DataBinding scenarios) as documented in the </span><span lang=\"EN\"><a href=\"http://support.microsoft.com/kb/938416/en-us\"><span>kb article</span></a></span><span lang=\"EN\">.&#xA0; The property in the Path is a not a DependencyProperty and not on a class which implements INotifyPropertyChanged and in addition a chain of strong reverences must exist.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div>\n<pre><code>myDataBinding = new Binding(&quot;Children.Count&quot;);</code></pre>\n<pre><code>myDataBinding.Source = myGrid; </code></pre>\n<pre><code>myDataBinding.Mode = BindingMode.OneWay;</code></pre>\n<pre><code>MyTextBlock.SetBinding(TextBlock.TextProperty, myDataBinding);</code></pre>\n</div>\n<div><span lang=\"EN\">Same leaky code can be also written in XAML:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0; &lt;TextBlock Name=&quot;MyTextBlock&quot; Text=&quot;{Binding ElementName=myGrid, Path=Children.Count}&quot; /&gt;</code></pre>\n</div>\n<div><strong><span lang=\"EN\">Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are few of approaches, the easiest one is simply to clear the binding when the windows is about to close. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">e.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; BindingOperations.ClearBinding(MyTextBlock, TextBlock.TextProperty);</code></pre>\n</div>\n<div><span lang=\"EN\">Other approach is to set the mode of the data binding to <b><i>OneTime</i></b>. See the </span><span lang=\"EN\"><a href=\"http://support.microsoft.com/kb/938416/en-us\"><span>kb article</span></a></span><span lang=\"EN\"> for other ideas.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">3. <u>Use of Command Binding</u></span></b><b><u><span lang=\"EN\"> </span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_17.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/97bdf-5.jpg\"><img border=\"0\" height=\"191\" src=\"https://wpfplayground.files.wordpress.com/2011/10/97bdf-5.jpg?w=320&amp;h=191\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_17.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 3 &#x2013; Leak caused by use of Command Binding</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak triggered because Window2 object adds a command binding to Window 1. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">WPF Command Binding uses strong reference which causes the Windows2 object child window not be released as long as Windows2 remain alive.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>command = new RoutedCommand(&quot;ClearBox&quot;, this.GetType());</code></pre>\n<pre><code>command.InputGestures.Add(new KeyGesture(Key.F5));</code></pre>\n<pre><code>myCmdBinding = new CommandBinding(command, F5CommandExecute);</code></pre>\n<pre><code>Window1.w1.CommandBindings.Add(myCmdBinding); //add binding to Window 1</code></pre>\n</div>\n<div><u><span lang=\"EN\">Note<b>:</b></span></u><b><span lang=\"EN\"> </span></b><span lang=\"EN\">This is likely not a common code practice, but it is provided to demonstrate the idea certain usage of Command Binding can cause leaks.</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The easiest approach is simply to clear the CommandBinding when the windows is about to close.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">E.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0; Window1.w1.CommandBindings.Remove(myCmdBinding); </code></pre>\n</div>\n<div><strong><span lang=\"EN\">4.</span></strong><span lang=\"EN\"> <strong><u><span>Use of Static Event Handler</span></u></strong></span></div>\n<div></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/1e936-6.jpg\"><img border=\"0\" height=\"187\" src=\"https://wpfplayground.files.wordpress.com/2011/10/1e936-6.jpg?w=320&amp;h=187\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 4 &#x2013; Leak caused by use of Command Binding</span><span lang=\"EN\"></span></div>\n<div></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because the child window (Window2) has a reference (it registered to an event) to a Static event. Since object is static, Windows2 object will never get released. </span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div>\n<pre><code>Application.Current.Activated += new EventHandler(App_Activated);</code></pre>\n</div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Simply un-register the Windows2 object from the event sources when the windows is about to close.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">e.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>&#xA0;&#xA0;&#xA0; Application.Current.Activated -= new EventHandler(App_Activated);</code></pre>\n</div>\n<div><span lang=\"EN\">The second approach is to create You can consider other approaches like (1) from before. </span><span lang=\"EN\"></span></div>\n<div><strong><u><span lang=\"EN\">5.</span></u></strong><u><span lang=\"EN\"> <strong><span>Use </span></strong><b>of BitmapImage in Image Source</b></span></u><b><span lang=\"EN\"> </span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_21.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/b64ff-7.jpg\"><img border=\"0\" height=\"192\" src=\"https://wpfplayground.files.wordpress.com/2011/10/b64ff-7.jpg?w=320&amp;h=192\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_21.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 5 &#x2013; Leak caused by use of BitmapImage as Image Source </span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because under the covers WPF keeps a strong reference between the static BitmapImage (bi1) and the Image (m_Image1).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">BitmapImage (bi1) is declared Static so it is not Garbage Collected when Window2 is closed, since under the covers WPF hooks events on the BitmapImage (for example the DownloadFailed event) it causes the m_Image1 Image to remain alive. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This in turn causes the entire Window2 tree to also remain alive in memory even after you closed it. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak can happen only when you use BitmapImage. It does not appear when you use DrawingImage for example.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This issue is fixed in the next .Net service pack (.Net 3.5 Sp1)</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">bi1 =<span>&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span lang=\"EN\">//bi1 is static</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>&#xA0; </span></span><span lang=\"EN\">new</span><span lang=\"EN\"> BitmapImage(</span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">&#x201C;Bitmap1.bmp&#x201D;</span><span lang=\"EN\">,UriKind.RelativeOrAbsolute));</span></div>\n<div><span lang=\"EN\">//bi1.Freeze() //if you do not Freeze, your app will leak memory</span><span lang=\"EN\"> </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">m_Image1 = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Image();</span></div>\n<div><span lang=\"EN\">m_Image1.Source = bi1;<span>&#xA0; </span></span></div>\n<div><span lang=\"EN\">MyStackPanel.Children.Add(m_Image1); </span></div>\n<div></div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Workaround can depends on your sceanrio. One workaround would be to Freeze the BitmapImage. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">WPF does not hook events for objects that are frozen. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This woraround is used if you click on the 2<sup>nd</sup> checkbox above. Another workaround could be to Clone the BitmapImage or not to make it Static.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">In general you should Freeze objects whenever possible to improve the performance of your application and reduces its working set. Read more </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/ms750509.aspx\"><span>here</span></a></span><span lang=\"EN\">.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">E.g.:</span><span lang=\"EN\"></span></div>\n<div>\n<pre><code>bi1.Freeze();</code></pre>\n</div>\n<div><strong><u><span lang=\"EN\">6.</span></u></strong><u><span lang=\"EN\"> <strong><span>Use </span></strong><b>of BitmapImage in Image Source (Multiple Use)</b></span></u><b><span lang=\"EN\"> </span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_23.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/125e2-8.jpg\"><img border=\"0\" height=\"192\" src=\"https://wpfplayground.files.wordpress.com/2011/10/125e2-8.jpg?w=320&amp;h=192\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_23.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 6 &#x2013; Leak caused by use of BitmapImage as Image Source (multiple use)</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is related to the leak mentioned above.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because under the covers WPF keeps a strong reference between the static BitmapImage (bi1) and the Image (m_Image1).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">When the Image gets assigned a new source (e.g. m_Image1.Source = bi2;), WPF &#x201C;forgot&#x201D; to remove the previous &#x201C;old&#x201D; events it hooked under the covers for bi1. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Again, since bi1 is static and is not Garbage Collected, it forces the Image to remain alive which causes the entire Windw2 to leak. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This issue was introduced in .Net 3.5. It does not exist in .Net 3.0. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">It is fixed in the next .Net service pack (.Net 3.5 Sp1)</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">static</span><span lang=\"EN\"> BitmapImage bi1 = </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0; </span>new</span><span lang=\"EN\"> BitmapImage(</span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">&#x201C;Bitmap1.bmp&#x201D;</span><span lang=\"EN\">, UriKind.RelativeOrAbsolute));</span></div>\n<div><span lang=\"EN\">static</span><span lang=\"EN\"> BitmapImage bi2 = </span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0; </span></span><span lang=\"EN\">new</span><span lang=\"EN\"> BitmapImage(</span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">&#x201C;Bitmap2.bmp&#x201D;</span><span lang=\"EN\">, UriKind.RelativeOrAbsolute));</span></div>\n<div><span lang=\"EN\">&#x2026;</span></div>\n<div><span lang=\"EN\">if</span><span lang=\"EN\"> (bi2.CanFreeze)<span>&#xA0;&#xA0;&#xA0; </span></span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>bi2.Freeze();</span></div>\n<div><span lang=\"EN\">//bi1.Freeze() //even though you are really using bi2 for Image Source, you also need to Freeze bi1 it to avoid leak </span><span lang=\"EN\"><span>&#xA0;</span></span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">m_Image1 = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Image();</span></div>\n<div><span lang=\"EN\">m_Image1.Source = bi1;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span lang=\"EN\">// use un-frozen bitmap, which causes the leak</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">m_Image1.Source = bi2;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span><span lang=\"EN\">// use frozen bitmap</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">MyStackPanel.Children.Add(m_Image1);</span></div>\n<div></div>\n<div><strong><span lang=\"EN\">The Fix/Workaround:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The workaround is simply not use the code above or also Freeze the other BitmapImage e.g.: bi1.Freeze(); </span><span lang=\"EN\"></span></div>\n<div><strong><u><span lang=\"EN\">7. Use </span></u></strong><b><u><span lang=\"EN\">of downloaded BitmapImage in Image Source</span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_25.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/199ca-9.jpg\"><img border=\"0\" height=\"199\" src=\"https://wpfplayground.files.wordpress.com/2011/10/199ca-9.jpg?w=320&amp;h=199\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_25.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Figure 7 &#x2013; Leak caused by use of downloaded BitmapImage as Image Source</span><span lang=\"EN\"></span></div>\n<div><strong><span lang=\"EN\">Cause</span></strong><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak is triggered because WPF does not remove internal reference to certain objects (such as LateBoundBitmapDecoder, BitmapFrameDecode, etc) which are used during web download and causes the leak.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This leak only happens when you download an image from the internet. (E.g. it does not appear when you load images from your local machine)</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This issue will get fixed in the next .net service pack (.Net 3.5 Sp1)</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">To see the leak, you can launch above window, close it, and click on the &#x2018;Force GC&#x2019; button to force garbage collection. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">When you run the below commands in WinDbg, you will notice among others the following objects that remain in the heap. These are the objects that cause the leak and hold on to the Image control and the entire tree after you closed the Window2.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\">.loadby sos mscorwks</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">!DumpHeap -type System.Windows.Media.Imaging</span></div>\n<div></div>\n<div><span lang=\"EN\">53dadf18<span>&#xA0;&#xA0; </span>6<span>&#xA0;&#xA0; </span>72 System.Windows.Media.UniqueEventHelper`1</span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0; </span>[[System.Windows.Media.Imaging.DownloadProgressEventArgs, PresentationCore]]</span></div>\n<div><span lang=\"EN\">53da4374<span>&#xA0;&#xA0; </span>1<span>&#xA0; </span>108 System.Windows.Media.Imaging.PngBitmapDecoder</span></div>\n<div><span lang=\"EN\">53da09e0<span>&#xA0;&#xA0; </span>4<span>&#xA0; </span>112 System.Windows.Media.Imaging.BitmapSourceSafeMILHandle</span></div>\n<div><span lang=\"EN\">53d8d2f0<span>&#xA0;&#xA0; </span>1<span>&#xA0; </span>120 System.Windows.Media.Imaging.LateBoundBitmapDecoder</span></div>\n<div><span lang=\"EN\">53da0524<span>&#xA0;&#xA0; </span>1<span>&#xA0; </span>172 System.Windows.Media.Imaging.BitmapFrameDecode</span></div>\n<div><span lang=\"EN\">53da89c8<span>&#xA0;&#xA0; </span>3<span>&#xA0; </span>648 System.Windows.Media.Imaging.BitmapImage</span></div>\n<div></div>\n<div><strong><span lang=\"EN\">Code:</span></strong><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">// You will see leak when using BitmapImage loaded from the Internet</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">BitmapImage image = </span><span lang=\"EN\">new</span><span lang=\"EN\"> BitmapImage();</span></div>\n<div><span lang=\"EN\">image.BeginInit();</span></div>\n<div><span lang=\"EN\">image.UriSource = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Uri(</span><span lang=\"EN\">@<a href=\"http://www.somesite.com/some_image.png\">http://www.somesite.com/some_image.png</a></span><span lang=\"EN\">,</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span>UriKind.RelativeOrAbsolute);</span></div>\n<div><span lang=\"EN\">image.CacheOption = BitmapCacheOption.OnLoad;</span></div>\n<div><span lang=\"EN\">image.CreateOptions = BitmapCreateOptions.None;</span></div>\n<div><span lang=\"EN\">image.EndInit();</span></div>\n<div></div>\n<div><span lang=\"EN\">m_Image1 = </span><span lang=\"EN\">new</span><span lang=\"EN\"> Image();</span></div>\n<div><span lang=\"EN\">m_Image1.Source = image;<span>&#xA0;&#xA0; </span></span></div>\n<div><span lang=\"EN\">MyStackPanel.Children.Add(m_Image1);</span></div>\n<div></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The workaround is to consider downloading the BitmapImage first in other means to a temporary folder or to memory and then use the local BitmapImage . (See </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/system.net.webclient.downloadfile.aspx\"><b><span>WebClient.DownloadFile</span></b></a></span><span lang=\"EN\"> &amp; </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/system.net.webclient.downloaddata.aspx\"><b><span>WebClient.DownloadData</span></b></a></span><span lang=\"EN\"> APIs)</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">8. <u>CMilChannel leaks if initial HWND is destroyed on XP</u></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image001_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/bb078-9.jpg\"><img border=\"0\" height=\"199\" src=\"https://wpfplayground.files.wordpress.com/2011/10/bb078-9.jpg?w=320&amp;h=199\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image001_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Cause:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in versions of the framework up to and including .NET 3.5 SP1. This occurs because of the way WPF selects which HWND to use to send messages from the render thread to the UI thread. This sample destroys the first HWND created and starts an animation in a new Window. This causes messages sent from the render thread to pile up without being processed, effectively leaking memory.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">The workaround is to create a new HwndSource first thing in your App class constructor. This MUST be created before any other HWND is created by WPF. Simply by creating this HwndSource, WPF will use this to send messages from the render thread to the UI thread. This assures all messages will be processed, and that none will leak. <br>Note: This issue is rare; only implement the workaround if you&#x2019;re actually hitting this problem.</span><span lang=\"EN\"></span></div>\n<div><b><u><span lang=\"EN\">9. ShutDownListener leaked for every thread created using Binding</span></u></b><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Cause</span></b><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in versions of the framework up to and including .NET 3.5 SP1. This occurs because an event handler in WPF&#x2019;s data binding engine is hooked but never unhooked whenever binding is used on a new thread. This sample creates a number of new Threads, and for each creates a new Window using data binding.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">None Available</span><span lang=\"EN\"></span></div>\n<div><b><u><span lang=\"EN\">10. Create and destroy WriteableBitmap on XP in hardware rendering</span></u></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image002_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/4902c-0.jpg\"><img border=\"0\" height=\"193\" src=\"https://wpfplayground.files.wordpress.com/2011/10/4902c-0.jpg?w=320&amp;h=193\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image002_2.gif\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Cause</span></b><span lang=\"EN\">:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in version 3.5 SP1 ONLY. This occurs whenever a WriteableBitmap is created and destroyed on Windows XP using hardware rendering. This sample repeatedly creates, updates, and displays new WriteableBitmaps continuously to leak memory.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Force software rendering for the Window containing the WriteableBitmap by setting </span><span lang=\"EN\"><a href=\"http://msdn.microsoft.com/en-us/library/system.windows.interop.hwndtarget.rendermode.aspx\"><b><span>HwndTarget.RenderMode</span></b></a></span><span lang=\"EN\"> to RenderMode.SoftwareOnly. </span><span lang=\"EN\"></span></div>\n<div><b><u><span lang=\"EN\">11. Viewport3D w/ VisualBrush, WriteableBitmap, etc, leaks in Windows XP in SW</span></u></b><span lang=\"EN\"></span></div>\n<div></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/91e3b-11.jpg\"><img border=\"0\" height=\"195\" src=\"https://wpfplayground.files.wordpress.com/2011/10/91e3b-11.jpg?w=320&amp;h=195\" width=\"320\"></a></div>\n<div></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_ADD9/clip_image003_2.gif\"><b><i><span><span>&#xA0;</span></span></i></b></a><span lang=\"EN\"><br></span><b><span lang=\"EN\">Cause:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is a leak in WPF present in version 3.5 SP1 ONLY. This occurs when a VisualBrush, WriteableBitmap, or some select other classes are used within a Viewport3D in software rendering mode.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">The Fix/Workaround:</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">If available, use HW rendering. If HW rendering is not available, and you suspect that you&#x2019;re hitting this leak, try replacing your brush with a SolidColorBrush to see if the leak goes away. If the leak persists, you have another leak in your application. If the leak goes away consider using a different brush that does not leak; no other workaround is available.</span><span lang=\"EN\"></span></div>\n<div align=\"center\"><b><u><span lang=\"EN\">Debugging the leak</span></u></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">To experiment with finding the leak I used both </span><span lang=\"EN\"><a href=\"http://www.microsoft.com/downloads/details.aspx?FamilyID=a362781c-3870-43be-8926-862b40aa0cd0&amp;displaylang=en\"><b><span>CLR Profiler for the .NET Framework 2.0 </span></b></a></span><span lang=\"EN\">and </span><span lang=\"EN\"><a href=\"http://www.microsoft.com/whdc/devtools/debugging/installx86.mspx\"><b><span>WinDbg</span></b></a></span><span lang=\"EN\"> and both seem adequate. The advantage is that both are free downloads.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Useful tips:</span></b><span lang=\"EN\"> </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I found that:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>1.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">It is much easier to detect a leak if you purposely make it very large. E.g. add 50MB to the size of the objects that you suspect to be leaking.&#xA0; In my example I am allocating ~50MB of memory in each child window (byte[]). </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>2.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">If you only have a small leak it may require many iterations before you can conclude that leak exists when using Process Explorer or Task Manger.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>3.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Forcing Garbage Collector to reclaim memory helps to differentiate between objects that leak and the ones that don&#x2019;t. This code should do it: </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>4.<span>&#xA0; </span></span></span><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span>GC.Collect();</span></div>\n<div><span lang=\"EN\"><span>5.<span>&#xA0; </span></span></span><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span>GC.WaitForPendingFinalizers();</span></div>\n<div><span lang=\"EN\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>GC.Collect();</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>6.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Forcing the GC is useful when you visually inspect memory (e.g. using Process Explorer), if you use the CLR Profiler it already force GC between each heap snapshot.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Using CLR Profiler</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>1.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Launch the CLR Memory Profiler as admin on Vista </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>2.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Uncheck &#x201C;Allocations&#x201D;, &#x201C;Calls&#x201D; &amp; &#x201C;Profiling Active&#x201D; checkboxes</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>3.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Do &#x201C;Start Application&#x201D; and get the app to the point where you ready to take the &#x2018;before&#x2019; heap snapshot. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\"><span>4.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Then click &#x201C;Show Heap Now&#x201D;</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>5.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Now check the &#x201C;Profiling Active&#x201D; &amp; &#x201C;Allocations&#x201D; to enable profiling. </span></div>\n<div><span lang=\"EN\"><span>6.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Launch&#xA0; and then close the &#x2018;leaky&#x2019; window (e.g. &#x201C;Event Handler test&#x201D;)</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>7.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Take another &#x201C;Show Heap Now&#x201D;.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\"><span>8.<span>&#xA0;&#xA0;&#xA0; </span></span></span><span lang=\"EN\">Right-click on the last graph and &#x201C;Show New Objects&#x201D;.</span><span lang=\"EN\"> </span></div>\n<div><span lang=\"EN\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><b><span><span>&#xA0;</span></span></b></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/77223-12.jpg\"><img border=\"0\" height=\"157\" src=\"https://wpfplayground.files.wordpress.com/2011/10/77223-12.jpg?w=320&amp;h=157\" width=\"320\"></a></div>\n<div></div>\n<div></div>\n<div><span lang=\"EN\">You can see that my TextChangedEventHandler is holding on to 50MB of Byte[], as in image below:</span><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_14.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/ced1b-13.jpg\"><img border=\"0\" height=\"118\" src=\"https://wpfplayground.files.wordpress.com/2011/10/ced1b-13.jpg?w=320&amp;h=118\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_14.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Repeating the process for the &#x201C;Command Binding test&#x201D; window, shows the 50MB of CommandBinding object. See image:</span><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_12.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/10/ee4b5-14.jpg\"><img border=\"0\" height=\"109\" src=\"https://wpfplayground.files.wordpress.com/2011/10/ee4b5-14.jpg?w=320&amp;h=109\" width=\"320\"></a></div>\n<div><b><span><span><br></span></span></b><span lang=\"EN\"></span></div>\n<div><a href=\"http://blogs.msdn.com/blogfiles/jgoldb/WindowsLiveWriter/FindingMemoryLeaksinWPFbasedapplications_C681/image_12.png\"><b><span><span><br></span></span></b></a><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Using WinDBG</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Pretty much followed the directions provided in this blog </span><span lang=\"EN\"><a href=\"http://blogs.msdn.com/ricom/archive/2004/12/10/279612.aspx\"><b><span>here</span></b></a></span><span lang=\"EN\">.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">windbg -p </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0:004&gt; .loadby sos mscorwks</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I performed:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0:005&gt; !DumpHeap &#x2013;stat</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Twice (before and after the leak) </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#x201C;!DumpHeap &#x2013;stat&#x201D; showed this before the leak happened:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#x2026;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5695e56c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 460&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 18400 System.Windows.DependencyProperty</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5696975c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 188&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 20280 System.Windows.EffectiveValueEntry[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">79135df4&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 99&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 34440 System.Reflection.CustomAttributeNamedParameter[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0056ed60&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 297&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 37656&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Free</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7913b600&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 177&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 65376 System.Collections.Hashtable+bucket[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7912b884&#xA0;&#xA0;&#xA0;&#xA0; 3307&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 152020 System.Object[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">790fc6cc&#xA0;&#xA0;&#xA0;&#xA0; 8516&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 455296 System.String</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Total 32362 objects</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">After the leak &#x201C;!DumpHeap &#x2013;stat&#x201D; showed this :</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5543b1e8&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 189&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 11340 System.Windows.Markup.BamlAttributeInfoRecord</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">53d0d3ac&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 40&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 11424 System.Windows.ClassHandlers[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">569698f4&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 384&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 11888 MS.Utility.FrugalMapBase+Entry[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">790febbc&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 627&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 12540 System.RuntimeType</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5695e7c0&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 628&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 12560 System.Windows.DependencyProperty+FromNameKey</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5696975c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 244&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 15928 System.Windows.EffectiveValueEntry[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5542d18c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 676&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 16224 System.Windows.FrameworkPropertyMetadata</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">5695e56c&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 484&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 19360 System.Windows.DependencyProperty</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7913b600&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 80&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 38952 System.Collections.Hashtable+bucket[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7912b884&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 785&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 73608 System.Object[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0056ed60&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 288&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 103380&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; Free</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">790fc6cc&#xA0;&#xA0;&#xA0;&#xA0; 7218&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 373856 System.String</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 57&#xA0;&#xA0;&#xA0;&#xA0; 52433700 System.Byte[]</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">A &#x2018;suspicions&#x2019; allocation of 50MB of byte[] is shown</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I then performed:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0:005&gt; !dumpheap -type System.Byte[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#x2026;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">013894d4 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 60&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0138965c 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 228&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">013897c0 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 60&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01389a70 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 60&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0138f6d4 7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 500&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">06dc1000</span></b><span lang=\"EN\"> 7913b858 52428816&#xA0;&#xA0;&#xA0;&#xA0; </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">total 57 objects</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Statistics:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; MT&#xA0;&#xA0;&#xA0; Count&#xA0;&#xA0;&#xA0; TotalSize Class Name</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">7913b858&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; 57&#xA0;&#xA0;&#xA0;&#xA0; 52433700 System.Byte[]</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Total 57 objects</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">I then performed gcroot on the largest allocation and windbg reported</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">0:005&gt; !gcroot 06dc1000</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Note: Roots found on stacks may be false positives. Run &#x201C;!help gcroot&#x201D; for</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">more info.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Scan Thread 0 OSTHread 1280</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">ESP:37f2d8:Root:012f6d68(System.Windows.Threading.Dispatcher)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130c6b0(System.Windows.Input.InputManager)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130cd58(System.Windows.Input.StylusLogic)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130ce8c(System.Collections.Generic.Dictionary`2[[System.Object, mscorlib],[System.Windows.Input.PenContexts, PresentationCore]])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0130ced8(System.Collections.Generic.Dictionary`2+Entry[[System.Object, mscorlib],[System.Windows.Input.PenContexts, PresentationCore]][])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0135e1e8(System.Windows.Interop.HwndSource)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">012fab4c(TestWpfApp.Window1)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01334b90(System.Windows.Controls.TextBox)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0136f664(System.Windows.EffectiveValueEntry[])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0134deb0(System.Windows.EventHandlersStore)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01383340(MS.Utility.ThreeObjectMap)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01383320(MS.Utility.FrugalObjectList`1[[System.Windows.RoutedEventHandlerInfo, PresentationCore]])-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0138332c(MS.Utility.SingleItemList`1[[System.Windows.RoutedEventHandlerInfo, PresentationCore]])-&gt;</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">01383300(System.Windows.Controls.TextChangedEventHandler)-&gt;</span></b><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">0137e2d8(TestWpfApp.Window2)-&gt;</span></b><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">06dc1000(System.Byte[])</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">Scan Thread 2 OSTHread 1500</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">DOMAIN(005656C8):HANDLE(WeakSh):c1794:Root:01384aec(System.EventHandler)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">01384828(System.Windows.Documents.AdornerLayer)-&gt;</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">0137e2d8(TestWpfApp.Window2)</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This is pretty much the same info that the CLR memory Profiler reported.</span><span lang=\"EN\"></span></div>\n<div><b><span lang=\"EN\">Other tools</span></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are other third-party memory profilers such as </span><span lang=\"EN\"><a href=\"http://memprofiler.com/\"><b><span>SciTech&#x2019;s Memory Profiler</span></b></a></span><span lang=\"EN\"> , </span><span lang=\"EN\"><a href=\"http://www.red-gate.com/products/ants_profiler/index.htm\"><b><span>Red-Gate&#x2019;s ANTS Profiler</span></b></a></span><span lang=\"EN\"> , </span><span lang=\"EN\"><a href=\"http://www.yourkit.com/.net/profiler/index.jsp\"><b><span>YourKit Profiler</span></b></a></span><span lang=\"EN\">, </span><span lang=\"EN\"><a href=\"http://www.jetbrains.com/profiler/\"><b><span>JetBrains dotTrace 3.0</span></b></a></span><span lang=\"EN\"> and others. All provide nice and richer user interface and better support than the tools I used above.</span><span lang=\"EN\"></span></div>\n<div align=\"center\"><b><u><span lang=\"EN\">Other types of leaks</span></u></b><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">There are other types of managed memory leaks but outside the scope of this blog.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">One such typical leak is when a managed object is holding onto unmanaged resources.</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This can occur when:</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">a) Managed objects that hold on to the unmanaged resources and do not clean-up after themselves as they suppose to (typically in the </span><span lang=\"EN\"><a href=\"http://msdn2.microsoft.com/en-us/library/b1yfkh5e%28vs.71%29.aspx\"><b><span>IDisposable implementation</span></b></a></span><span lang=\"EN\">).</span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">b) Very small managed object that holds onto a large amount of unmanaged memory. The garbage collector sees only small amount of managed memory and does not realize that collection is required. This scenario is typically common with bitmaps since bitmaps have a small managed component holding on to a large size of unmanaged memory. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">This scenario is improved in .Net 2.0 with the introduction of the <i><a href=\"http://msdn2.microsoft.com/en-us/library/system.gc.addmemorypressure.aspx\"><b><span>AddMemoryPressure</span></b></a></i> API which allows objects to tell the garbage collector of the unmanaged allocation size. </span><span lang=\"EN\"></span></div>\n<div><span lang=\"EN\">WPF internally already forces garbage collection, so the recommendation to consider using the <i>AddMemoryPressure</i> API is only if you have a similar scenario in your own app.</span><span lang=\"EN\"></span></div>\n<div></div>\n</div>\n\t\t\t",
    "postId": "finding-memory-leaks-in-wpf-based-applications"
  },
  {
    "postId": "finite-state-machine-flutter",
    "content": "<p>Have you ever worked with a system, where it often end up in an unexpected state? For example, how about displaying both play and pause button at the same time in a media player. What about both red and green lights glowing at the sme time or an orange light turns to green in a traffic light system. These unexpected states are usually the result of poor handling of state transitions. A system must have a predefined set of states. The state of a system gets transferred to another state based on a certain external action. These transition between those states and actions those causing them should be clearly defined.</p><blockquote>A finite state machine (sometimes called a finite state automaton) is a computation model that can be implemented with hardware or software and can be used to simulate sequential logic and some computer programs.</blockquote><p>Finite State Machine helps a lot in User Interface flow.&nbsp;<a href=\"https://xstate.js.org/\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">xstate</a>&nbsp;is a popular javascript library to create a state machine. It can be used along with modern libraries like React or Vue for maximum efficiency. In this article I would like to create a simple state machine implementation in Flutter.</p><p>Flutter is cross platform native mobile application development tool, powered by Dart programming language. The reason I picked Flutter to try this State Machine is - Flutter - similar to React uses declarative approach, not just to define the UI, but also the logic (state) for the UI. Flutter community recommends several approaches for state management in Flutter applications like&nbsp;<a href=\"https://pub.dev/packages/provider\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">Provider</a>&nbsp;or&nbsp;<a href=\"https://felangel.github.io/bloc/#/\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">BLoC</a>. For simplicty I am going to stick to basic stateful widget to showcase our state machine implementation.</p><p>Consider we have to build a simple stopwatch. It runs on clicking the start button and has options to pause/resume or stop the timer. Following is the simple state diagram for stopwatch state machine.</p><p><img src=\"\" alt=\"alt text\" class=\"large\" data-src=\"https://storage.googleapis.com/jawahar-tech/fsm/state_machine.png\"></p><p>The number of states and transitions are clearly defined.</p><p><strong style=\"color: rgb(0, 0, 0);\">Initial</strong>&nbsp;- This is the initial state that represents timer 0 seconds.</p><p><strong style=\"color: rgb(0, 0, 0);\">Running</strong>&nbsp;- This is the active state of timer.</p><p><strong style=\"color: rgb(0, 0, 0);\">Idle</strong>&nbsp;- The is the passive state of timer. The timer is just paused.</p><p>It is clear from the diagram, that from the&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">initial</code>&nbsp;state, the only possible next state is&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">running</code>&nbsp;and similar rules are there for other states also. These kind of constraints helps us to reduce bugs in state transition.</p><p>Dart is a static typed language, so we can create separate types to represent State and Transitions.</p><h2>State</h2><p>A state entity should define its transition nature. A state can have multiple transitions. From the diagram, the&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">running</code>&nbsp;state has two transitions - to&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">initial</code>&nbsp;and to&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">idle</code>. We consider only forward transitions, that implies our state is the source and any transition will result in a target state.</p><script src=\"https://gist.github.com/jawahars16/dab533bfc2a8fa05d86b6154bc71c2e8.js\"></script><h2>Transition</h2><p>Lets look at Transition entity. Transition has to define the target state and the action that causes it.</p><script src=\"https://gist.github.com/jawahars16/2e9851ffd9dc739d14785e4ba363cfa1.js\"></script><p>I annotate action and&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">targetState</code>&nbsp;as required explicitly, since named parameters are optional in Dart. And I need those parameters as named for better readability, when we define our state machine, which we will do it in a while.</p><h2>State Machine</h2><p>State machine represents a collection of states and each state represents a collection of transitions. It also has another attribute to store the initial state. Current state of the machine has to exposed public, since we need this information in our widget to specify UI changes based on the state.</p><script src=\"https://gist.github.com/jawahars16/733aa670cb3e75c5f0d3614a89f1d9b5.js\"></script><p>We declared our state list as a hashmap. That's an added advantage when compared to the classic model of state machine using switch case. In switch-case it has to evaluate a certain set of conditions to find the right state, whereas thats not the case with hashmap.</p><p>But this is just an object model. It also required a function to make a transition from one state to another. The function accepts an action parameter and based on that it decides the next state.</p><script src=\"https://gist.github.com/jawahars16/cdd72dd56584b702d022ddee0430abe0.js\"></script><p>The function is not doing any complex stuff. From the list of current state's transitions, it identify the right one based on the action and return its target state.</p><h2>Stopwatch State Machine</h2><p>Now the state machine implementation is ready, let's define our states for stopwatch.</p><script src=\"https://gist.github.com/jawahars16/0da22b2b4f5bba642dff01b33ea8b936.js\"></script><p>The hash of states and an initial state has been given as input to the state machine. And whenever we call the transition function, it compute the next state. Now it is just matter of define our UI based on the current state.</p><script src=\"https://gist.github.com/jawahars16/a4cfc634e843252ad5ef23099cbeb56c.js\"></script><p>The button panel has been decided based on the current state. With this implementation, we made sure hat we never end up in an unexpected state. In a classical approach, we would have introduced couple of boolean flags in our state and make decisions based on that. That code might get complex when new states and actions introduced. But adding a new state to the state machine is an easy task.</p><p>If you notice every button press calls the same&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">_onAction</code>&nbsp;function with different action parameters. This is where we actually call the transition function of state machine.</p><script src=\"https://gist.github.com/jawahars16/cf2f06b2ef7345d5e8888929ac872377.js\"></script><p>We do that in&nbsp;<code style=\"color: rgb(0, 0, 0); background-color: rgb(240, 240, 240);\">setState</code>&nbsp;function, so that it automatically updates our UI widgets, whichever depends on the current state.</p><h2>Closing</h2><p>This is a very minimal and simple implementation of State Machine. The implementation can be extended to support various features like hierarchical states and history tracking. Sometimes during development, I often consider state transitions as trivial, but as the complexity grows and number of new states gets introduced, I realised that it is always good to have a dedicated system like state machine to manage the states and its transitions.</p><p>The example explained in this article is available in this&nbsp;<a href=\"https://github.com/jawahars16/finite-state-machine-flutter\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">git repository</a>.</p>"
  },
  {
    "postId": "gif-animation-in-wpf",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><span>GIF images cannot be used directly in a WPF application. There are lot of third party libraries which support GIF images in WPF. Here is one which could play animated sprite sheets in WPF. [<a href=\"http://www.codeproject.com/Tips/588253/GIF-Animation-in-WPF\" target=\"_blank\">Read more</a>]</span></div>\n\t\t\t"
  },
  {
    "postId": "golang-inheritance-vs-composition",
    "content": "<div><div><style data-emotion-css=\"3v4hyr\">.css-3v4hyr a .image-container .image-caption{color:rgb(227,208,168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration:underline;text-decoration:underline;}</style><div><p>Go claims itself as an object oriented programming language. Of course it is. But developers who came from Java or C#, would realise that OOPS in Go is not same as other languages. Let&apos;s see how Golang handles Inheritance.</p><style data-emotion-css=\"x4x4qs\">.css-x4x4qs{font-size:28px !important;}</style><h2></h2><blockquote><div>Inheritance - From Wikipedia - the mechanism of basing an object or class upon another object (prototype-based inheritance) or class (class-based inheritance), retaining similar implementation. </div></blockquote><div></div><p>The definition of inheritance has been explained in various articles and repeating that is not necessary. Let&apos;s jump into Golang way of inheriting. </p><div></div><p>Go does not support inheritance directly. Go is not that fond of IS-A relationship. Go prefers composition over inheritance.</p><div></div><p>Good read -  <a href=\"https://codeburst.io/inheritance-is-evil-stop-using-it-6c4f1caf5117\" target=\"_blank\" rel=\"noopener\">Inheritance is evil. Stop using&#xA0;it.</a></p><div></div><p>Following is a typical inheritance problem. </p><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/592x700.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609611060.png\"></div></div></div><div></div><p>In Java the design is achieved through following code using inheritance.</p><div><div><pre><code>class Walkable {<br>  void Walk() {<br>    // Walk implementation<br>  }<br>}<br><br>class Flyable extends Walkable {<br>  void Fly (){<br>    // Fly implementation<br>  }<br>}<br><br>class Bird extends Flyable {<br>  void Quack() {<br>    // Quack implemntation<br>  }<br>}<br></code></pre></div></div><p>Logically, bird <strong>is a</strong> flyable creature and all flyable creatures are walkable. The Bird class now has access to all attributes and functions from base classes. The same problem can be designed via Composition as below.</p><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/650x696.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612320.png\"></div></div></div><div></div><p>And it is implemented in Go as below. (Functions can be attached to structs in Go. It is not shown below for simplicity.)</p><div><div><pre><code>type Walkable struct {<br>  // Walkable attributes<br>}<br><br>type Flyable struct {<br>  // Flyable attributes<br>}<br><br>type Bird struct {<br>  Walkable<br>  Flyable<br>  // Bird attributes<br>}<br></code></pre></div></div><p>Look at the Bird struct. It is now composed of Walkable and Flyable structures and has access to all public attributes and functions owned by Walkable and Flyable structures. So we got the same effect as we got in Java. But unlike Java, Go inheritance has few limitations. </p><div></div><p> Let&apos;s look into the benefits of inheritance and will see how Go handles it.</p><ol><li><p>Function overriding (Runtime polymorphism)</p></li><li><p>Subtyping </p></li><li><p>Code reuse</p></li></ol><blockquote><div>Function overriding is the primary purpose of inheritance. Subtyping and code reuse can be done in different ways. End of the day, Inheritance is all about extending an objects&apos;s behavior.</div></blockquote><div></div><style data-emotion-css=\"1pq57dj\">.css-1pq57dj{font-size:22px !important;}</style><h3>Function overriding </h3><div></div><p>From my perspective, I always consider polymorphism is the primary purpose of inheritance especially runtime polymorphism. (Don&apos;t worry about compile time polymorphism - method overloading. For me it is just a syntactic sugar in few languages).  </p><div></div><p>Let&apos;s consider a basic example for function overriding. Talking tom is a toy that just listens and repeats. </p><div></div><p>Following is a very basic model for it.</p><div><div><pre><code>class TalkingTom {<br>  public void Listen(){<br>    System.out.println(&quot;Tom listening...&quot;);<br>  }<br><br>  public void Repeat(){<br>    System.out.println(&quot;Tom repeating...&quot;);<br>  }<br><br>  public void Play(){<br>    Listen();<br>    Repeat();<br>  }<br>}<br></code></pre></div></div><p>The functions Listen and Repeat will print messages appropriately.  Now consider we need to create one more toy by extending TalkingTom.</p><div><div><pre><code>class TalkingAngela extends TalkingTom {<br>  public void Listen() {<br>    System.out.println(&quot;Angela listening...&quot;);<br>  }<br><br>  public void Repeat() {<br>    System.out.println(&quot;Angela repeating...&quot;);<br>  }<br>}<br></code></pre></div></div><p>New object extends the built-in one and overrides few functionalities. And now calling the Start function on both objects will yield results appropriately.</p><div><div><pre><code>TalkingTom tom = new TalkingTom();<br>tom.Play();<br>// Output :<br>// Tom listening...<br>// Tom repeating...<br><br>TalkingAngela angela = new TalkingAngela();<br>angela.Play();<br>// Output :<br>// Angela listening...<br>// Angela repeating...<br></code></pre></div></div><div></div><div><div><div data-hook=\"divider-dashed\"><svg><line x2=\"740\" y1=\"1\" y2=\"1\"/></svg></div></div></div><div></div><p>Now let&apos;s see how to achieve the same behavior in Golang. First let&apos;s create a TalkingTom structure.</p><div><div><pre><code>type TalkingTom struct {<br>}<br><br>func (tom *TalkingTom) Listen() {<br>\tfmt.Println(&quot;Tom listening...&quot;)<br>}<br><br>func (tom *TalkingTom) Repeat() {<br>\tfmt.Println(&quot;Tom repeating...&quot;)<br>}<br><br>func (tom *TalkingTom) Play() {<br>\ttom.Listen()<br>\ttom.Repeat()<br>}<br></code></pre></div></div><p>Similarly will create another structure extending the previous one and override the Listen and Repeat functions.</p><div><div><pre><code>type TalkingAngela struct {<br>\tTalkingTom<br>}<br><br>func (tom *TalkingAngela) Listen() {<br>\tfmt.Println(&quot;Angela listening...&quot;)<br>}<br><br>func (tom *TalkingAngela) Repeat() {<br>\tfmt.Println(&quot;Angela repeating...&quot;)<br>}<br></code></pre></div></div><p>But for our surprise, Go behave differently when we create objects for these two structures and invoke the Play function.</p><div><div><pre><code>var tom = &amp;TalkingTom{}<br>tom.Play()<br>// Output :<br>// Tom listening...<br>// Tom repeating...<br><br>var angela = &amp;TalkingAngela{}<br>angela.Play()<br>// Output :<br>// Tom listening...<br>// Tom repeating...<br></code></pre></div></div><div></div><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/499x499.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613581.jpg\"></div></div></div><div></div><div></div><p>So what went wrong !! Usually when we do inheritance in Java, all base class functions will be copied to derived class. Remember the Walkable, Flyable example from beginning of this article. Flyable has all Walkable functions and Bird has both walkable and Flyable functions. When Play function of TalkingAngela gets called, it literally called Listen and Repeat functions owned by TalkingAngela object and not TalkingTom object. So the override works as expected.</p><div></div><p>In case of Go, the situation is quite different. TalkingAngela has access to all functions of TalkingTom. So even though we didn&apos;t define the function Play in TalkingAngela, it is totally legal to call Play function from TalkingAngela. But the function Play is not exactly owned by TalkingAngela. It is still owned by TalkingTom even after Composition. So the Listen and Repeat functions are called on TalkingTom structure, not on TalkingAngela.</p><div></div><div><div><div data-hook=\"imageViewer\"><div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/592x192.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609614896.png\"></div></div></div><div></div><p>Both of the following statements yields same results.</p><div><div><pre><code>angela.Play() // This must be just syntactic sugar, I guess :)<br>angela.TalkingTom.Play()<br></code></pre></div></div><p>So function overriding is not possible with Golang. Of course the above problem can be solved by overriding the Play function also. Then it is nothing but creating a whole new structure instead of extending from existing one.</p><div></div><h3>Subtyping</h3><h3></h3><p>This is another benefit of Inheritance in traditional OO programming. You can substitute the derived class object in place for base class object. For example if there is a function which is expecting the TalkingTom object, it should be legal to pass TalkingAngela to that function.</p><div><div><pre><code>  public static void Play(TalkingTom toy){<br>    toy.Start();<br>  }<br><br>  public static void main(String[] args) {<br>    // Both statements are legal<br>    Play(new TalkingTom());<br>    Play(new TalkingAngela());<br>  }<br></code></pre></div></div><p>But this is not the case in Golang. In Go, TalkingAngela is just composed of TalkingTom and it is not legal to substitute TalkingAngela object in place of TalkingTom.</p><div><div><pre><code>func play(toy *TalkingTom) {<br>\ttoy.Play()<br>}<br><br>func main() {<br>\tplay(&amp;TalkingTom{})<br>\tplay(&amp;TalkingAngela{})<br>}<br><br>&quot;Error: cannot use TalkingAngela literal (type *TalkingAngela) as type *TalkingTom in argument to play&quot;<br></code></pre></div></div><p>But luckily, this can be achieved through interfaces in Go.</p><div></div><h3>Code reuse</h3><h3></h3><p>Go will gain this benefit from Composition as all the functions of composed structures seamlessly embedded into the parent structure. Just by embedding TalkingTom structure into TalkingAngela, it it totally legal to access all functions from TalkingAngela without redefining them. </p><h2></h2><h2>Conclusion</h2><h2></h2><p>Go is modern, fast and concurrent, but extending an object&apos;s behavior is quite limited unlike other Object Oriented Programming languages. Also we saw that other secondary objectives like subtyping and code reuse are still possible.</p></div></div></div>"
  },
  {
    "content": "\n\t\t\t\t<p><a href=\"http://msdn.microsoft.com/library/windows/apps/BR226143\">DisplayProperties</a> class provides various properties that are related to the physical display. For most of these properties, the class provides events to allow clients to monitor for changes in the properties.</p>\n<p>Respond to the static OrientationChanged event. Determine the orientation from the CurrentOrientation property.</p>\n<p>&#xA0;<span id=\"more-22\"></span></p>\n<pre><code>    partial class MainPage<br>    {<br>        public MainPage()<br>        {<br>            InitializeComponent();<br>            DisplayProperties.OrientationChanged += OnOrientationChanged;<br>        }<br><br>        void OnOrientationChanged(object sender)<br>        {<br>            var orientation = DisplayProperties.CurrentOrientation; // ... <br>        }<br>    }</code></pre>\n<div></div>\n\t\t\t",
    "postId": "handling-orientation-changes-in-windows-8"
  },
  {
    "postId": "how-to-process-waiting-window-messages-during-a-loop",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<div>The standard way of&#xA0;allowing Windows messages to be processed is to call <strong>Application.DoEvents</strong>  method. However, the Application class in WPF does not have a DoEvents  method. So, what you need&#xA0;is to find a way of calling this method,&#xA0;or an  alternative method! Actually, it is surprisingly easy to do so: Instead  of calling</div>\n<div></div>\n<div> </div>\n<div><span><span>Application</span>.DoEvents();</span></div>\n<div></div>\n<div>you&#xA0;can call:</div>\n<div></div>\n<div><span>System.Windows.Forms.<span>Application</span>.DoEvents();</span></div>\n<div></div>\n<div>This will work as desired!</div>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<p>Expression Blend team provides the ability to wire up some events to viewmodel through commands like SelectionChanged of a ListBox, etc using <strong>System.Windows.Interactivity.dll</strong>. You can bind a Command to any event with WPF controls. There is also a way to bind command parameter also, so that view state can passed to the viewmodel.</p>\n<p><span id=\"more-5\"></span></p>\n<pre><code>&lt;ListBox x:Name=&quot;list&quot;&gt;<br> &lt;i:Interaction.Triggers&gt;<br> &lt;i:EventTrigger EventName=&quot;SelectionChanged&quot;&gt;<br> &lt;i:InvokeCommandAction Command=&quot;{Binding SelectionChangedCommand}&quot;<br> CommandParameter=&quot;{Binding ElementName=list, Path=SelectedItem}&quot;/&gt;<br> &lt;/i:EventTrigger&gt;<br> &lt;/i:Interaction.Triggers&gt;<br> &lt;str:String&gt;Test Item 1&lt;/str:String&gt;<br> &lt;str:String&gt;Test Item 2&lt;/str:String&gt;<br> &lt;str:String&gt;Test Item 3&lt;/str:String&gt;<br> &lt;/ListBox&gt;<br><br><br></code></pre>\n<p><strong>Custom Command Action</strong></p>\n<p>But there are some scenarios where you need to pass the exact event args of the event to the ViewModel. For example, the Drop event, where user can drop a file from system&#x2019;s windows explorer to the application. The InvokeCommandAction provided by default does not have this option. If you leave the CommandParameter property as empty, then you will get a null value in viewmodel. You could see they ignore the event args completely, by reflecting the code.</p>\n<p>But still there is a way to achieve this. We can create our custom CommandAction inheriting from TriggerAction. I have provided the source code. This will pass the event args as the parameter if CommandParameter not specified and still works if it is specified like legacy one.</p>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/Sample.zip\" target=\"_blank\">Download Source here</a></p>\n<p>Happy Commanding. &#x1F642;</p>\n\t\t\t",
    "postId": "invokecommandaction-with-eventargs-as-command-parameter"
  },
  {
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>Asynchronous programming becomes unavoidable in todays programming. In this article, I would like to talk about, how Javascript evolved to handle asynchronous programming using callbacks. What is a callback? </p><div></div><style data-emotion-css=\"1pq57dj\"> .css-1pq57dj{font-size: 22px !important;}</style> <em>Consider a scenario of a candidate who attends an interview in a reputed organisation. Once the interview is over the HR told that they will process the feedback and get back to him. Now the candidate would go back to his current job and continue his routine life until he get a callback from the new organisation. He would not wait at the gates of that company until he get a response. Once he get the callback he would act upon it. The callback could be positive or negative and the candidate will take action accordingly.</em> <div></div><p>In computer programming, a function need not to wait for the other function to return immediately. The other function could be a long running process or the response time of the function might not be predictable. So waiting for the function to return is not efficient. Instead it can go back to other part of program and continue the execution. But it should give a handler to the long running function, so that it can connect to the caller once it is done with the long running process. Similar to the candidate who gave the contact information to the interviewer so that they can give a callback.</p><div></div><p>Consider a scenario where you want to get the list of user reviews.</p><div> <div> <pre><code class=\"javascript\">getUserReviews(function (reviews) {<br>  // Process the reviews<br>});<br></code></pre> </div></div><p>Say <em>getUserReviews</em> is a function that will hit an endpoint and invoke the success callback once it got the response. This is the common way to achieve asynchronous programming in Javascript. Though callbacks are popular even in modern Javascript, it has a major drawback in complex scenarios. Things cannot be simple as above always.</p><div></div><p>In the above example we cannot just get user reviews. In a typical e-commerce website, we see user reviews for products. So in this case, we need to get the list of products first before fetching user reviews. So code goes like this.</p><div> <div> <pre><code class=\"javascript\">getProducts(function (products) {<br>  getUserReviews(products, function (reviews) {<br>    // Process the reviews<br>  });<br>})<br></code></pre> </div></div><p>From the list of products received, we fetch user reviews. We are not yet done. To fetch the list of products we need the user to be signed in. So we may have to pass the authentication token to every request. Things started to getting a little complex now.</p><div> <div> <pre><code class=\"javascript\">authenticate(user, password, function (token) {<br>  getProducts(token, function (products) {<br>    getUserReviews(token, products, function (reviews) {<br>      // Process the reviews<br>    });<br>  })<br>})<br></code></pre> </div></div><p>Look at the number of indentation levels. Things could go worse in complex situations. When you have lots of callback functions in your code! it gets harder to work with them, the more of them you have in your code and it gets particularly bad when you need to do loops, try-catch blocks and things like that. This term is often referred to as Callback Hell.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/400x400.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610597.jpg\"></div></div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2><strong>Promises - the Rescuer</strong></h2> <div></div><p>One of the approach to avoid callback hell is to use Promises. After the introduction of Promise pattern, it is easier to achieve asynchronous programming with simple and readable code. What is promise in Javascript?</p><div></div><blockquote>Bob once promised to get a Playstation 4 as a birthday gift to his son Bruce. Bruce was so excited. But Bruce didn&apos;t get the PS4 yet, but he just got the promise from his father. Now with all the excitement he get back to his routine life. On Bruce&apos;s birthday Bob may fulfil his promise or he may not. If he fails to fulfil the promise he has to give a reason to Bruce on that.</blockquote> <div></div><p>In Javascript programming, Promise is an object that may produce a single value in future. The single value could be the expected value or a reason why it cannot produce the expected value.</p><div></div><p>Our above example of getting the user reviews can be rewritten as below. Assuming all those functions will return a Promise object instead of accepting callback function as argument.</p><div> <div> <pre><code class=\"javascript\">authenticate(user, password)<br>  .then(token => getProducts)<br>  .then((token, products) => getUserReviews)<br>  .then((token, reviews) => {<br>    // Process the reviews<br>  })<br></code></pre> </div></div><p>The code becomes very simple and readable. The catch function let us handle any error. Another good thing about promise is that the response handlers can be chained. A call to promise.then returns a promise, so that we can call the next .then on it. When a handler returns a value, it becomes the result of that promise, so the next .then is called with it.</p><div></div><p>But if you notice, then and catch functions still use callbacks as argument. That is not a problem. The code is still readable. But ES6 added syntactic sugar for promises that makes the code more readable and simple.</p><div></div><h2><strong>Async / Await</strong></h2> <div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/500x453.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612278.jpg\"></div></div></div><div></div><p>Async/Await is a special syntax introduced in ES6 to make Promise code more readable and simple. To use <em>await</em> keyword inside a function, the function has to be marked as <em>async</em>. </p><div></div><p>When Javascript engine encounter a function call with await statement, it will queue the execution of that function and get back to the caller function. This means that the statements below the awaited function will not be executed until the awaited function resolved to a value.</p><div> <div> <pre><code class=\"javascript\">function callerFunction(){<br>  asyncFunction();<br>  // Below functions will be called right after function1<br>  function2();<br>  function3();<br>}<br><br>async function asyncFunction() {<br>  await function1();<br>  // Below functions cannot be called until function1 resolved/rejected.<br>  function4(); <br>  function5();<br>}<br></code></pre> </div></div><div></div><p>Not all the functions can be marked as await. As I already said async/await is just a syntactic sugar for promises. So it is still the promises which is doing all the magic. To mark a function as await, the function should return a promise object. If a function returning promise is not awaited, it will directly a promise object. That can be either awaited or handled via then and catch functions.</p><div></div><p>Following two pieces of code does exactly the same thing.</p><div> <div> <pre><code class=\"javascript\">try {<br>  var users = await getUsers();<br>  console.log(`${users.length} users found`);<br>} catch (error) {<br>  console.log(error);<br>}<br></code></pre> </div></div><div></div><div> <div> <pre><code class=\"js\">var promiseObject = getUsers();<br>promiseObject<br>  .then(users => console.log(`${users.length} users found`))<br>  .catch(error => console.log);<br></code></pre> </div></div><p>So async functions are the ultimate solution to write more readable asynchronous code. To understand more about async / await, I would recommend you to read more about Javascript Promises. Thanks for reading !!! </p></div></div></div>",
    "postId": "javascript-asynchronous-programming"
  },
  {
    "postId": "javascript-compiled-or-interpreted",
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>I started my career with .NET. I was a WPF developer and use Visual Studio as the primary IDE. Though I am a desktop application developer, I was aware of JavaScript programming. But I thought Javascript is a toy language and its primary purpose is to manipulate web pages.</p><div></div><p>But the evolution of Javascript is tremendous. When I started learning JavaScript throughout the learning i used to compare Javascript with c#. </p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2><strong>Browser as runtime</strong></h2> <div></div><blockquote> <div>Browser is for JavaScript as CLR is for .NET.</div></blockquote> <div></div><p>The runtime of .NET is CLR (Common Language Runtime) whereas the runtime of Javascript is browser. CLR cannot interpret C# as it is. CLR needs C# to be compiled down to intermediate language (IL) to interpret. But browsers can interpret Javascript as it is.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1658x738.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610907.png\" class=\"large\"></div></div></div><div></div><p>So it&apos;s obvious that Javascript is an interpreted language. But unlike other scripting languages JavaScript possess some characteristics of a compiled language.</p><div></div><h2><strong>Compile time errors</strong></h2> <div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/919x269.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612358.png\"></div></div></div><div></div><style data-emotion-css=\"1pq57dj\"> .css-1pq57dj{font-size: 22px !important;}</style> <p>Unlike other interpreted languages Javascript produces errors upfront. Usually interpreted languages will be executed line by line. So if there is an error at line 100, all 99 lines will be executed before it gets aware of the issue in 100th line.</p><div></div><h3>For an example consider the below shell script. </h3> <div> <div> <pre><code>#!/bin/bash<br># GNU bash, version 4.3.46<br><br>a=\"Hello\"<br>b=\"World\"<br>echo $a $b<br>int a = 2 + 2<br></code></pre> </div></div><p>The output of the above script will produce &quot;Hello World&quot; along with an error saying &quot;int: Command not found&quot;. So it is able to execute valid statements ignoring the invalid statement. As an interpreted language, Javascript also expected to work in the same way, but it wont.</p><div></div><p>Consider the below Javascript code.</p><div> <div> <pre><code>a=\"Hello\"<br>b=\"World\"<br>console.log(a + b)<br>int a = 2 + 2;<br></code></pre> </div></div><p>The above code will not produce any output except saying &quot;Syntax error. Unexpected token&quot; at line 4. The reason for this behavior is that Javascript undergo one other process before it gets executed - Parsing. The code will be transformed into abstract syntax tree. Abstract syntax trees are data structures widely used in compilers, due to their property of representing the structure of program code. An AST is usually the result of the syntax analysis phase of a compiler. Even thought Javascript is not compiled, it goes through one of the crucial step in a typical compilation process.</p><div></div><p>So it is not the right term to call these errors as compiler errors. Instead these are parser errors. And this behavior applicable only to syntax errors. So the process parsing can only catch syntax errors upfront. Other errors like type errors cannot be caught before and it will be thrown when that line is interpreted.</p><div></div><p>Kyle Simpson explains the behavior in below tweet.</p><div> <div> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Looks like javascript is interpreted line by line. Any thoughts ? <a href=\"https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw\">#javascript</a> <a href=\"https://twitter.com/getify?ref_src=twsrc%5Etfw\">@getify</a> <a href=\"https://twitter.com/YDKJS?ref_src=twsrc%5Etfw\">@YDKJS</a> <a href=\"https://twitter.com/FrontendMasters?ref_src=twsrc%5Etfw\">@FrontendMasters</a> <a href=\"https://t.co/yF8YBrW8KU\">pic.twitter.com/yF8YBrW8KU</a></p>&mdash; Jawahar (@jawahars_16) <a href=\"https://twitter.com/jawahars_16/status/1030298998463062016?ref_src=twsrc%5Etfw\">August 17, 2018</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </div></div><h2><strong>Functions can be invoked before declaring</strong></h2> <div></div><p>In a typical interpreted language, it is not possible to invoke a method before declaring it. Order of declaring and invoking a method does matter in interpreted languages. The below code will fail for the same reason. At the time of executing line number 4, it has no idea of the method &quot;say_hello&quot; and will fail.</p><div> <div> <pre><code>#!/bin/bash<br># GNU bash, version 4.3.46<br><br>say_hello<br><br>say_hello()<br>{<br>    echo \"Hello World\"<br>}<br></code></pre> </div></div><p>But for surprise, Javascript never worried about the order of declaring and invoking a function. The below code will work without any issue.</p><div> <div> <pre><code>sayHello()<br><br>function sayHello () {<br>  console.log('Hello World!')<br>}<br></code></pre> </div></div><p>The reason for this behavior is Javascript go though a different process called <u>hoisting</u> before it gets executed. Hoisting is the default behavior of moving all the declarations at the top of the scope (to the top of the current script or the current function). In other words, a variable can be used before it has been declared. But keep in mind that hoisting can only move declarations to the top and not the assignments.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/742x308.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613706.png\"></div></div></div><div></div><div></div><h2><strong>Babel - a Javascript compiler</strong></h2> <blockquote> <div>If Javascript is not compiled, then why there are so many Javascript compilers around? </div></blockquote> <p>As any other programming languages, Javascript also has different versions. ECMA is the term used to specify a particular version of Javascript. In reality ECMA is specification and Javascript is one of the implementation of it. As we already discussed, browser is the runtime for Javascript. </p><div></div><p>When Javascript gets evolved with advanced features and new syntax, browsers should also evolve to support the new syntax. But not all the browsers support the latest version of Javascript. The level of compatibility is also not same across browsers. For example some browsers support 90% and some support 10%.</p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1340x567.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609614812.png\" class=\"large\"></div></div></div><div></div><p>Javascript compilers now comes into picture. It transforms the non-compatible latest Javascript code into compatible code (mostly ES5) that can be recognised by all browsers. Ideally this process cannot be called compiling, since the input and output format has the same level of abstraction. So the actual term is <u>Transpiler</u>.</p><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1792x844.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609616177.png\" class=\"large\"></div></div></div><div></div><h2><strong>Conclusion</strong></h2> <div></div><p>We can conclude saying that Javascript is an interpreted language. But Javascript is already advancing very fast and some of the modern browsers actually compile Javascript for better performance. V8 engine is one of that. The V8 Engine which is built by Google is open source and written in C++. This engine is used inside Google Chrome. Unlike the rest of the engines, however, V8 is also used for the popular Node.js runtime.</p><div></div><p>V8 was first designed to increase the performance of JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines do such as SpiderMonkey or Rhino (Mozilla). The main difference here is that V8 doesn&#x2019;t produce byte code or any intermediate code.</p></div></div></div>"
  },
  {
    "content": "\n\t\t\t\t<p>This article explains how to adapt the Syncfusion docking manager to an MVVM application. Since our WPF Docking Manager is not an <i>item control</i>, it is not possible to have a traditional <i>item-source</i> binding to a collection of objects in the view model. This can, however, be achieved by creating a wrapper or adapter for the docking manager.  </p>\n<p>I have used a simple text-reader application to demonstrate this approach. <a href=\"http://www.syncfusion.com/blogs/post/MVVM-Adapter-for-WPF-Docking-Manager.aspx\">(Read more)</a></p>\n\t\t\t",
    "postId": "mvvm-adapter-for-syncfusion-wpf-docking-manager"
  },
  {
    "postId": "navigation-model-for-simple-mvvm-applications",
    "content": "\n\t\t\t\t<p>Not all the WPF applications are huge. A very few are still used as utilities, installers and simple tools to achieve a specific task. Navigation is very trivial in applications. PRISM supports a very nice navigation framework.&#xA0;To develop such simple WPF applications, developers really hesitate to use big frameworks like PRISM, Caliburn Micro, etc.</p>\n<p>So I thought of develop a simple helpers which achieve navigation in small MVVM applications without need of any enterprise frameworks. Let us develop a simple application looks like below, using this simple navigation model.</p>\n<p><span id=\"more-273\"></span></p>\n<p>Download the sample and you will find a Navigation library with simple helper classes.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png\"><img data-attachment-id=\"276\" data-permalink=\"https://wpfplayground.wordpress.com/2014/06/04/navigation-model-for-simple-mvvm-applications/navigation/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png\" data-orig-size=\"525,350\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"navigation\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=525\" src=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=736\" alt=\"navigation\" srcset=\"https://wpfplayground.files.wordpress.com/2014/06/navigation.png 525w, https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/06/navigation.png?w=300 300w\" sizes=\"(max-width: 525px) 100vw, 525px\"></a></p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>&#xA0;</p>\n<p>Declare regions in the shell, where the views needs to be injected at run time.&#xA0;Following is the way to declare a region in XAML.</p>\n<pre><code>&lt;ContentControl<br>nav:NavigationRegion.RegionName=&quot;{x:Static constants:RegionNames.MainRegion}&quot; /&gt;<br></code></pre>\n<p>This ContentControl will act as a region and views will be injected as content. NavigationService is a static class which contains the following methods.</p>\n<ul>\n<li>NavigateTo (Method which helps to inject a view into specific region)</li>\n<li>GoBack (Method helps to navigate back to previous view)</li>\n<li>CanGoBack (Method decides whether the region has the ability to go back)</li>\n<li>ClearViews (Method used to clear all views from the region)</li>\n</ul>\n<p>NavigateTo method accepts two parameters, the region name and the view object. The NavigationService will keep a record of registered regions. Also it keep track of views history in a stack.</p>\n<p>Here is how navigate and go back will work,</p>\n<pre><code>    public class ShellViewModel<br>    {<br>        public ShellViewModel()<br>        {<br>            NavigationService.NavigateTo(RegionNames.HeaderRegion, new HeaderView(new HeaderViewModel()));<br>            NavigationService.NavigateTo(RegionNames.NavigationRegion, new NavigationView(new NavigationViewModel()));<br>            NavigationService.NavigateTo(RegionNames.MainRegion, new FirstView());<br>        }<br>    }<br></code></pre>\n<p>The back button in the header region will be disabled, if there is no possibility for back navigation.</p>\n<pre><code>        public DelegateCommand&lt;object&gt; BackCommand<br>        {<br>            get<br>            {<br>                return new DelegateCommand&lt;object&gt;(this.OnGoBack, this.CanGoBack);<br>            }<br>        }<br><br>        private void OnGoBack(object obj)<br>        {<br>            NavigationService.GoBack(RegionNames.MainRegion);<br>        }<br><br>        private bool CanGoBack(object arg)<br>        {<br>            return NavigationService.CanGoBack(RegionNames.MainRegion);<br>        }<br></code></pre>\n<p><a title=\"Download Sample\" href=\"https://dl.dropboxusercontent.com/u/71941230/SourceCode/SourceCode/NavigationDemo.zip\">Download Sample</a></p>\n<p>Happy Coding!!!</p>\n<p>&#xA0;</p>\n\t\t\t"
  },
  {
    "postId": "no-more-dangling-pointers-with-rust",
    "content": "<p>In programming memory can be categorised into two - Static and dynamic memory.</p><p>When memory size of the variables are known at compile time, we call that as static memory. For example primitive data types like int, floats and arrays are fixed size. Fixed size values usually sits in Stack. When a function start executing, all local variables get allocated in Stack. Once the function completes execution, local variables goes out of scope and will be removed from Stack.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/static_memory.png\"></p><p>Dynamic memory is exact opposite. If you think that the memory size of the variables might change at runtime, that is dynamic memory. Array List is a good example for Dynamic memory. It gets resized during runtime. Since the memory size is not known at compile time, this cannot be stored in Stack. Dynamic memory gets stored in a special section called heap. Pointers are fixed size. So in below example, pointers gets stored in stack and corresponding data gets stored in heap memory.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/dynamic_memory.png\"></p><p><br></p><p>Once the function done executing, the local variables goes out of scope and pointers will be removed from the stack. But what about heap memory? Languages like Java, C# has garbage collectors, that will take care of removing unused memory from heap. Memory management is manual for languages like C, C++.</p><h1>Dangling Pointers</h1><p>Dangling pointers is a situation where you have valid pointers in the stack, but it is pointing to invalid memory. You might end up in this situation, when you deallocate the heap memory before the pointers in stack deallocated.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/dangling_pointer.png\"></p><p>This is a security issue. Because when you deallocate a memory, we are informing Operating System, that we no longer need this section of memory. So OS will mark that piece of memory as <em>ready to allocate </em>and allocate to other applications, when they request for memory. If that happen, we end up having pointers to memory location that we don\u2019t own. What if we try to deallocate that memory?</p><p>This is a common issue in languages with manual memory management. In a recent article, it says that 70% of security patches released by Microsoft contains memory safety related fixes.</p><p>Let\u2019s go through a simple example in C++, to create a dangling pointer situation. Usually in C++, memory allocated and deallocated through a general pattern. Constructor in a class gets invoked when a class initialised and this is the right place to allocate memory in heap.Destructor will be invoked when the class instance goes out of scope, and this is the right place to deallocate memory from heap. Assume we already created a class that does allocation and deallocation of memory in constructor and destructor respectively.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">int</span> main() {\n  SomeClass pointer1 = SomeClass();\n  SomeClass pointer2 = pointer1;\n}\n</pre><p>In above example code, there are two variables declared but both holding the same value. When constructor invoked, it allocates a heap memory. Then we are declaring one more variable and assigning the same value. In C++ usually, when you assign a value of complex type, it does a shallow copy (unless you explicitly implemented copy constructor) instead of deep copy. That means only only pointer gets copied in Stack, but not the heap memory. Actually it is not recommended to copy heap memory for performance reasons. Now the final memory layout looks like that we have two pointers pointing to the same heap memory.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/cpp.png\"></p><p>Now when the function done with execution, local variables goes out of scope and it invokes destructor. First pointer2 invokes destructor that deallocates the heap memory. At this point, pointer1 becomes dangling pointer. It points to a memory that is already deallocated.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/dangling_pointer_cpp.png\"></p><p>From our example, we understood that the primary cause of dangling pointer is having multiple owners for the same resource. Because when one pointer deallocates memory other pointers became dangling pointers.</p><h1>Ownership</h1><p>Rust solves this problem by enforcing single owner concept during compile time. Rust follows certain rules for Ownership.</p><h3><strong>Rule #1</strong></h3><blockquote>Every value in Rust has an owner.</blockquote><p>Generally the variable is called as owner for that value.<img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/owner.png\"></p><h3><strong>Rule #2</strong></h3><blockquote>Value&nbsp;dropped,&nbsp;when owner goes out of scope.</blockquote><p>When owner goes out of the scope, heap memory will be deallocated out of the box.</p><h3><strong>Rule #3</strong></h3><blockquote>Only one owner per value.</blockquote><p>Multiple owners for a value is simply not allowed in Rust. Consider we declared one more variable and assign the same value as we did in C++ example.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/invalid_variable.png\"></p><p>Rust will make vector2 variable as new owner and vector1 as invalid. Rust will behave like as if the variable vector1 is not even declared. Rust gives compilation error for above example.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/error1.png\"></p><p>This not only happens when you reassign variables. The ownership also gets transferred when a variable passed to a different function. The below code also fail in Rust.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/error2.png\"></p><p>This ensures single owner for a value and prevents memory unsafe issues. But this looks like complicated and does not allow us to do typical programming. Because in a typical programming, we declare variables, we pass it to other variables and functions and that is how other parts of our program will get access to the variables\u2019s value. But looks like that Rust is not allowing us to do that.</p><h1>Borrowing</h1><p>In reality, most of the times we don\u2019t want to transfer ownership. Instead we just want to pass the value of a variable. To do that, Rust has another concept called Borrowing. Borrowing is a process of passing the variables to other parts of program without transferring the ownership. Just by adding an ampersand(&amp;) before the variable, we say that we don\u2019t want the ownership, but only a reference to that variable.</p><p><img src=\"\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/dangling_pointer/reference.png\"></p><p>Again, Rust follows certain rules to achieve borrowing.</p><h3><strong>Rule #1</strong></h3><blockquote>All references are&nbsp;immutable&nbsp;by default.</blockquote><p>In Rust everything is immutable by default. Even if you declare a simple integer variable, it is immutable. To write that variable, it has to be explicitly marked as mutable. Same thing applicable for references. To make a mutable reference both the reference and owner must be mutable. Otherwise Rust gives a compilation error.</p><h3><strong>Rule #2</strong></h3><blockquote>Not more than&nbsp;one mutable reference&nbsp;allowed in a scope.</blockquote><p>You cannot have two references pointing to same value and both are updating the value at same time.</p><h3><strong>Rule #3</strong></h3><blockquote>Mutable and immutable reference&nbsp;cannot go hand in hand&nbsp;within a a scope.</blockquote><p>Rule number 2 and 3 are enforced to prevent race conditions. Consider you have multiple references to the same memory, and all are accessing the memory at same time from different threads, and one reference is writing to the memory. You cannot make sure that all references will have synchronised value, unless you have some other synchronisation mechanism to handle that.</p><h1>Conclusion</h1><p>So Rust avoids dangling pointers, data races and other memory unsafe issues during the compile time itself. That is the reason that Rust is able to provide the same performance that C++ offers. Rust has Zero Runtime Overhead. Rust is a major advancement in Systems Programming in terms of Memory Safety. But it still has a steep learning curve. When you code in Rust, most of the times, we think the code is valid, but Rust compiler will fail it. It needs more practice to get it right.</p><p>Hope this gives a good insight on Rust memory safety.</p>"
  },
  {
    "postId": "notification-control-in-silverlight",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<h2>Introduction</h2>\n<div><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight\" target=\"_blank\">(View this article in Code Project)</a></div>\n<div></div>\n<p>We used to see a Notification tool tip in Windows 7/Vista to inform something  about particular context. For example, Capslock warning will be given through a  balloon tip on Passwordbox, if capslock has ON. Or sometimes low battery  information will be displayed on the Taskbar.<br><img alt=\"Password.png\" height=\"262\" src=\"https://i2.wp.com/www.codeproject.com/KB/silverlight/320232/Password.png\" width=\"632\"><br>The unique feature of this control will be that it can be placed on any  Framework Element in Silverlight.  </p>\n<h2>Background </h2>\n<ul>\n<li>Basic understanding of <a href=\"http://www.codeproject.com/Articles/24131/Developing-a-Custom-Control-for-Silverlight-2-0\">Silverlight control development</a> is needed to  understand the code base.  </li>\n<li>UI Design &#x2013; <a href=\"http://expression.microsoft.com/en-us/cc184874\">Microsoft Expression Blend</a> </li>\n</ul>\n<h2>Using the code  </h2>\n<p>The base class for Notification control is Content  Control. The content can be of anything like a string, image, etc. The control  will be displayed on any <code>FrameworkElement</code> in Silverlight. A popup is used to  host the actual control and the popup will be placed on particular element based  on its position. <br>The generic template XAML goes like this,</p>\n<pre><code>&lt;Style&#xA0;TargetType=&quot;local:Balloon&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Setter&#xA0;Property=&quot;FontSize&quot;&#xA0;Value=&quot;13&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Setter&#xA0;Property=&quot;Template&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Setter.Value&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ControlTemplate&#xA0;TargetType=&quot;local:Balloon&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.Effect&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;DropShadowEffect&#xA0;ShadowDepth=&quot;2&quot;&#xA0;Direction=&quot;315&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.Effect&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;*&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Border&#xA0;Grid.Row=&quot;1&quot;&#xA0;BorderBrush=&quot;Gray&quot;&#xA0;BorderThickness=&quot;1&quot;&#xA0;CornerRadius=&quot;5&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Margin=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=MainMargin}&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Border.Background&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;LinearGradientBrush&#xA0;EndPoint=&quot;0.5,1&quot;&#xA0;StartPoint=&quot;0.5,0&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GradientStop&#xA0;Color=&quot;#FFE7E8F1&quot;&#xA0;Offset=&quot;1&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GradientStop&#xA0;Color=&quot;White&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GradientStop&#xA0;Color=&quot;#FFF3F4F6&quot;&#xA0;Offset=&quot;0.472&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/LinearGradientBrush&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Border.Background&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.ColumnDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ColumnDefinition&#xA0;Width=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ColumnDefinition&#xA0;Width=&quot;*&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.ColumnDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;Auto&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RowDefinition&#xA0;Height=&quot;*&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid.RowDefinitions&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Image&#xA0;Source=&quot;{TemplateBinding&#xA0;Icon}&quot;&#xA0;Margin=&quot;5&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;TextBlock&#xA0;Margin=&quot;5&quot;&#xA0;Grid.Column=&quot;1&quot;&#xA0;Foreground=&quot;#FF28489F&quot;&#xA0;Text=&quot;{TemplateBinding&#xA0;Header}&quot;&#xA0;FontSize=&quot;16&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalAlignment=&quot;Center&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ContentPresenter&#xA0;Margin=&quot;5&quot;&#xA0;Grid.Column=&quot;1&quot;&#xA0;Grid.Row=&quot;1&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Border&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Path&#xA0;Data=&quot;M306.375,133.125L306.375,100.875L335.75,133.25&quot;&#xA0;Stroke=&quot;Gray&quot;&#xA0;Height=&quot;20&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Fill=&quot;White&quot;&#xA0;Margin=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Margin}&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;StrokeThickness=&quot;1&quot;&#xA0;Stretch=&quot;Uniform&quot;&#xA0;Visibility=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=bottom}&quot;&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HorizontalAlignment=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Alignment}&quot;/&gt;<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Path&#xA0;Data=&quot;M306.375,133.125L306.375,100.875L335.75,133.25&quot;&#xA0;Stroke=&quot;Gray&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Height=&quot;20&quot;&#xA0;Fill=&quot;#FFE7E8F1&quot;&#xA0;Margin=&quot;{Binding&#xA0;Alignment,&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Margin}&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;StrokeThickness=&quot;1&quot;&#xA0;Stretch=&quot;Uniform&quot;&#xA0;Grid.Row=&quot;2&quot;&#xA0;Visibility=&quot;{Binding&#xA0;Alignment,&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Converter={StaticResource&#xA0;Converter},&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=top}&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;RenderTransformOrigin=&quot;0.5,&#xA0;0.5&quot;&#xA0;HorizontalAlignment=&quot;{Binding&#xA0;Alignment,&#xA0;</code></pre>\n<pre><code>                              Converter={StaticResource&#xA0;Converter},<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;RelativeSource={RelativeSource&#xA0;TemplatedParent},&#xA0;ConverterParameter=Alignment}&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Path.RenderTransform&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;ScaleTransform&#xA0;ScaleY=&quot;-1&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Path.RenderTransform&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Path&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/ControlTemplate&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Setter.Value&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Setter&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Style&gt;</code></pre>\n<p><b>Balloon Alignment&#xA0;</b></p>\n<p>To position the Popup on particular location in the control, the co-ordinates  related to Browser needs to be find out. This can be done using <code>GeneralTransform</code>. The Alignment property in the control helps change the place where  popup needs to be hosted. <br>It can be of one among the following,</p>\n<div id=\"premain1\"><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight#\"></a></div>\n<pre><code>&#xA0;  public&#xA0;enum&#xA0;BalloonAlignment<br>&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;TopLeft,<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;TopRight,<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BottomLeft,<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BottomRight<br>&#xA0;&#xA0;&#xA0;&#xA0;} </code></pre>\n<h2>Ballon Tooltip Service </h2>\n<div lang=\"cs\">An attached property of type <code>DependencyObject </code>should be added to a static class, which can be used to set balloon on any <code>DependecyObject</code>. The object can be textBox, Checkbox, Combobox, etc.</div>\n<div id=\"premain2\"><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight#\"></a></div>\n<pre><code>public&#xA0;static&#xA0;class&#xA0;BalloonTooltipService<br>&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;Balloon&#xA0;GetBalloonTooltip(DependencyObject&#xA0;obj)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;(Balloon)obj.GetValue(BalloonTooltipProperty);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;void&#xA0;SetBalloonTooltip(DependencyObject&#xA0;obj,&#xA0;Balloon&#xA0;value)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;obj.SetValue(BalloonTooltipProperty,&#xA0;value);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Using&#xA0;a&#xA0;DependencyProperty&#xA0;as&#xA0;the&#xA0;backing&#xA0;store&#xA0;for&#xA0;BalloonTooltip.&#xA0;&#xA0;This&#xA0;enables&#xA0;animation,&#xA0;styling,&#xA0;binding,&#xA0;etc...<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;readonly&#xA0;DependencyProperty&#xA0;BalloonTooltipProperty&#xA0;=<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DependencyProperty.RegisterAttached(&quot;BalloonTooltip&quot;,&#xA0;&#xA0;</code></pre>\n<pre><code>            typeof(Balloon),&#xA0;typeof(BalloonTooltipService),&#xA0;</code></pre>\n<pre><code>            new&#xA0;PropertyMetadata(null,&#xA0;new&#xA0;PropertyChangedCallback(OnBalloonToolTipChanged)));<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;private&#xA0;static&#xA0;void&#xA0;OnBalloonToolTipChanged(DependencyObject&#xA0;sender,&#xA0;DependencyPropertyChangedEventArgs&#xA0;args)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;element&#xA0;=&#xA0;sender&#xA0;as&#xA0;FrameworkElement;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Balloon&#xA0;tooltip&#xA0;=&#xA0;args.NewValue&#xA0;as&#xA0;Balloon;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(tooltip&#xA0;!=&#xA0;null)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;tooltip.DataContext&#xA0;=&#xA0;element.DataContext;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;tooltip.Target&#xA0;=&#xA0;element;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;}<br></code></pre>\n<div lang=\"cs\"><img alt=\"Checkbox.png\" height=\"272\" src=\"https://i0.wp.com/www.codeproject.com/KB/silverlight/320232/Checkbox.png\" width=\"551\"></div>\n<h2>Application Usage </h2>\n<div lang=\"cs\">The  control can be used in application to show some usefull information  about the particular context. Following code shows how to set balloon  using <code>BallonTooltipService</code>.</div>\n<div id=\"premain3\"><a href=\"http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight#\"></a></div>\n<pre><code>&#xA0;          &lt;CheckBox&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;Width=&quot;100&quot;&#xA0;&#xA0;Margin=&quot;3&quot;&#xA0;GotFocus=&quot;OnFocus&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;balloon:BalloonTooltipService.BalloonTooltip&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;balloon:Balloon&#xA0;x:Name=&quot;balloon1&quot;&#xA0;Header=&quot;Checkbox&#xA0;Notification&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HorizontalAlignment=&quot;Center&quot;&#xA0;Alignment=&quot;{Binding&#xA0;Path=SelectedValue}&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalAlignment=&quot;Center&quot;&#xA0;Icon=&quot;WarningHS.png&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;balloon:Balloon.Content&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;TextBlock&#xA0;TextWrapping=&quot;Wrap&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Text=&quot;Balloon&#xA0;can&#xA0;be&#xA0;placed&#xA0;on&#xA0;any&#xA0;Framework&#xA0;Element.&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/Grid&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/balloon:Balloon.Content&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/balloon:Balloon&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/balloon:BalloonTooltipService.BalloonTooltip&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/CheckBox&gt;&#xA0;</code></pre>\n<pre><code>&#xA0; </code></pre>\n<pre><code>Sample Link:</code></pre>\n<pre><code>http://www.codeproject.com/KB/silverlight/320232/BalloonDemo.zip</code></pre>\n<pre><code>&#xA0;</code></pre>\n<pre><code>Source Code:</code></pre>\n<pre><code>http://www.codeproject.com/Articles/320232/Notification-Control-in-Silverlight </code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<p>According to&#xA0;MSDN, a tooltip</p>\n<blockquote>\n<p>Represents a small rectangular pop-up window that displays a brief description of a control&#x2019;s purpose when the user rests the pointer on the control.</p>\n</blockquote>\n<p>Setting a tooltip is really easy with WPF controls.</p>\n<pre><code><br>&lt;Button Content=&quot;Save&quot;<br>        ToolTip=&quot;Save the contents&quot; /&gt;<br><br></code></pre>\n<p>But there are some situations when user want to see tool tip, only when the text is really not readable. Whether the text block size may become smaller, when user re-size the Window. Or the text becomes more lengthy in a text box, where the maximum width of the text box is really less.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png\"><img data-attachment-id=\"447\" data-permalink=\"https://wpfplayground.wordpress.com/2014/11/24/on-demand-tooltip-for-wpf-textblock/textblock/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png\" data-orig-size=\"230,180\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"textblock\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=230\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=230\" src=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=736\" alt=\"textblock\" srcset=\"https://wpfplayground.files.wordpress.com/2014/11/textblock.png 230w, https://wpfplayground.files.wordpress.com/2014/11/textblock.png?w=150 150w\" sizes=\"(max-width: 230px) 100vw, 230px\"></a><a href=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png\"><img data-attachment-id=\"448\" data-permalink=\"https://wpfplayground.wordpress.com/2014/11/24/on-demand-tooltip-for-wpf-textblock/textbox/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png\" data-orig-size=\"278,184\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"textbox\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=278\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=278\" src=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=736\" alt=\"textbox\" srcset=\"https://wpfplayground.files.wordpress.com/2014/11/textbox.png 278w, https://wpfplayground.files.wordpress.com/2014/11/textbox.png?w=150 150w\" sizes=\"(max-width: 278px) 100vw, 278px\"></a></p>\n<p><span id=\"more-441\"></span></p>\n<p>A possible way is to measure the text block / text box with maximum size, which will give you the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.uielement.desiredsize(v=vs.110).aspx\">DesiredSize</a>. Comparing that size with actual size&#xA0;is the right way to decide whether or not showing the toool tip. The following simple code snippet can do this trick.</p>\n<pre><code><br>        private void ShowTooltipOnDemand()<br>        {<br>            textBox.Measure(new Size(Double.MaxValue, Double.MaxValue));<br>            var width = textBox.DesiredSize.Width;<br><br>            if (textBox.ActualWidth &lt; width)<br>            {<br>                ToolTipService.SetToolTip(textBox, textBox.Text);<br>            }<br>            else<br>            {<br>                ToolTipService.SetToolTip(textBox, null);<br>            }<br>        }<br><br></code></pre>\n<p>This method can&#xA0;be called from SizeChanged and TextChanged event for&#xA0;text box. That will make the text always readable. (For text block, only SizeChanged is enough)</p>\n<p>Happy Coding!!!</p>\n\t\t\t",
    "postId": "on-demand-tooltip-for-wpf-textblock"
  },
  {
    "postId": "oops-attribute-vs-state",
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>In Object oriented programming objects are the fundamental unit. Usually an object is defined to have two characteristics. </p><div></div><blockquote> <div>State and behavior</div></blockquote> <div></div><p>State is defined through variables, properties or functions (getter and setter) depends on the language. </p><div></div><p>Behavior is usually defined through functions. </p><div></div><p>Most of the times, the term <strong>state represent both attribute and state</strong> of an object. But state and attribute are not same.</p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2>Attribute</h2> <div></div><p>Attributes are immutable. When you create an object you set attributes. And those attribute values most likely do not change throughout the lifetime of object. </p><div></div><p>For example consider the below pseudocode.</p><div> <div> <pre><code>class Dog {<br>  // Attributes<br>  color;<br>  age;<br><br>  // State<br>  isThirsty;<br><br> // Behavior<br>  run();<br>}<br></code></pre> </div></div><p>The object dog here holds two attributes color and age. When you create a dog object you define the age and color. Actually you can create an object with colour attribute set to Black. So logically you are creating a Black dog. And the dog remains Black throughout the object lifetime. If you want to create a red dog you may have to create another dog object with red colour. </p><div></div><p>The way of creating objects with immutable attributes varies from language to language. Typical method is to create properties with private set function. </p><div></div><p>In above example color is an attribute. That doesn&apos;t mean color has to be an attribute in all cases. It will change based on the context. For example consider consider traffic light as an object, where color is not an attribute but a state.</p><div></div><h2>State</h2> <div></div><p>States are mutable. The state of an object changes several times throughout it&apos;s lifetime. The state gets changes either by some function applied on the object or through an event outside of the object. There are other scenarios but these are the typical cases. For example if the run function called frequently in dog object the thirsty state may toggle to true. </p><div></div><div> <hr/> </div><div></div><p>Sometimes in programming you may need to create an object without state but only attributes. Those objects are actually passive and do not have any behaviours. It is literally representing a group of logically related attributes. </p><div></div><p>Every object oriented programming language must have an option to create such objects. We can use structs in C# and objects with private set functions in Java. </p><div></div><p>This is one of the criteria to decide between struct and class in C#. When we create such structures in C#, make sure it is always immutable. Because mutable structures and public fields are always dangerous. </p><div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/500x649.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610701.jpg\"></div></div></div><div></div><div></div><p><a href=\"https://techiesimon.com/2017/02/18/mutable-structs-are-evil-yes-really/\" target=\"_blank\" rel=\"noopener\">Understand why mutable structs are evil. </a></p><p><a href=\"https://www.reddit.com/r/java/comments/2pqq1r/why_are_public_fields_so_demonized_in_java/\" target=\"_blank\" rel=\"noopener\">Why public fields are demonized in Java?</a></p><div></div></div></div></div>"
  },
  {
    "postId": "order-does-matter-for-wpf-triggers",
    "content": "\n\t\t\t\t<p>When applying style for a ListBoxItem, today I come across a weird problem. I have trigger for both Mouse over and Selected. On selected, the item should goLightBlue and Gray on mouse hover. But when user clicks an item, it gets selected. But still the color remains Gray. But when user leaves the mouse, it turns out LightBlue.</p>\n<p><span id=\"more-160\"></span></p>\n<figure data-shortcode=\"caption\" id=\"attachment_161\" aria-describedby=\"caption-attachment-161\"><a href=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png\"><img data-attachment-id=\"161\" data-permalink=\"https://wpfplayground.wordpress.com/2014/01/22/order-does-matter-for-wpf-triggers/sshot-3/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png\" data-orig-size=\"362,236\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"ListBox_Hover\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=362\" alt=\"On Mouse hover\" src=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=300&amp;h=195\" width=\"300\" height=\"195\" srcset=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=300&amp;h=195 300w, https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png?w=150&amp;h=98 150w, https://wpfplayground.files.wordpress.com/2014/01/sshot-3.png 362w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><figcaption id=\"caption-attachment-161\">On Mouse hover</figcaption></figure>\n<figure data-shortcode=\"caption\" id=\"attachment_163\" aria-describedby=\"caption-attachment-163\"><a href=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png\"><img data-attachment-id=\"163\" data-permalink=\"https://wpfplayground.wordpress.com/2014/01/22/order-does-matter-for-wpf-triggers/sshot-4/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png\" data-orig-size=\"362,236\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"ListBox_Selected\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=362\" alt=\"On Selected\" src=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=300&amp;h=195\" width=\"300\" height=\"195\" srcset=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=300&amp;h=195 300w, https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png?w=150&amp;h=98 150w, https://wpfplayground.files.wordpress.com/2014/01/sshot-4.png 362w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><figcaption id=\"caption-attachment-163\">On Selected</figcaption></figure>\n<figure data-shortcode=\"caption\" id=\"attachment_164\" aria-describedby=\"caption-attachment-164\"><a href=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png\"><img data-attachment-id=\"164\" data-permalink=\"https://wpfplayground.wordpress.com/2014/01/22/order-does-matter-for-wpf-triggers/sshot-5/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png\" data-orig-size=\"362,236\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"ListBox_SelectedMouseOver\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=362\" alt=\"On Selected and Mouse Over\" src=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=300&amp;h=195\" width=\"300\" height=\"195\" srcset=\"https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=300&amp;h=195 300w, https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png?w=150&amp;h=98 150w, https://wpfplayground.files.wordpress.com/2014/01/sshot-5.png 362w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><figcaption id=\"caption-attachment-164\">On Selected and Mouse Over (Our real problem)</figcaption></figure>\n<p>When I look into ListBoxItem Style, I could see that Mouse Over trigger added last, whereas Selected trigger came first. WPF will take the last trigger as high priority. Since we are changing the same property, the trigger which resolved last will set the property. And that is the reason the background looks gray. When I changed the style, looks like below, everything started working fine.</p>\n<pre><code><br>     &lt;Style TargetType=&quot;ListBoxItem&quot;&gt;<br>        &lt;Setter Property=&quot;Template&quot;&gt;<br>            &lt;Setter.Value&gt;<br>                &lt;ControlTemplate TargetType=&quot;ListBoxItem&quot;&gt;<br>                    &lt;Grid&gt;<br>                        &lt;Rectangle Fill=&quot;{TemplateBinding Background}&quot; /&gt;<br>                        &lt;ContentPresenter Margin=&quot;10&quot; /&gt;<br>                    &lt;/Grid&gt;<br>                &lt;/ControlTemplate&gt;<br>            &lt;/Setter.Value&gt;<br>        &lt;/Setter&gt;<br>        &lt;Style.Triggers&gt;<br>            &lt;Trigger Property=&quot;IsMouseOver&quot;<br>                        Value=&quot;True&quot;&gt;<br>                &lt;Setter Property=&quot;Background&quot;<br>                        Value=&quot;Gray&quot; /&gt;<br>            &lt;/Trigger&gt;<br>            &lt;Trigger Property=&quot;IsSelected&quot;<br>                        Value=&quot;True&quot;&gt;<br>                &lt;Setter Property=&quot;Background&quot;<br>                        Value=&quot;LightBlue&quot; /&gt;<br>            &lt;/Trigger&gt;<br>        &lt;/Style.Triggers&gt;<br>    &lt;/Style&gt;<br><br></code></pre>\n\t\t\t"
  },
  {
    "postId": "registering-a-custom-file-extension-in-windows",
    "content": "\n\t\t\t\t<div dir=\"ltr\">Most of the real world applications need custom file extensions. Double clicking the file with such extension should be opened with particular application. This article explaining how to register a custom file extension in Windows 7. Custom file extensions normally resides in registry under the following key,<p></p>\n<p>HKEY_CLASSES_ROOT</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/e2012-registry.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/e2012-registry.png?w=736\"></a></div>\n<p>For an example, let me take an application named <b>MyFoo.exe </b>which need a custom file with extension &#x201C;<i>*.foo&#x201D;</i><br><i><br></i><br>Step 1 : Create a new key under&#xA0;HKEY_CLASSES_ROOT with extension name (.foo).</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/94772-add.png\"><img border=\"0\" height=\"195\" src=\"https://wpfplayground.files.wordpress.com/2012/05/94772-add.png?w=320&amp;h=195\" width=\"320\"></a></div>\n<p>Edit the default value of the key and set it as &#x201C;MyFoo&#x201D;, the application name.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/b9612-value.png\"><img border=\"0\" height=\"281\" src=\"https://wpfplayground.files.wordpress.com/2012/05/b9612-value.png?w=640&amp;h=281\" width=\"640\"></a></div>\n<div></div>\n<p>Step 2 : Create another key under the same root with the name of the app &#x201C;MyFoo&#x201D;.</p>\n<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/026c2-foo.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/026c2-foo.png?w=736\"></a></div>\n<p>Step 3 : Create another sub node under MyFoo node and name it as DefaultIcon. Edit the default value and set the path to the icon file you want to add for your custom file.</p>\n<p>Step 4 : Create another sub node under MyFoo node with the name of &#x201C;shell&#x201D;. This node is responsible for adding commands.</p>\n<p>Step 5 : Under shell node, add your commands. Most of the traditional desktop applications came up with commands like open, play, preview, print, etc. For simplicity let me explain how to add a open command to this application. The MyFoo node should look like this once you have added the needed keys.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/fd017-command.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/fd017-command.png?w=736\"></a></div>\n<p>Now edit the command key and map the default value to the application exe.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/c977c-path.png\"><img border=\"0\" height=\"248\" src=\"https://wpfplayground.files.wordpress.com/2012/05/c977c-path.png?w=640&amp;h=248\" width=\"640\"></a></div>\n<p>Now we are done with registering the extension. All the files in the machine with .foo extension will be opened in MyFoo application. Also you can find the &#x201C;Open&#x201D; command on the context menu of the application tile.</p>\n<p>Everything is fine. But how your application would know the location of the file which is opened? Using Command line arguments we can extract the path. In WPF, we can get the command line&#xA0;arguments in Application Start up event in this way.</p>\n<pre><code>&#xA0;           if&#xA0;(e.Args.Count()&#xA0;&gt;&#xA0;0)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;this.Properties[&quot;FilePath&quot;]&#xA0;=&#xA0;e.Args[0];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<p>The file path we stored here can be used anywhere in the application,</p>\n<p><span>string</span><span>&#xA0;filepath&#xA0;=&#xA0;</span><span>Application</span><span>.Current.Properties[</span><span>&#x201C;FilePath&#x201D;</span><span>].ToString();</span></p>\n<pre><code>But to make this work, the default value of the command should be modified slighter.&quot;C:\\Users\\labuser\\Desktop\\MyFoo\\bin\\Debug\\MyFoo.exe&quot; &quot;%1&quot;.</code></pre>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/a93e7-sshot-7.png\"><img border=\"0\" height=\"240\" src=\"https://wpfplayground.files.wordpress.com/2012/05/a93e7-sshot-7.png?w=640&amp;h=240\" width=\"640\"></a></div>\n<p>Happy coding!!!&#x2026;</p>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<h2> <span>Introduction&#xA0;</span></h2>\n<div align=\"baseline\">The article describes how to implement Rubberband behavior for WPF Listbox. Also it describes how to add this behavior using Expression Blend <a href=\"http://www.codeproject.com/Articles/404827/Rubberband-Behavior-for-WPF-Listbox\" target=\"_blank\">(Read more&#x2026;)</a></div>\n<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/06/a4268-rubberband.png\"><img border=\"0\" height=\"273\" src=\"https://wpfplayground.files.wordpress.com/2012/06/a4268-rubberband.png?w=400&amp;h=273\" width=\"400\"></a></div>\n<p></p>\n<div>\n<div align=\"baseline\"></div>\n</div>\n</div>\n\t\t\t",
    "postId": "rubberband-selection-for-wpf-listbox"
  },
  {
    "content": "\n\t\t\t\t<p>A contract is like an agreement between one or more apps. Contracts define the requirements that apps must meet to participate in these unique Windows interactions.</p>\n<p>For XAML Metro style apps, the Windows.UI.Xaml.Application class does a lot of the work needed for your app to support activation. This class exposes a set of strongly typed activation methods that you can override for supporting common contracts such as Search. For all contract activations that don&#x2019;t have a strongly typed method, you can override the OnActivated method and inspect the activation kind to determine the contract for which your app is activated. New XAML app projects in Visual Studio come with generated code that uses the Windows.UI.Xaml.Application class to make the app capable of being activated for a generic launch.</p>\n<p><span id=\"more-23\"></span></p>\n<p>There is an easier way than manually doing this work. You can use Visual Studio tooling for completing a lot of this work. Just right click on your project, select Add &gt; New Item, and choose Search Contract in the dialog. Most of the code you see here, and a search UI that displays results in a way that follows our <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh465233\">Search UX guidelines</a> is automatically created for you.</p>\n<p>To extend support for Search activation in your app:</p>\n<ol>\n<ol>\n<ol>\n<li>Add the Search declaration to your manifest using the Visual Studio Manifest Designer.</li>\n<li>Place in the App constructor of App.xaml.cs/cpp/vb any general initialization code that needs to run every time your application is started irrespective of the reason.</li>\n<li>Override the strongly typed OnSearchActivated method in App.xaml.cs/cpp/vb to handle search activation.</li>\n<li>Load your Search UI and show search results for the query you receive in the SearchActivatedEventArgs.</li>\n</ol>\n</ol>\n</ol>\n<p>We must override the OnSearchActivated method to support activation for Search:</p>\n<div>\n<pre><code>protected override void OnSearchActivated(SearchActivatedEventArgs args)<br>{<br>    // Load Search UI<br>    PhotoApp.SearchResultsPage.Activate(args.QueryText);<br>}<br></code></pre>\n</div>\n<p>The <b>Activate</b> method of the <b>SearchResultsPage</b> sets up a UI that shows search results for the user&#x2019;s search query:</p>\n<div>\n<pre><code>        // SearchResultsPage.xaml.cs code snippet<br>        public static void Activate(String queryText)<br>        {<br>            // If the window isn&apos;t already using Frame navigation, insert our own frame<br>            var previousContent = Window.Current.Content;<br>            var frame = previousContent as Frame;<br>            if (frame == null)<br>            {<br>                frame = new Frame();<br>                Window.Current.Content = frame;<br>            }<br>            // Use navigation to display the results, packing both the query text and the previous<br>            // Window content into a single parameter object<br>            frame.Navigate(typeof(SearchResultsPage1),<br>                new Tuple(queryText, previousContent));<br>            // The window must be activated in 15 seconds<br>            Window.Current.Activate();<br>        }<br></code></pre>\n</div>\n<p><img src=\"https://i1.wp.com/i.msdn.microsoft.com/dynimg/IC576244.png\" alt width=\"640\" height=\"307\"></p>\n\t\t\t",
    "postId": "search-contract-for-windows-store-apps"
  },
  {
    "postId": "show-alert-dialog-in-windows-8-xaml-app",
    "content": "\n\t\t\t\t<div dir=\"ltr\">It is a well known fact, that Windows 8 UI is flat, chromeless and clean. Every single pixel on the screen is there to represent your information. App will be taken up&#xA0;the entire screen. Showing alert windows to users is more trivial for an App developer. But I am sure it is not possible to show something like below in new Windows 8 UI.<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/08/27235-thcazujxm5.jpg\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/08/27235-thcazujxm5.jpg?w=736\"></a></div>\n<p>Windows 8 has an alternate way to show alert. The article shows how to show an alert dialog in Windows 8 XAML app. </p>\n<p>Include the following namespace in your XAML project.</p>\n<p><em>using Windows.UI.Popups;</em></p>\n<p>Unlike WPF or Windows Forms, Windows 8 has no static Message box class. Instead above namespace contains a non-singleton class called <em>MessageDialog</em>.</p>\n<p><span><span><span>protected override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;<span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0; dialog.ShowAsync();<br>}</span><br><span></span></span></p>\n<div><span><span><a href=\"https://wpfplayground.files.wordpress.com/2012/08/0e161-screenshot_08122012_025326.png\"><img border=\"0\" height=\"480\" src=\"https://wpfplayground.files.wordpress.com/2012/08/0e161-screenshot_08122012_025326.png?w=640&amp;h=480\" width=\"640\"></a></span></span></div>\n<p><span><br></span><span><span>Unlike WPF or Windows Forms, ShowAsync() method is not awaited by default. So&#xA0;the execution of current method continues before the call is completed. To avoid this Windows 8 introduced a new keyword <span><em>await</em>.</span></span></span></p>\n<p><span>More information about <em><span>await</span></em> keyword is available <a href=\"http://blogs.msdn.com/b/windowsappdev/archive/2012/04/24/diving-deep-with-winrt-and-await.aspx\" target=\"_blank\">here</a>.</span></p>\n<p>The below code will do the magic. To add <em>await</em> keyword, the entire method should be <em>async</em>.<br><span><span>protected <strong><u>async</u></strong> override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0;&#xA0;&#xA0;&#xA0; <span><strong><u>await</u></strong></span> dialog.ShowAsync();<span>//Execution waits here until dialog processed.</span><br>&#xA0;&#xA0;&#xA0;&#xA0; System.Diagnostics.<span>Debug</span>.WriteLine(<span>&#x201C;Go ahead!!&#x201D;</span>);<br>}</span><br><span><br></span>Commands can be added, which renders button for each command in dialog.</p>\n<p><span><span>protected async override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0;&#xA0;&#xA0;&#xA0; dialog.Commands.Add(<span>new </span><span>UICommand</span>(&#x201C;Done&#x201D;, new <span>UICommandInvokedHandler</span>(delegate(IUICommand command) <br>&#xA0;&#xA0;&#xA0;&#xA0; { <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <span>//Action goes here&#x2026;.</span> </span><br><span>&#xA0;&#xA0;&#xA0;&#xA0; })));<br>&#xA0;&#xA0;&#xA0;&#xA0; dialog.Commands.Add(<span>new</span> <span>UICommand</span>(&#x201C;Retry&#x201D;, new <span>UICommandInvokedHandler</span>(delegate(IUICommand command)<br>&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <span>//Action goes here&#x2026;.</span> </span><br><span>&#xA0;&#xA0;&#xA0;&#xA0; })));<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>await</span> dialog.ShowAsync();&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br>}</span></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/08/e2dc8-screenshot_08122012_031904.png\"><img border=\"0\" height=\"480\" src=\"https://wpfplayground.files.wordpress.com/2012/08/e2dc8-screenshot_08122012_031904.png?w=640&amp;h=480\" width=\"640\"></a></div>\n<p><span></span></p>\n<p></p></div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<p>According to a <a href=\"http://social.msdn.microsoft.com/Forums/en-US/winappswithcsharp/thread/1749b3e4-87f2-4617-af30-c7be91455b52\">recent MSDN.com forum discussion</a>, Silverlight-like data validation is not available in WinRT. Syncfusion&#x2019;s editor controls, however, do have built-in options to achieve such data validation. In Silverlight, data is validated by using the <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.idataerrorinfo(v=vs.100).aspx\"><b>IDataErrorInfo</b></a> interface. With Syncfusion WinRT editors, we use the <b>Syncfusion.UI.Xaml.Controls.Data.IDataValidation</b> interface for data validation&#x2026; [<a href=\"http://www.syncfusion.com/blogs/post/Silverlight-like-Data-Validation-in-WinRT.aspx\">Read more</a>]</p>\n\t\t\t",
    "postId": "silverlight-like-data-validation-in-winrt"
  },
  {
    "postId": "splash-screen-for-windows-8",
    "content": "\n\t\t\t\t<p>When users launch an app, they are immediately welcome by the splash screen. Every Windows 8 app has a splash screen, which consists of a 620&#xD7;300 image and solid background color. Windows presents the splash screen on your behalf in order to welcome users while your app is activated. The activated event is received by all apps on launch, and gives your app the ability to perform any initialization work needed to present its initial UI.</p>\n<p><span id=\"more-21\"></span></p>\n<p>The splash screen URL has to be mentioned in application manifest file.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png\"><img data-attachment-id=\"490\" data-permalink=\"https://wpfplayground.wordpress.com/2012/09/27/splash-screen-for-windows-8/splashscreen/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png\" data-orig-size=\"862,304\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"splashscreen\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=736\" src=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=736&amp;h=259\" alt=\"splashscreen\" srcset=\"https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=734&amp;h=259 734w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=150&amp;h=53 150w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=300&amp;h=106 300w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png?w=768&amp;h=271 768w, https://wpfplayground.files.wordpress.com/2012/09/splashscreen.png 862w\" sizes=\"(max-width: 736px) 100vw, 736px\"></a></p>\n<p>If you are interested in monitor when the splash screen has been dismissed, you can use the splash screen API. The API includes the SplashScreen.Dismissed event, which indicates when the transition from splash screen to app start page has occurred. This may be useful if you want to know when your skeleton landing page is in view.</p>\n<p>As you will see in the following example, your app can begin executing operations to fill the landing page inside of the launched callback. To optionally learn when the splash screen is dismissed, use the activated event args to obtain the splash screen object. Using this object, register for the dismissed event to be notified of splash screen dismissal.</p>\n<pre><code>async protected override void OnLaunched(LaunchActivatedEventArgs args)<br>{<br>    // Begin executing setup operations.<br>    PerformSetupTasks();<br><br>    // Retrieve splash screen object.<br>    SplashScreen splashScreen = args.SplashScreen;<br><br>    // Register an event handler to be executed when the splash screen has been dismissed.<br>    splashScreen.Dismissed += new TypedEventHandler&lt;SplashScreen, object&gt;(eSplash.onSplashScreenDismissed);<br>    ...<br>}<br><br>internal void PerformSetupTasks()<br>{<br>    // Begin additional loading tasks here&#x2026;<br>    ...<br>}<br><br>internal void onSplashScreenDismissed(Windows.ApplicationModel.Activation.SplashScreen sender, object e)<br>{<br>    // The splash screen has dismissed and the skeleton landing page is now in view.<br>    ...<br>}</code></pre>\n<pre><code></code></pre>\n\t\t\t"
  },
  {
    "postId": "syncfusion-radial-menu-command-binding",
    "content": "\n\t\t\t\t<p>Radial Menu has the ability to add items through ItemsSource property. A collection of different types of objects can be added into the Items collection. If the ItemsSource is not null, the items in the items property are read-only. You cannot add an object or change the objects in the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.itemscontrol.items%28v=vs.95%29.aspx\">Items</a> property.</p>\n<p>In this case, it is pretty easy to customize each item using ItemTemplate, but there is a problem in binding the Command property to every item. It is not possible to set binding through the style setter like you would be able to in WPF. [<a href=\"http://www.syncfusion.com/blogs/post/Radial-Menu-Command-Binding.aspx\">Read more&#x2026;</a>]</p>\n\t\t\t"
  },
  {
    "postId": "syncfusion-released-beta-version-of-winrt-controls",
    "content": "\n\t\t\t\t<p>Syncfusion now come up with a pack of WinRT XAML controls, which includes high performance chart, maps, diagram, radial menu, etc. It also includes a unique set of controls for reading and writing Excel, Word, and PDF documents in Windows store apps. The studio for WinRT can be downloaded from the below location.</p>\n<p><a href=\"http://www.syncfusion.com/products/winrt\">http://www.syncfusion.com/products/winrt</a></p>\n<p><span id=\"more-19\"></span></p>\n<h2>Chart</h2>\n<p>Essential Chart for WinRT is a high-performance charting component that is very easy to use and is also visually stunning. It includes the most common chart types ranging from line charts to specialized financial charts. It also utilizes DirectX rendering to deliver the best possible performance.</p>\n<p>\n</p><h2>Diagram</h2>\n<p>Essential Diagram for WinRT can be used to create and present feature-rich diagrams within your Windows store applications. It is commonly used to compose diagrams and workflows either visually using touch interactions or by automatically laying out the elements following specific rules.&#x201D;</p>\n<p>\n</p><h2>Maps</h2>\n<p>Essential Map for WinRT is a powerful data visualization control that can be used to easily visualize data on a map surface. It is frequently used on financial dashboards for plotting sales data on a map.</p>\n<p>\n</p><h2>Gauge</h2>\n<p>Essential Gauge for WinRT is a highly customizable gauge control that is used to visualize the given value over a circular scale. All the elements including scales, ticks, pointers and labels can be customized as required.</p>\n<p>\n</p><h2>Radial Menu</h2>\n<p>The radial menu control displays a hierarchical menu structure in a radial layout optimized for usage on touch devices. It is typically used as a context menu and can expose more menu items in the same space than a traditional menu control.</p>\n<p>\n</p><h2>Hub Tile</h2>\n<p>HubTile is a ContentControl that makes it possible to display live tiles within your application user interface. Content updates are shown through a variety of smooth animations similar to the live tile updates shown on the start screen of Windows 8.</p>\n<p>\n</p><p>And several more controls like Editors, Tab Control, Tile View, Cover flow etc are available in this toolkit.</p>\n\t\t\t"
  },
  {
    "postId": "text-binding-to-winrt-richtextblock",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<div>Normally it is not possible to bind text to WinRT RichTextBlock as we do for TextBlock. RichTextBlock is devoid of Text dependency property. So the only way is to populate the Blocks property with paragraphs in code behind. But by simply declaring an attached property, we can achieve binding to text in RichTextBlock.</div>\n<div></div>\n<div></div>\n<p><span id=\"more-9\"></span></p>\n<pre><code>        public static string GetText(DependencyObject obj)<br>        {<br>            return (string)obj.GetValue(TextProperty);<br>        }<br><br>        public static void SetText(DependencyObject obj, string value)<br>        {<br>            obj.SetValue(TextProperty, value);<br>        }<br><br>        // Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...<br>        public static readonly DependencyProperty TextProperty =<br>               DependencyProperty.RegisterAttached(&quot;Text&quot;, typeof(string), typeof(BindingHelper), new PropertyMetadata(String.Empty, OnTextChanged));<br><br>        private static void OnTextChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)<br>        {<br>            var control = sender as RichTextBlock;<br>            if (control != null)<br>            {<br>                control.Blocks.Clear();<br>                string value = e.NewValue.ToString();<br>                var paragraph = new Paragraph();<br>                paragraph.Inlines.Add(new Run { Text = value });<br>                control.Blocks.Add(paragraph);<br>            }<br>        }<br></code></pre>\n<div>&#xA0;The XAML side binding will looks like below,</div>\n<div></div>\n<pre><code>&lt;RichTextBlock common1:BindingHelper.Text=&quot;{Binding ElementName=calendar, Path=SelectedDate}&quot; /&gt;<br></code></pre>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/BindingHelper.zip\">Download BindingHelper.zip</a></p>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\">Seems my first blog is this. I am enjoying working with WPF. Whenever I am creating a simple or large scale application, I like to use texture backgrounds other than plane background. Becacuse it looks crispy and makes our application more beautiful. So I want to show you how to create a texture background in WPF.<p></p>\n<p>Hope WPF developers are well familiar with DrawingBrush. Using Drawing Brush it is easy to create thatch backgrounds. Consider we are going to create a background which alikes Expression Blend.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/09/bace1-sshot-7.png\"><img border=\"0\" height=\"220\" src=\"https://wpfplayground.files.wordpress.com/2011/09/bace1-sshot-7.png?w=320&amp;h=220\" width=\"320\"></a></div>\n<p>Geometry Brush will contain a group of Geometry Drawings. Since the above texture contains only two colors, let me create two Geometry Drawings with rect size of 60 x 60.</p>\n<pre><code>&#xA0;&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92F2F2F&quot;&gt;<br>&#xA0;&#xA0; &lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;/GeometryGroup&gt;<br>&#xA0;&#xA0; &lt;/GeometryDrawing.Geometry&gt;<br> &lt;/GeometryDrawing&gt;</code></pre>\n<p>The Brush of Geometry Drawing decides the color of rectangle. I have given the another rect with size and brush.</p>\n<p></p>\n<pre><code>&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92D2D2D&quot;&gt;<br>&#xA0;&#xA0;&#xA0; &lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; &lt;/GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0; &lt;/GeometryDrawing.Geometry&gt;<br>&#xA0;&lt;/GeometryDrawing&gt;</code></pre>\n<p>Finally the Drawing Brush looks like the one below,</p>\n<p></p>\n<pre><code>&#xA0;        &lt;DrawingBrush&#xA0;x:Key=&quot;ThatchBackground&quot;&#xA0;Viewport=&quot;0,0,15,15&quot;&#xA0;ViewportUnits=&quot;Absolute&quot;&#xA0;Stretch=&quot;None&quot;&#xA0;TileMode=&quot;Tile&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;DrawingBrush.Drawing&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;DrawingGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92F2F2F&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing&#xA0;Brush=&quot;#C92D2D2D&quot;&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;0,0,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;RectangleGeometry&#xA0;Rect=&quot;60,60,60,60&quot;/&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing.Geometry&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/GeometryDrawing&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/DrawingGroup&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/DrawingBrush.Drawing&gt;</code></pre>\n<pre><code> &#xA0;</code></pre>\n<pre><code>You can use the Drawing Brush as a background of WPF objects as below,</code></pre>\n<p></p>\n<pre><code>&#xA0;&#xA0;&lt;Grid&#xA0;Background=&quot;{StaticResource&#xA0;ThatchBackground}&quot;/&gt;</code></pre>\n<p>I like to show the screenshot of my application, where I am using this texture background.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2011/09/e388a-sshot-8.png\"><img border=\"0\" height=\"281\" src=\"https://wpfplayground.files.wordpress.com/2011/09/e388a-sshot-8.png?w=320&amp;h=281\" width=\"320\"></a></div>\n<p>Enjoy with WPF&#x2026;&#x2026;&#x2026;..!!!!!!!!</p></div>\n\t\t\t",
    "postId": "texture-background-in-wpf"
  },
  {
    "postId": "the-art-of-polyglot-programming",
    "content": "<p>Years back in 2013, I was working in a Hospitality management system. The application was used by front desk staff in star hotels. It helps to check in or check out rooms, book appointments and offer several other services. The entire application was written C#. Yes, you hear it right - the whole application including the user interface was written in C#. It was a desktop application and they used to install it in high resolution touch monitors backed by Windows OS and keep it in reception.</p><p>The UI was powered by Windows Presentation Framework (WPF) and backend was using&nbsp;<a href=\"http://asp.net/\" target=\"_blank\" style=\"color: rgb(0, 136, 204);\">ASP.NET</a>&nbsp;Web API. Even the database layer was abstracted using Entity Framework - one of the popular ORM in C#. I didn\u2019t remember writing a single native SQL query in that project.</p><p>It becomes a problem when the customer wanted the same application in web, since they have hard time provisioning the system, installing required dependencies and managing updates. So we proposed to build the web interface using Silverlight. Silverlight is a web platform used to build rich web interfaces using C#. (The technology is dead now). Our competitors were starting to explore AngularJS and React, while we stuck with a technology that was about to deprecate.</p><p>It was all happened because our limitation in the capability. Apart from organization perspective, it also created problem to the individual\u2019s learning. Our team has a great expertise in C#. We know each and every feature in C# and how it works. But we never know why some of the design decisions were made in that programming language. Many of the language decisions started to make sense, when we start learning other languages.</p><p><em>The option to pass by reference (ref and out) and pass by value feature in C# makes more sense, when I learn about borrowing feature in Rust.</em></p><p><em>I understood the actual purpose of dynamic keyword in C#, after I experienced the power of dynamic programming in Python.</em></p><p><em>Lambdas and anonymous functions in C# started to make sense, when I explored functional programming in Haskell.</em></p><p><em>The necessity of two way data binding in WPF now making more sense, after I learnt the problems of bi-directional data flow and how Redux solved the problem with Flux design pattern (uni-directional data flow)</em></p><p>The moment you start learning other languages, it opens up a lot of new boxes in your brain and you will be able to view programming languages from a different perspective. I like the way Uncle Bob Martin put it.</p><blockquote>The reason to learn a new language is to create new neural pathways in your mind. - Uncle Bob Martin</blockquote><h1>Polyglot Programming</h1><p>General definition</p><blockquote>Polyglot programming is the practice of writing code in multiple languages to capture additional functionality and efficiency not available in a single language.</blockquote><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/polyglot.png\" src=\"\"></p><p>There are lot of media sources already talking about advantages of polyglot programming. And my favorite is the interview with <a href=\"https://www.thoughtworks.com/profiles/neal-ford\" target=\"_blank\">Neal Ford</a> (Director, Software Architect, and Meme Wrangler at ThoughtWorks), discussing about the benefits of Polyglot Programming.</p><p><a href=\"https://www.youtube.com/watch?v=sBbGAzs9k-c\"> Video Link </a></p><p>In this article, I want to talk about few ideas that will help us to advance in the direction of becoming a polyglot programmer. Polyglot programming doesn\u2019t mean learning and being an expert in every programming language.</p><p>It is the matter of understanding the high level programming concepts and having awareness about evolving new language features.</p><h2>Dig deeper</h2><p>Understanding multiple languages becomes easier, when you are strong in programming fundamentals. When I say fundamentals, I mean the overall fundamental building blocks that make up a programming language. Consider type system - the nature of type system varies from language to language. A language could be either static or dynamic typed. It could be either strong or weekly typed. Or untyped (WebAssembly). Try to understand the rationale behind those design decisions. Some languages like C, C++ are statically typed, because type information is not available during run time. So they have to do type checking at compile time. Python has a sophisticated runtime, which can do type checking on the fly. So they don't need type information at compile time. Understanding these kind of fundamental working model will help you to pick up any new languages easily.</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/basics.jpg\" src=\"\"></p><p>Similarly try to understand other building blocks like memory management, execution environment like whether it is compiled or interpreted, executed by processor or virtual machine, the nature of threading. Also compare these features with the programming languages you already known. That helps you to get more insights on why certain design decisions are made. For example goroutines(lightweight threads) might be the result of costly nature of OS threads in Java.</p><h2>Best practices</h2><p>The common problem in Polyglot Programming is, when we try to master multiple programming languages, we may tend to lose the best practices in that particular language. A programmer who code Java for 10 years may follow good practices when compared to the programmer who practicing the language for an year. But that doesn't mean polyglot programmer write bad code. With proper understanding of language agnostics best practices, we can definitely write good code in any language. I recommend books like <a href=\"https://www.amazon.in/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\">Clean Code</a> (by Uncle Bob) and <a href=\"https://martinfowler.com/books/refactoring.html\">Refactoring</a> (by Martin Fowler).</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/best_practice.jpg\" src=\"\"></p><p>Write code that is readable, testable and extensible. You will always end up in a design pattern. Understanding the concepts like modularity, dependency management, composition will help you write efficient code in any programming language. I would say all the best practices rooted in the modularity. The level of modularity in your code decides the robustness of your code.</p><h2>Be open minded</h2><p>I know some of my fellow developers blame particular languages. They say the language has a bad design. I disagree with that. No language is bad. Every programming language has been designed with a purpose in mind. If you try to create a high performance, cross platform game engine using Javascript, then it will be a nightmare. Thats not the problem with language. You chose the wrong tool. One might argue that NodeJS is bad for web development, because of its single threaded nature. It might be !! But understand the rationale behind it. Even though it handles all the requests in a single main thread, how efficiently it delegates all asynchronous calls like I/O operations to multiple threads. It makes the main thread to be available all the time to handle incoming requests. You don't have to use NodeJS in your project, but understanding these kind of unique behaviors in multiple languages and frameworks help you to expand your programming brain.</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/learning.jpg\" src=\"\"></p><p>Some programmers are very biased with the language they use and they stick to that language no matter how many better languages pitch in. They try to find loopholes in the new languages as much as possible and try to debunk it. But I would recommend you to be aware of the new languages and frameworks. And if something interest you, go ahead and learn about it. There is nothing wrong for a Javascript developer who uses jQuery for long time to explore React for his side project. Don't use the same technology stack of your mainstream project in your side projects. That is the only way to break the barrier and jump into the fun world of polyglot programming.</p><h2>Taste the unique features</h2><p>When you learn a new programming language I bet you the first ten chapters would remain same in all languages. It include data types, variable declarations, conditional operations, functions and structures. But the last few chapters introduce the key features of that particular language. Being aware of the key features in a programming language will help you to choose the right tool for your problem. When you learn a new language, identify the key features and practice examples based on the key features. If you are learning Go, create a simple webserver and see how efficiently you can handle multiple requests concurrently using goroutines. If you are learning Rust, try to create simple image processing library and run it from browser using webassembly. By doing that you can understand the ease of manual memory management and the power of webassembly.</p><h2>Adapt the changes</h2><p>Changes are inevitable. New languages and frameworks born when new changes or problems arise into the technology. Think about the evolution of hardware and multi core processors. What about the amount of data that got accumulated across internet over the past 10 years. We need proper technology and frameworks to deal with that data. Web is revolutionized. jQuery was the most popular javascript library 10 years before. But now things changed. Web is not just a platform to read and submit data forms like before. Web is one true universal platform. Web is now expected to support broad range of applications like word processing, video and music editing, games, conference calls, screen sharing and so on. Agile and extreme programming becomes unavoidable in software development life cycle. Such practice of continuous delivery gave birth to devops. Devops opened up opportunities for various languages and frameworks. Programmers has to keep up with these changes by learning suitable technologies.</p><p><img alt=\"Polyglot Programming\" class=\"\" data-src=\"https://storage.googleapis.com/jawahar-tech/polyglot/changes.jpg\" src=\"\"></p><h1>Closing</h1><p>Learning is fun. Learning new stuff is always exciting. No matter what we do, we cannot learn everything in our lifetime. Learning is an ongoing process. I would like to remind the words of Steve Jobs, which suits all the time.</p><blockquote>Stay hungry. Stay foolish.</blockquote><p>I myself sometimes ask whether I am a polyglot programmer. If you ask me how many programming languages I know, I cannot answer that question. I didn't even know how many languages exists at this point of writing this article. But if you give me a problem and ask me to solve it in any new programming language, I have the confidence that I can solve it. If that means a polyglot programmer, then of course I am a Polyglot Programmer.</p>"
  },
  {
    "content": "<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>Elm is a functional programming language that used to develop frontend applications. Even though you don&apos;t use Elm at work, understanding Elm architecture will help you to learn functional reactive programming (FRP) at high level. One of the most popular state management framework - Redux actually inspired from Elm architecture.</p><div></div><blockquote> <div>Redux evolves the ideas of flux, but avoids its complexity by taking cues from Elm. <span>Dan Abramov, Author of Redux</span></div></blockquote> <div></div><p>To understand Elm architecture better, let&apos;s try to understand our typical approach for building the frontend applications. Applications are usually divided into three layers </p><ul> <li> <p>Model </p></li><li> <p>Controller or View Model </p></li><li> <p>View</p></li></ul> <div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2000x1444.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610668.png\"></div></div></div><div></div><div></div><style data-emotion-css=\"1pq57dj\"> .css-1pq57dj{font-size: 22px !important;}</style> <h3>Model</h3> <div></div><p>In frontend applications, this is the common layer where we define the state of our user interface. This is the programmatic representation of the user interface. For example if we have a to-do list, our model might have a list of objects that represent the todo item and may be another boolean to represent the filter that is currently applied. But it doesn&apos;t have any business logic.</p><div></div><h3>Controller or View Model</h3> <div></div><p>There is where our business logic goes. This layer represents the core business implementation of the application. The model may hold the filter value and the to-do items, but the controller is the one that actually has the logic to filter the to-do items. Usually if something happens in the UI, controller would receive the notification and update the model and UI (if needed). </p><div></div><h3>View</h3> <div></div><p>The View has functions to render User Interface components. It decides how to render the Model. For example, if there is a list of to-do items, the View layer decides whether to render it as a list of labels or cards or check boxes. </p><div></div><div></div><div> <hr/> </div><div></div><div></div><p>This approach is been there for long time. It is not just used by web applications, even thick client desktop applications like WPF or Xamarin also uses the same approach. We can see what are the problems with this approach and how Elm architecture solves this problem.</p><div></div><p>Let&apos;s say we have cascade drop downs in UI. We have a Country dropdown and a State dropdown. When selected value gets changed in Country dropdown, the State dropdown list should get updated.</p><div></div><p>In a typical approach like MVC, the controller will get notified when the selection in country dropdown changed. So the controller will now update the Model with the new selected country value and it also fetch the new list of states based on the selected country and updated the UI.</p><div></div><p>If you take a closer look, the controller is actually doing two jobs. It is updating the Model as soon as something changed in the UI. Because Model is the representation of UI, so both View and Model has to be in sync. And the controller is also updates the UI, making sure the UI renders the right list of states based on the selected country.</p><div></div><p>The controller does the heavy job of synchronising the model and view. And the controller gets more complex and complex as the project grows. And also the data is flowing back and forth between the controller and view and that gives very less control over the data. This approach may be suitable for server client applications, but not for single page applications.</p><div></div><style data-emotion-css=\"x4x4qs\"> .css-x4x4qs{font-size: 28px !important;}</style> <h2>How Elm architecture solves the problem</h2> <div></div><p>Elm is a pure functional language. So it is all about functions. To understand Elm architecture we need to understand three primary functions.</p><div></div><h3>Init</h3> <h3></h3> <div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1352x484.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612280.png\"></div></div></div><div></div><p>This function does not take any input parameters but it returns a Model object. The object represents the initial state of the application. This gets called only once over the lifecycle of the component.</p><div></div><h3>View</h3> <div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2084x796.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613529.png\" class=\"large\"></div></div></div><div></div><div></div><p>This function takes Model object as input parameter and returns the DOM object. This function holds the logic, that decides how to render the Model as UI. For example if you have a list of to-do items, this function decides whether to display it as list of labels, cards or text boxes. The DOM object it returns is not just a passive object, it has ability to broadcast messages when something happens in UI.</p><div></div><h3>Update</h3> <h3></h3> <h3></h3> <div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2246x694.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609615118.png\" class=\"large\"></div></div></div><div></div><div></div><p>The Update function accepts two input parameters - a Message and the current State of the application. The message is sent from the DOM object that View function returns. It says what happened in the UI. And the second parameter state holds the current application state. Based on the message this function returns the new state for the application. This function holds the core business logic. </p><div></div><p>The Update and View functions will get invoked repeatedly, making sure the state and view are always in sync. And the data also flows in single direction, giving you more control over it.</p><div></div><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/2642x1530.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609616494.png\" class=\"large\"></div></div></div><div></div><div></div><p>But there is one problem. The View function now becomes a function that computes the User Interface based on the State. And the View get called multiple times, making it returns the whole DOM object every time. But applying the entire DOM to browser is not efficient. So now Virtual DOM comes into picture. Even though the application returns the whole DOM object, only the differences will be identified and applied to the actual DOM.</p><div></div><p>As I already said even if you don&apos;t use Elm at work, understanding Elm architecture will help you to write efficient state management code.</p><div></div></div></div></div>",
    "postId": "the-elm-architecture"
  },
  {
    "postId": "touch-and-hold-gesture-awaitable",
    "content": "\n\t\t\t\t<p>Touch and Hold gesture can not be identified using&#xA0;any built-in API. Surface SDKs may provide one. But I will show a simple awaitable way to detect this gesture. Using a timer, we can wait for a particular seconds and return the method once the timer elapsed. If user took his hand before timer elapsed, then immediately return the method with a false flag.</p>\n<p><span id=\"more-434\"></span></p>\n<pre><code>public static Task&lt;bool&gt;TouchHold(this FrameworkElement element, TimeSpan duration)<br>{<br>    DispatcherTimer timer = new DispatcherTimer();<br>    TaskCompletionSource&lt;bool&gt; task = new TaskCompletionSource&lt;bool&gt;();<br>    timer.Interval = duration;<br><br>    MouseButtonEventHandler touchUpHandler = delegate<br>    {<br>        timer.Stop();<br>        if (task.Task.Status == TaskStatus.Running)<br>        {<br>            task.SetResult(false);<br>        }<br>    };<br><br>    element.PreviewMouseUp += touchUpHandler;<br><br>    timer.Tick += delegate<br>    {<br>        element.PreviewMouseUp -= touchUpHandler;<br>        timer.Stop();<br>        task.SetResult(true);<br>    };<br><br>    timer.Start();<br>    return task.Task;<br>}<br></code></pre>\n<p>I made it as an extension method, which is easy to use. The seconds to wait can be configurable. The following code shows, how to use it.</p>\n<pre><code>        protected async override void OnMouseDown(MouseButtonEventArgs e)<br>        {<br>            base.OnMouseDown(e);<br><br>            bool isHold = await this.TouchHold(TimeSpan.FromSeconds(1));<br>            if (isHold)<br>            {<br>                MessageBox.Show(&quot;Touch and Hold detected!!&quot;);<br>            }<br>        }<br></code></pre>\n<p>Happy coding!!</p>\n\t\t\t"
  },
  {
    "postId": "touch-gesture-in-wpf-scroll-viewer",
    "content": "\n\t\t\t\t<div dir=\"ltr\">\n<p>WPF 4.0 comes up with attractive features. One of them is Multi touch. We can play with WPF scroll viewer using&#xA0; finger. Setting the property PanningMode will do the magic.</p>\n<pre><code>&#xA0;&#xA0;&#xA0;&lt;ScrollViewer&#xA0;PanningMode=&quot;Both&quot;&#xA0;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HorizontalScrollBarVisibility=&quot;Auto&quot;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;VerticalScrollBarVisibility=&quot;Auto&quot;/&gt;</code></pre>\n<p>     <span>PanningMode</span>    can be either set directly on a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> or used as an attached property.  When a control contains a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> in its <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate.aspx\">ControlTemplate</a>, use <span>ScrollViewer.PanningMode</span> as an attached property to specify the behavior of the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> in the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate.aspx\">ControlTemplate</a>. When you use a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> outside of a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate.aspx\">ControlTemplate</a>, set <span>PanningMode</span> directly on the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a>.</p>\n<div>\n<hr></div>\n<p><a href=\"http://www.blogger.com/blogger.g?blogID=2881656683168959552\" id=\"membersToggle\">    </a>    </p>\n<table id=\"memberList\">\n<tbody>\n<tr>\n<th></th>\n<th>Member name</th>\n<th>Description</th>\n</tr>\n<tr>\n<td></td>\n<td><span>None</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> does not respond to touch input.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>HorizontalOnly</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> scrolls horizontally only.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>VerticalOnly</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> scrolls vertically only.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>Both</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> scrolls horizontally and vertically.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>HorizontalFirst</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a>  scrolls when the user moves a finger horizontally first.  If the user  moves the vertically first, the movement is treated as mouse events.   After the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> begins to scroll, it will scroll horizontally and vertically.     </td>\n</tr>\n<tr>\n<td></td>\n<td><span>VerticalFirst</span>     </td>\n<td>The <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a>  scrolls when the user moves a finger vertically first.  If the user  moves the horizontally first, the movement is treated as mouse events.   After the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.scrollviewer.aspx\">ScrollViewer</a> begins to scroll, it will scroll horizontally and vertically.</td>\n</tr>\n</tbody>\n</table>\n<div></div>\n</div>\n\t\t\t"
  },
  {
    "postId": "visual-tree-helpers",
    "content": "\n\t\t\t\t<p>WPF User Interface is&#xA0;represented in a way of tree.&#xA0;There are two ways that the complete object tree is conceptualized and can be reported to its public API: as the logical tree and as the visual tree. The Logical tree does not contain the core controls of WPF. For example, the child object of a ContentControl is just represented by Content property. The visual tree includes all the controls that WPF used internally to build the tree system. For example the content of ContentControl is represented by a TextBlock, if the value is string. And again the textblock may composed of a scroll viewer and error adorner, etc.</p>\n<p><span id=\"more-393\"></span></p>\n<p>WPF provides built-in API to traverse the tree, but it is limited. For example if you want to get an element in top of tree by its name or type, you need iterate over the tree by using <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.visualtreehelper(v=vs.110).aspx\">VisualTreeHelper </a>class. Below, I have provided some useful extensions that will help to get the&#xA0;parent or child in any application.</p>\n<h2>FindAncestor</h2>\n<h3>Usage</h3>\n<pre><code>Grid rootGrid = submitButton.FindAncestor&lt;Grid&gt;();<br></code></pre>\n<h3>Source</h3>\n<pre><code>        public static T FindAncestor&lt;T&gt;(this DependencyObject element)<br>            where T : DependencyObject<br>        {<br>            // Try get a parent and check for type.<br>            var parent = VisualTreeHelper.GetParent(element);<br>            if (parent is T)<br>            {<br>                return (T)parent;<br>            }<br>            return FindAncestor&lt;T&gt;(parent);<br>        }<br><br></code></pre>\n<h2>FindDescendant</h2>\n<h3>Usage</h3>\n<pre><code>Button submitButton = root.FindDescendant&lt;Button&gt;();<br></code></pre>\n<h3>Usage</h3>\n<pre><code>        public static T FindDescendant&lt;T&gt;(this DependencyObject element)<br>   where T : DependencyObject<br>        {<br>            if (element == null) return null;<br><br>            T foundChild = null;<br><br>            int childrenCount = VisualTreeHelper.GetChildrenCount(element);<br>            // Iterating through all children.<br>            for (int i = 0; i &lt; childrenCount; i++)<br>            {<br>                var child = VisualTreeHelper.GetChild(element, i);<br>                // Check whether child is of that type.<br>                T childType = child as T;<br>                if (childType == null)<br>                {<br>                    // A recursive call since it is null.<br>                    foundChild = FindDescendant&lt;T&gt;(child);<br><br>                    if (foundChild != null) break;<br>                }<br>                else<br>                {<br>                    // Child found<br>                    foundChild = (T)child;<br>                    break;<br>                }<br>            }<br><br>            return foundChild;<br>        }<br><br></code></pre>\n<p><a href=\"https://db.tt/G9TdV1kr\">VisualTreeExtensions.cs</a></p>\n<p>The class has another overload where the method will accept a string parameter for name. It will return the element of that type with that name.</p>\n\t\t\t"
  },
  {
    "postId": "watermark-behavior-for-textbox",
    "content": "\n\t\t\t\t<p>It is obvious that there is no direct way to set Watermark in WPF textboxes. Some third party controls and codeplex gave extended textboxes which supports watermark. Watermark can also be achieved through overriding the default style of a textbox. A textblock/Label needs to be inserted in default control template to display the Watermark. But it will be a static one. To make it dynamic, developers used <strong>Tag</strong> property to store Watermark data.</p>\n<p>But here is a behavior, which creates an adorner on top of Textbox. The adorner is responsible to draw the Watermark text. Font&#xA0;related dependency properties can be added to the behavior. So this is highly dynamic.</p>\n<p><span id=\"more-351\"></span></p>\n<pre><code><br>        public class WaterMarkAdorner : Adorner<br>        {<br>            private string text;<br>            private double fontSize;<br>            private string fontFamily;<br>            private Brush foreground;<br><br>            public WaterMarkAdorner(UIElement element, string text, double fontsize, string font, Brush foreground)<br>                : base(element)<br>            {<br>                this.IsHitTestVisible = false;<br>                this.Opacity = 0.6;<br>                this.text = text;<br>                this.fontSize = fontsize;<br>                this.fontFamily = font;<br>                this.foreground = foreground;<br>            }<br><br>            protected override void OnRender(System.Windows.Media.DrawingContext drawingContext)<br>            {<br>                base.OnRender(drawingContext);<br>                var text = new FormattedText(<br>                        this.text,<br>                        System.Globalization.CultureInfo.CurrentCulture,<br>                        System.Windows.FlowDirection.LeftToRight,<br>                        new System.Windows.Media.Typeface(fontFamily),<br>                        fontSize,<br>                        foreground);<br><br>                drawingContext.DrawText(text, new Point(3, 3));<br>            }<br>        }<br></code></pre>\n<p>The behavior utilizing this adorner to decorate the textbox. Right now the behavior supports only TextBox. But still the idea can be extended to PasswordBox, ComboBox, etc.</p>\n<pre><code>        private void OnLoaded(object sender, RoutedEventArgs e)<br>        {<br>            if (!this.AssociatedObject.IsFocused)<br>            {<br>                if (String.IsNullOrEmpty(this.AssociatedObject.Text))<br>                {<br>                    var layer = AdornerLayer.GetAdornerLayer(this.AssociatedObject);<br>                    layer.Add(adorner);<br>                }<br>            }<br>        }<br></code></pre>\n<p>The XAML code looks as follows,</p>\n<pre><code>            &lt;TextBox Width=&quot;200&quot;<br>                     Margin=&quot;5&quot;<br>                     Height=&quot;20&quot;&gt;<br>                &lt;i:Interaction.Behaviors&gt;<br>                    &lt;behavior:WatermarkBehavior Text=&quot;Maximum 15 characters&quot; /&gt;<br>                &lt;/i:Interaction.Behaviors&gt;<br>            &lt;/TextBox&gt;<br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png\"><img data-attachment-id=\"370\" data-permalink=\"https://wpfplayground.wordpress.com/2014/06/30/watermark-behavior-for-textbox/watermark/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png\" data-orig-size=\"266,169\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"watermark\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=266\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=266\" src=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=736\" alt=\"watermark\" srcset=\"https://wpfplayground.files.wordpress.com/2014/06/watermark.png 266w, https://wpfplayground.files.wordpress.com/2014/06/watermark.png?w=150 150w\" sizes=\"(max-width: 266px) 100vw, 266px\"></a></p>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/Freelancing/WatermarkBehaviorDemo.zip\">Download Demo</a></p>\n\t\t\t"
  },
  {
    "postId": "whats-new-in-prism-5-0-viewmodel-locator",
    "content": "\n\t\t\t\t<p>ViewModels are usually resolved and injected through DI containers. We will set the viewmodel as DataContext of View. But&#xA0;still there are some frameworks like <a href=\"https://caliburnmicro.codeplex.com/\">Caliburn Micro</a> who provided a conventional way of resolving the view models. Now Microsoft added this feature into the PRISM framework. The View and ViewModels can be wired together&#xA0;by a naming convention.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png\"><img data-attachment-id=\"539\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/04/whats-new-in-prism-5-0-viewmodel-locator/mvvm/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png\" data-orig-size=\"222,167\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"mvvm\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=222\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=222\" src=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=736\" alt=\"mvvm\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm.png 222w, https://wpfplayground.files.wordpress.com/2014/12/mvvm.png?w=150 150w\" sizes=\"(max-width: 222px) 100vw, 222px\"></a></p>\n<p>In this project the Views and ViewModels followed a naming convention, which can be identified by the framework.</p>\n<p><em><strong>&lt;ViewName&gt;</strong>&#xA0;=&gt; Home</em><br>\n<em><strong> &lt;ViewName&gt; + ViewModel</strong>&#xA0;=&gt; HomeViewModel</em></p>\n<p><span id=\"more-533\"></span></p>\n<p>To&#xA0;initialize this view model location,&#xA0;view should implement the IView interface and AutoWire property should be true for the View.</p>\n<pre><code>    public partial class Home : UserControl, IView<br>    {<br>        public Home()<br>        {<br>            InitializeComponent();<br>        }<br>    }<br></code></pre>\n<pre><code>&lt;UserControl x:Class=&quot;WpfApplication16.Views.Home&quot;<br>             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>             xmlns:prism=&quot;clr-namespace:Microsoft.Practices.Prism.Mvvm;assembly=Microsoft.Practices.Prism.Mvvm.Desktop&quot;<br>             prism:ViewModelLocator.AutoWireViewModel=&quot;True&quot;&gt;<br>    &lt;Grid&gt;<br>        &lt;TextBlock Text=&quot;{Binding Message}&quot; /&gt;<br>    &lt;/Grid&gt;<br>&lt;/UserControl&gt;<br></code></pre>\n<p>Sometimes this naming convention may not suitable for some applications. So if people want to follow a different convention, still they can consume this awesome feature. It means, it is possible to override the ViewModel locating logic. How cool it is.. huh..!!!</p>\n<p>I usually want to add View suffix to my Views (HomeView). So the locator code should change a bit like this,</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png\"><img data-attachment-id=\"549\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/04/whats-new-in-prism-5-0-viewmodel-locator/mvvm-2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png\" data-orig-size=\"237,168\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"mvvm\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=237\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=237\" src=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=736\" alt=\"mvvm\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png 237w, https://wpfplayground.files.wordpress.com/2014/12/mvvm1.png?w=150 150w\" sizes=\"(max-width: 237px) 100vw, 237px\"></a></p>\n<pre><code>    public partial class App : Application<br>    {<br>        private const string ViewNamespace = &quot;Views&quot;;<br>        private const string ViewModelNamespace = &quot;ViewModels&quot;;<br><br>        protected override void OnStartup(StartupEventArgs e)<br>        {<br>            base.OnStartup(e);<br>            ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) =&gt;<br>            {<br>                var friendlyName = viewType.FullName.Remove(viewType.FullName.Length - 4);<br>                friendlyName = friendlyName.Replace(ViewNamespace, ViewModelNamespace);<br>                var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;<br>                var viewModelName = String.Format(CultureInfo.InvariantCulture, &quot;{0}ViewModel, {1}&quot;, friendlyName, viewAssemblyName);<br>                return Type.GetType(viewModelName);<br>            });<br>        }<br>    }<br></code></pre>\n<p>Also it is possible to let your DI container resolve your viewmodel. Just the ViewModel locator will change something like this. I used UnityContainer here.</p>\n<pre><code>        protected override void OnStartup(StartupEventArgs e)<br>        {<br>            base.OnStartup(e);<br>            IUnityContainer _container = new UnityContainer();<br>            ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) =&gt;<br>            {<br>                return _container.Resolve(type);<br>            });<br>        }<br></code></pre>\n\t\t\t"
  },
  {
    "postId": "wpf-datepicker-blackoutdates-data-binding",
    "content": "\n\t\t\t\t<p>A problem with <strong>DatePicker</strong> is that BlackoutDates collection cannot be initalized without a Calendar instance. So in MVVM environment, it is bit hard to bind BlackoutDates dynamically. But attached properties are a handy way to handle these type of situations. An attached property of type <em><strong>List&lt;DateTime&gt;</strong></em> can be used to achieve this. The dates will be added to the collection in the callback event of attached property manually.</p>\n<p><span id=\"more-419\"></span></p>\n<pre><code>    public class BlackOutDatesAdapter<br>    {<br>        public static List&lt;DateTime&gt; GetBlackOutDates(DependencyObject obj)<br>        {<br>            return (List&lt;DateTime&gt;)obj.GetValue(BlackOutDatesProperty);<br>        }<br><br>        public static void SetBlackOutDates(DependencyObject obj, List&lt;DateTime&gt; value)<br>        {<br>            obj.SetValue(BlackOutDatesProperty, value);<br>        }<br><br>        // Using a DependencyProperty as the backing store for BlackOutDates.  This enables animation, styling, binding, etc...<br>        public static readonly DependencyProperty BlackOutDatesProperty =<br>            DependencyProperty.RegisterAttached(&quot;BlackOutDates&quot;, typeof(List&lt;DateTime&gt;), typeof(BlackOutDatesAdapter), new PropertyMetadata(null, OnBlackOutDatesChanged));<br><br>        private static void OnBlackOutDatesChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)<br>        {<br>            var control = sender as DatePicker;<br>            var list = (List&lt;DateTime&gt;)e.NewValue;<br>            foreach(var date in list)<br>            {<br>                control.BlackoutDates.Add(new CalendarDateRange(date));<br>            }<br>        }<br>    }<br></code></pre>\n<p>And this can be bound in XAML as below,</p>\n<pre><code>        &lt;DatePicker VerticalAlignment=&quot;Center&quot;<br>                    Width=&quot;200&quot;<br>                    local:BlackOutDatesAdapter.BlackOutDates=&quot;{Binding BlackOutDates}&quot;<br>                    DisplayDate=&quot;{Binding DisplayDate}&quot;/&gt;<br></code></pre>\n<p>In sample application the black out dates are populated based on the display date, so that user can see different blackout dates for different months. The Display Date property is bound to XAML.</p>\n<pre><code>        private void OnPropertyChanged(object sender, PropertyChangedEventArgs e)<br>        {<br>            if (e.PropertyName == &quot;DisplayDate&quot;)<br>            {<br>                BlackOutDates = new List&lt;DateTime&gt; { DisplayDate.Date.AddDays(randm.Next(1, 5)), DisplayDate.AddDays(randm.Next(1, 5)) };<br>            }<br>        }<br></code></pre>\n<p><a href=\"https://db.tt/X3vvCGiN\">Download Sample</a></p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png\"><img data-attachment-id=\"421\" data-permalink=\"https://wpfplayground.wordpress.com/2014/07/28/wpf-datepicker-blackoutdates-data-binding/datepicker/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png\" data-orig-size=\"332,313\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"datepicker\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=332\" src=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=300&amp;h=282\" alt=\"datepicker\" width=\"300\" height=\"282\" srcset=\"https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=300&amp;h=282 300w, https://wpfplayground.files.wordpress.com/2014/07/datepicker.png?w=150&amp;h=141 150w, https://wpfplayground.files.wordpress.com/2014/07/datepicker.png 332w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a></p>\n\t\t\t"
  },
  {
    "postId": "wpf-flipview",
    "content": "\n\t\t\t\t<p>FlipView control behaves like an ItemsControl and shows items one by one on swipe gesture. Also navigation buttons will be available to navigate using mouse. Many users nowadays expecting Windows store touch apps to be developed using WPF. That doesn&#x2019;t require to be published on store for distribution. Same time all the features and behaviors that can be done in WinRT can also be done in WPF. So many users prefer that.</p>\n<p><a href=\"http://www.codeproject.com/Articles/741026/WPF-FlipView\">Read more in CodeProject.</a></p>\n<p><img alt src=\"https://i1.wp.com/www.codeproject.com/KB/WPF/741026/flipview.png\" width=\"547\" height=\"483\"></p>\n<p>&#xA0;</p>\n\t\t\t"
  },
  {
    "postId": "wpf-rendering-engine",
    "content": "\n\t\t\t\t<div dir=\"ltr\"><!--[if gte mso 9]&gt;        &lt;![endif]--><!--[if gte mso 9]&gt;     Normal   0               false   false   false      EN-US   X-NONE   TA                                                                                             &lt;![endif]--><!--[if gte mso 9]&gt;                                                                                                                                                                                                                                                                                                                                                                                                                                &lt;![endif]--><!--[if gte mso 10]&gt;  /* Style Definitions */  table.MsoNormalTable  {mso-style-name:\"Table Normal\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:\"\";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin-top:0in;  mso-para-margin-right:0in;  mso-para-margin-bottom:10.0pt;  mso-para-margin-left:0in;  line-height:115%;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;} table.MsoTableGrid  {mso-style-name:\"Table Grid\";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-priority:59;  mso-style-unhide:no;  border:solid windowtext 1.0pt;  mso-border-alt:solid windowtext .5pt;  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-border-insideh:.5pt solid windowtext;  mso-border-insidev:.5pt solid windowtext;  mso-para-margin:0in;  mso-para-margin-bottom:.0001pt;  mso-pagination:widow-orphan;  font-size:11.0pt;  font-family:\"Calibri\",\"sans-serif\";  mso-ascii-font-family:Calibri;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Calibri;  mso-hansi-theme-font:minor-latin;  mso-bidi-font-family:Latha;  mso-bidi-theme-font:minor-bidi;  mso-bidi-language:AR-SA;}  &lt;![endif]-->  <p></p>\n<div><b>WPF Rendering Engine</b></div>\n<div></div>\n<div>Windows Presentation Foundation (WPF) is graphical display system for Windows Operating System. WPF hit the Windows users and Market, because of its high level Graphical rendering when compared to primitive graphical applications. Before .Net 3.0 it is not possible to create rich graphical Windows applications, since Windows Forms and MFC were in the way.</div>\n<div></div>\n<div>The main difference I can point out between Windows Forms and WPF is the way they used to render the User Interface.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span>Windows Forms completely depends on GDI/GDI+ (sometimes User32) for UI rendering.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span>Whereas WPF depends on <b>DirectX</b> for its UI rendering.</div>\n<div></div>\n<div><i>DirectX is an older error prone gaming tool, which is used to render rich shapes, textures, gradients, etc.</i></div>\n<div></div>\n<div>Shortly after Windows 95, DirectX has matured and it supports most of the advanced Video Cards. But still most of the DirectX programming API reflect its root to older game developer&#x2019;s toolkit.</div>\n<div></div>\n<div><b>Hardware Acceleration</b></div>\n<div></div>\n<div>Hardware acceleration is the use of computer hardware to perform some function faster than is possible in software running on the general-purpose CPU. Having a high powered video card is not a guarantee, that it will provide high level hardware acceleration. Software should also play a significant role.</div>\n<div></div>\n<div>WPF offers some sort of hardware acceleration to all WDDM (Windows Display Driver Model) and XPDM (Windows XP Driver Model) drivers. But the level of offering the acceleration differs. It assigns its rating in hardware acceleration from 0 to 2.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span><b>Rendering Tier 0:</b> The Video card will not provide any hardware acceleration. Corresponds to DirectX version less than 7.0.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span><b>Rendering Tier 1:</b> The Video card will provide partial hardware acceleration. Corresponds to DirectX version between 7.0 and 9.0.</div>\n<div></div>\n<div><span><span>&#xB7;<span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></span><b>Rendering Tier 2:</b> The Video card will provide complete hardware acceleration. Corresponds to DirectX version greater than 9.0.</div>\n<div></div>\n<div><b>What is a pixel?</b></div>\n<div></div>\n<div>A WPF Window and all its elements inside it are measure using <i>device independent units</i>. A single device independent unit is equal to 1/96 of an inch.</div>\n<div></div>\n<div><span>For example, if we create a WPF button with 1 inch(i.e. 96 by 96 units ) in size. And if we are using the standard Windows DPI (Dots per inch) settings (96 DPI), each device independent unit is equal to one real, physical <b>pixel</b>.</span></div>\n<div></div>\n<div><span>[Physical Unit Size] = [Device independent unit size] * [System DPI]</span></div>\n<div><span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>=1/96 inch * 96 dpi</span></div>\n<div><span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span>=1 pixel</span></div>\n<div></div>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"638\">\n<div><b><span>Note</span></b><span> : WPF respond only to System   DPI settings and not to the System resolutions as Windows Forms or other   application does.</span></div>\n</td>\n</tr>\n</tbody>\n</table>\n<div></div>\n<div></div>\n<div><span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span></span></div>\n<div></div>\n</div>\n\t\t\t"
  },
  {
    "content": "\n\t\t\t\t<div dir=\"ltr\"><span>An editor supporting smileys is most important feature nowadays. Any chat editors should render smileys from a piece of text. For example, &#x201C;:)</span><strong>&#x201D;&#xA0;</strong><span>denotes a smiling face. This article helps you to create an extended rich text editor which support smileys. <a href=\"http://www.codeproject.com/Tips/599014/WPF-RichTextBox-supporting-smileys\" target=\"_blank\">[Read more]</a></span><br><span><br></span><p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2013/05/ca4f8-demo.png\"><img border=\"0\" height=\"206\" src=\"https://wpfplayground.files.wordpress.com/2013/05/ca4f8-demo.png?w=400&amp;h=206\" width=\"400\"></a></div>\n<p><span><br></span></p></div>\n\t\t\t",
    "postId": "wpf-richtextbox-supporting-smileys"
  },
  {
    "content": "\n\t\t\t\t<p>A style in WPF can be inherited. Usually, in real world scenarios most of the theme related styles will be merged in App.xaml. In such cases, if style needs to be defined again in scope of a view. That particular style will override the style defined in App. For example, the following style for ListBoxItem is defined in App.xaml.</p>\n<pre><code><br>&lt;Style TargetType=&quot;ListBoxItem&quot;&gt;<br>&lt;Setter Property=&quot;Background&quot; Value=&quot;Orange&quot; /&gt;<br>&lt;Setter Property=&quot;Foreground&quot; Value=&quot;White&quot; /&gt;<br>&lt;Setter Property=&quot;Padding&quot; Value=&quot;10&quot; /&gt;<br>&lt;/Style&gt;<br><br></code></pre>\n<p><span id=\"more-213\"></span></p>\n<p>The above style clearly stick to theming. Since it is an implicit styling, the styling will apply to ListBox items defined below,</p>\n<pre><code><br>&lt;ListBox ItemsSource=&quot;{Binding Movies}&quot;<br> DisplayMemberPath=&quot;Name&quot; /&gt;<br><br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png\"><img data-attachment-id=\"217\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/05/wpf-style-inheritance/demo1/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png\" data-orig-size=\"555,381\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"demo1\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=555\" alt=\"demo1\" src=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/demo1.png 555w, https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/demo1.png?w=300 300w\" sizes=\"(max-width: 555px) 100vw, 555px\"></a>The Listbox displaying the movies and showing the name of movie in each item. Now if we want to use ItemContainerStyle property of ListBoxItem to bind some other data, the framework will prefer shortest path to pick style and style that defined in App.xaml will be ignored.</p>\n<pre><code><br>&lt;ListBox ItemsSource=&quot;{Binding Movies}&quot;<br> DisplayMemberPath=&quot;Name&quot;&gt;<br> &lt;ListBox.ItemContainerStyle&gt;<br> &lt;Style TargetType=&quot;ListBoxItem&quot;&gt;<br> &lt;Setter Property=&quot;Opacity&quot;<br> Value=&quot;{Binding Rating}&quot; /&gt;<br> &lt;/Style&gt;<br> &lt;/ListBox.ItemContainerStyle&gt;<br> &lt;/ListBox&gt;<br><br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png\"><img data-attachment-id=\"223\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/05/wpf-style-inheritance/demo2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png\" data-orig-size=\"450,274\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"demo2\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=450\" alt=\"demo2\" src=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/demo2.png 450w, https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/demo2.png?w=300 300w\" sizes=\"(max-width: 450px) 100vw, 450px\"></a></p>\n<p>Here I need both the styles I defined in App.xaml and the inline one. WPF provides a way to inherit the style by another one. <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.style.basedon(v=vs.110).aspx\">BasedOn </a>property helps us to achieve this.</p>\n<pre><code><br>&lt;ListBox ItemsSource=&quot;{Binding Movies}&quot;<br> DisplayMemberPath=&quot;Name&quot;&gt;<br> &lt;ListBox.ItemContainerStyle&gt;<br> &lt;Style TargetType=&quot;ListBoxItem&quot;<br> BasedOn=&quot;{StaticResource {x:Type ListBoxItem}}&quot;&gt;<br> &lt;Setter Property=&quot;Opacity&quot;<br> Value=&quot;{Binding Rating}&quot; /&gt;<br> &lt;/Style&gt;<br> &lt;/ListBox.ItemContainerStyle&gt;<br> &lt;/ListBox&gt;<br><br></code></pre>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png\"><img data-attachment-id=\"230\" data-permalink=\"https://wpfplayground.wordpress.com/2014/03/05/wpf-style-inheritance/demo3/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png\" data-orig-size=\"555,381\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}\" data-image-title=\"demo3\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=555\" alt=\"demo3\" src=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=736\" srcset=\"https://wpfplayground.files.wordpress.com/2014/03/demo3.png 555w, https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/03/demo3.png?w=300 300w\" sizes=\"(max-width: 555px) 100vw, 555px\"></a>Since the style in App.xaml is implicit style without key, we are specifying the type for BasedOn attribute. Otherwise we have to specify the key of base style.</p>\n\t\t\t",
    "postId": "wpf-style-inheritance"
  }
]