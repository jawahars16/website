{"meta":{"published_date":"2018-11-12T18:30:00.000Z","postId":"dependency-inversion-a-real-world-comparison","title":"Dependency Inversion - a real world comparison.","excerpt":"Let me start with a story.Bob need a new assistant for his startup. He hired Janice. Bob wanted Janice to concentrate more on the paper work. One day Bob wanted print outs of some old invoices. Janice collected those invoices. She then get a new printer from the store and get those invoices printed.","tags":[],"featuredImage":"https://storage.googleapis.com/jawahar-tech/1560609620255.jpg"},"content":"<div> <div> <style data-emotion-css=\"3v4hyr\"> .css-3v4hyr a .image-container .image-caption{color: rgb(227, 208, 168);}.css-3v4hyr a .image-container .image-caption:hover{-webkit-text-decoration: underline; text-decoration: underline;}</style> <div> <p>Let me start with a story.</p><div></div><p>Bob need a new assistant for his startup. He hired Janice. Bob wanted Janice to concentrate more on the paper work. One day Bob wanted print outs of some old invoices. Janice collected those invoices. She then get a new printer from the store and get those invoices printed. Bob was happy. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/864x568.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609610840.png\"></div></div></div><div></div><p>Few days later Bob wanted some of his user feed back forms to be scanned and uploaded. Janice went out and get a new scanner and get the job done. Similarly every time Bob assign a new job, Janice has to look for required materials to get the job done. Also she has to manage those inventories. Whenever the printer ran out of ink she had to fix it. She was little worried, since she was not able concentrate on her actual job. She brought the concern to Bob. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/722x508.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609612281.png\"></div></div></div><div></div><p>Bob thought through that and realised the problem. So he decided to provide the required materials to Janice whenever he assign a job. Janice was happy. But Bob cannot manage those materials continuously because of his busy schedule. So Bob hired Joey as admin and he wants Joey to manage all those inventories for him. So whenever Bob assign a new job to Janice Joey make sure he provide all the required materials to complete the job. All three of them now understood their responsibilities and lived happily. </p><div></div><div> <div> <div data-hook=\"imageViewer\"> <div></div><div></div><div></div><img src=\"https://placehold.jp/18/fafafa/eeeeee/1100x552.png\" data-src=\"https://storage.googleapis.com/jawahar-tech/1560609613616.png\"></div></div></div><div></div><p>Let&apos;s get to the point. </p><div> <div> <hr class=\"divider\"/> </div></div><p>In object oriented programming, an object must depend on one or more other objects to perform a job. Consider our employee class. </p><div> <div> <pre><code>public class Employee <br>{<br>  private readonly IPrinter printer;<br>  private readonly IScanner scanner;<br><br>  public Employee()<br>  {<br>    this.printer = new BlackWhitePrinter();<br>    this.scanner = new Scanner();<br>  }<br><br>  public void GetInvoices()<br>  {<br>    // Get invoices.<br>    this.printer.Print(invoices);<br>  }<br><br>  public void UploadFeedbacks()<br>  {<br>    this.scanner.Scan(feedbacks);<br>    // Upload feedbacks to database<br>  }<br>}<br></code></pre> </div></div><p>It needs to perform certain functions for which it has to depend on certain other low level objects. For example, to hand over few old invoices to Bob Janice has to depend on a printer. The employee class is creating and managing it&apos;s own dependencies. This approach has several disadvantages. </p><ol> <li> <p>Whenever the dependencies get modified, the objects depend on them are also likely to be changed. What if the constructor of the class BlackWhitePrinter changed to accept parameters. </p></li><li> <p>Whenever we create an object for the employee class it comes with black and white printer by default. What if in another context we need a color printer. </p></li><li> <p>The employee class is not focusing on its core job. Instead it is also focusing on managing dependencies, thereby increasing complexity of the class. </p></li><li> <p>Mocking dependencies are not possible and unit testing becomes a pain.</p></li></ol> <div></div><blockquote> <div>Dependency injection is the technique of supplying the required dependencies to an object from outside. </div></blockquote> <div></div><p>Let&apos;s refactor our employee class to adapt dependency injection technique. </p><div> <div> <pre><code>public class Employee <br>{<br>  private readonly IPrinter printer;<br>  private readonly IScanner scanner;<br><br>  public Employee(IPrinter printer, IScanner scanner)<br>  {<br>    this.printer = printer;<br>    this.scanner = scanner;<br>  }<br><br>  public void GetInvoices()<br>  {<br>    // Get invoices.<br>    this.printer.Print(invoices);<br>  }<br><br>  public void UploadFeedbacks()<br>  {<br>    this.scanner.Scan(feedbacks);<br>    // Upload feedbacks to database<br>  }<br>}<br></code></pre> </div></div><p>Instead of creating the printer and scanner dependencies by itself, now the employee get those objects through constructor.</p><div> <div> <pre><code>var printer = new BlackWhitePrinter();<br>var scanner = new Scanner();<br><br>var employee = new Employee(printer, scanner);<br>employee.GetInvoices();<br></code></pre> </div></div><p>The caller has to supply the dependencies, whenever it creates the employee object. The control over the dependencies has been shifted from the employee class to outside. </p><p>By doing this we eliminate all the disadvantages we listed earlier. </p><div></div><p>Any change to the dependencies doesn&apos;t affect the employee class. The employee class depends on the interface and not on the implementation. So a different type of printer can be injected to employee class. Employee class doesn&apos;t need to focus on managing dependencies anymore. Its responsibility is clearly defined. Unit testing employee class is now simple, since mock implementations can be supplied. </p><div></div><p>The code can be further refactored by delegating the dependency management to an external framework. (Now it&apos;s time to hire our Joey to manage all our inventories.)</p><div></div><p>Popular DI frameworks for .NET</p><div></div><p>1. <a href=\"https://code.msdn.microsoft.com/Dependency-Injection-in-11d54863\" target=\"_blank\" rel=\"noopener\">Unity</a>2. <a href=\"https://autofac.org/\" target=\"_blank\" rel=\"noopener\">Autofac</a>3. <a href=\"http://www.ninject.org/\" target=\"_blank\" rel=\"noopener\">Ninject</a></p><div></div><p>For Java</p><div></div><p>1. <a href=\"https://google.github.io/dagger/\" target=\"_blank\" rel=\"noopener\">Dagger</a>2. <a href=\"https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/beans.html\" target=\"_blank\" rel=\"noopener\">Spring</a></p><div></div><p>I am not going to explain the API details of every framework. You can go through the links above to understand that. If we using unity framework this is how to register the dependencies and resolve objects. </p><div> <div> <pre><code>IUnityContainer container = new UnityContainer();<br><br>container.RegisterType<IPrinter, BlackWhitePrinter>();<br>container.RegisterType<IScanner, Scanner>();<br><br>var employee = container.Resolve<Employee>();<br>employee.GetInvoices();<br></code></pre> </div></div><p>When you resolve an object using DI container, it will make sure that it create and supply all the dependencies to the object. So the caller and the employee class does not have to worry about the dependencies. This helps to build system with loosely coupled components. </p><p> </p><p>Thanks for reading. </p></div></div></div>"}