{"meta":{"tags":[],"featuredImage":"https://s0.wp.com/i/blank.jpg","published_date":"2012-04-28T00:00:00.000Z","postId":"capture-screenshot-in-wpf","title":"Capture Screenshot in WPF","excerpt":"\t\t\tCapturing screen shot in Windows Forms is straight forward. But in WPF, we need some Pinvoke calls. We going to use the methods from User32.dll and gdi32.dll. For more reference about available methods in User32.dll, go through here.\n\n public class InteropHelper    {        [DllImport(\"user32.dll"},"content":"\n\t\t\t\t<div dir=\"ltr\">Capturing screen shot in Windows Forms is&#xA0;straight&#xA0;forward. But in WPF, we need some Pinvoke calls. We going to use the methods from User32.dll and gdi32.dll. For more reference about available methods in User32.dll, go through <a href=\"http://wpfplayground.blogspot.in/2011/09/digging-into-user32dll.html\" target=\"_blank\">here</a>.<p></p>\n<p></p>\n<pre><code>&#xA0;public&#xA0;class&#xA0;InteropHelper<br>&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;GetDesktopWindow();<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd144871(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;GetDC(IntPtr&#xA0;hwnd);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183370(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[return:&#xA0;MarshalAs(UnmanagedType.Bool)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;BitBlt(IntPtr&#xA0;hDestDC,&#xA0;int&#xA0;x,&#xA0;int&#xA0;y,&#xA0;int&#xA0;nWidth,&#xA0;int&#xA0;nHeight,&#xA0;IntPtr&#xA0;hSrcDC,&#xA0;int&#xA0;xSrc,&#xA0;int&#xA0;ySrc,&#xA0;Int32&#xA0;dwRop);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183488(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;CreateCompatibleBitmap(IntPtr&#xA0;hdc,&#xA0;int&#xA0;nWidth,&#xA0;int&#xA0;nHeight);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183489(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;,&#xA0;SetLastError&#xA0;=&#xA0;true)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;CreateCompatibleDC(IntPtr&#xA0;hdc);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd162957(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;,&#xA0;ExactSpelling&#xA0;=&#xA0;true,&#xA0;PreserveSig&#xA0;=&#xA0;true,&#xA0;SetLastError&#xA0;=&#xA0;true)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;IntPtr&#xA0;SelectObject(IntPtr&#xA0;hdc,&#xA0;IntPtr&#xA0;hgdiobj);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd183539(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;gdi32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;bool&#xA0;DeleteObject(IntPtr&#xA0;hObject);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;http://msdn.microsoft.com/en-us/library/dd162920(VS.85).aspx<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[DllImport(&quot;user32.dll&quot;)]<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;extern&#xA0;int&#xA0;ReleaseDC(IntPtr&#xA0;hwnd,&#xA0;IntPtr&#xA0;dc);<br></code></pre>\n<pre><code></code></pre>\n<pre><code>}</code></pre>\n<pre><code></code></pre>\n<pre><code></code></pre>\n<div>To get a copy of desktop screen, first we need to get the bitmap source from the desktop. Use the pinvoke methods in following way.</div>\n<pre><code></code></pre>\n<pre><code>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;public&#xA0;static&#xA0;BitmapSource&#xA0;CaptureRegion(IntPtr&#xA0;hWnd,&#xA0;int&#xA0;x,&#xA0;int&#xA0;y,&#xA0;int&#xA0;width,&#xA0;int&#xA0;height)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;sourceDC&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;targetDC&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IntPtr&#xA0;compatibleBitmapHandle&#xA0;=&#xA0;IntPtr.Zero;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BitmapSource&#xA0;bitmap&#xA0;=&#xA0;null;<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;try<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gets&#xA0;the&#xA0;main&#xA0;desktop&#xA0;and&#xA0;all&#xA0;open&#xA0;windows<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sourceDC&#xA0;=&#xA0;InteropHelper.GetDC(InteropHelper.GetDesktopWindow());<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//sourceDC&#xA0;=&#xA0;User32.GetDC(hWnd);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;targetDC&#xA0;=&#xA0;InteropHelper.CreateCompatibleDC(sourceDC);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;a&#xA0;bitmap&#xA0;compatible&#xA0;with&#xA0;our&#xA0;target&#xA0;DC<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;compatibleBitmapHandle&#xA0;=&#xA0;InteropHelper.CreateCompatibleBitmap(sourceDC,&#xA0;width,&#xA0;height);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gets&#xA0;the&#xA0;bitmap&#xA0;into&#xA0;the&#xA0;target&#xA0;device&#xA0;context<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.SelectObject(targetDC,&#xA0;compatibleBitmapHandle);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;copy&#xA0;from&#xA0;source&#xA0;to&#xA0;destination<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;InteropHelper.BitBlt(targetDC,&#xA0;0,&#xA0;0,&#xA0;width,&#xA0;height,&#xA0;sourceDC,&#xA0;x,&#xA0;y,&#xA0;InteropHelper.SRCCOPY);<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Here&apos;s&#xA0;the&#xA0;WPF&#xA0;glue&#xA0;to&#xA0;make&#xA0;it&#xA0;all&#xA0;work.&#xA0;It&#xA0;converts&#xA0;from&#xA0;an<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;hBitmap&#xA0;to&#xA0;a&#xA0;BitmapSource.&#xA0;Love&#xA0;the&#xA0;WPF&#xA0;interop&#xA0;functions<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bitmap&#xA0;=&#xA0;System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;compatibleBitmapHandle,&#xA0;IntPtr.Zero,&#xA0;Int32Rect.Empty,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;BitmapSizeOptions.FromEmptyOptions());<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;catch&#xA0;(Exception&#xA0;ex)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;finally<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DeleteObject(compatibleBitmapHandle);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ReleaseDC(IntPtr.Zero,&#xA0;sourceDC);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ReleaseDC(IntPtr.Zero,&#xA0;targetDC);<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br> <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;bitmap;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br><br>For more information on pinvoke methods, this will help.<br></code></pre></div>\n\t\t\t"}