{"meta":{"tags":[],"featuredImage":"https://wpfplayground.files.wordpress.com/2012/05/a93e7-sshot-7.png?w=300","published_date":"2012-05-04T00:00:00.000Z","postId":"registering-a-custom-file-extension-in-windows","title":"Registering a custom file extension inÂ Windows","excerpt":"\t\t\tMost of the real world applications need custom file extensions. Double clicking the file with such extension should be opened with particular application. This article explaining how to register a custom file extension in Windows 7. Custom file extensions normally resides in registry under the f"},"content":"\n\t\t\t\t<div dir=\"ltr\">Most of the real world applications need custom file extensions. Double clicking the file with such extension should be opened with particular application. This article explaining how to register a custom file extension in Windows 7. Custom file extensions normally resides in registry under the following key,<p></p>\n<p>HKEY_CLASSES_ROOT</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/e2012-registry.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/e2012-registry.png?w=736\"></a></div>\n<p>For an example, let me take an application named <b>MyFoo.exe </b>which need a custom file with extension &#x201C;<i>*.foo&#x201D;</i><br><i><br></i><br>Step 1 : Create a new key under&#xA0;HKEY_CLASSES_ROOT with extension name (.foo).</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/94772-add.png\"><img border=\"0\" height=\"195\" src=\"https://wpfplayground.files.wordpress.com/2012/05/94772-add.png?w=320&amp;h=195\" width=\"320\"></a></div>\n<p>Edit the default value of the key and set it as &#x201C;MyFoo&#x201D;, the application name.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/b9612-value.png\"><img border=\"0\" height=\"281\" src=\"https://wpfplayground.files.wordpress.com/2012/05/b9612-value.png?w=640&amp;h=281\" width=\"640\"></a></div>\n<div></div>\n<p>Step 2 : Create another key under the same root with the name of the app &#x201C;MyFoo&#x201D;.</p>\n<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/026c2-foo.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/026c2-foo.png?w=736\"></a></div>\n<p>Step 3 : Create another sub node under MyFoo node and name it as DefaultIcon. Edit the default value and set the path to the icon file you want to add for your custom file.</p>\n<p>Step 4 : Create another sub node under MyFoo node with the name of &#x201C;shell&#x201D;. This node is responsible for adding commands.</p>\n<p>Step 5 : Under shell node, add your commands. Most of the traditional desktop applications came up with commands like open, play, preview, print, etc. For simplicity let me explain how to add a open command to this application. The MyFoo node should look like this once you have added the needed keys.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/fd017-command.png\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/05/fd017-command.png?w=736\"></a></div>\n<p>Now edit the command key and map the default value to the application exe.</p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/c977c-path.png\"><img border=\"0\" height=\"248\" src=\"https://wpfplayground.files.wordpress.com/2012/05/c977c-path.png?w=640&amp;h=248\" width=\"640\"></a></div>\n<p>Now we are done with registering the extension. All the files in the machine with .foo extension will be opened in MyFoo application. Also you can find the &#x201C;Open&#x201D; command on the context menu of the application tile.</p>\n<p>Everything is fine. But how your application would know the location of the file which is opened? Using Command line arguments we can extract the path. In WPF, we can get the command line&#xA0;arguments in Application Start up event in this way.</p>\n<pre><code>&#xA0;           if&#xA0;(e.Args.Count()&#xA0;&gt;&#xA0;0)<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;this.Properties[&quot;FilePath&quot;]&#xA0;=&#xA0;e.Args[0];<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</code></pre>\n<p>The file path we stored here can be used anywhere in the application,</p>\n<p><span>string</span><span>&#xA0;filepath&#xA0;=&#xA0;</span><span>Application</span><span>.Current.Properties[</span><span>&#x201C;FilePath&#x201D;</span><span>].ToString();</span></p>\n<pre><code>But to make this work, the default value of the command should be modified slighter.&quot;C:\\Users\\labuser\\Desktop\\MyFoo\\bin\\Debug\\MyFoo.exe&quot; &quot;%1&quot;.</code></pre>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/05/a93e7-sshot-7.png\"><img border=\"0\" height=\"240\" src=\"https://wpfplayground.files.wordpress.com/2012/05/a93e7-sshot-7.png?w=640&amp;h=240\" width=\"640\"></a></div>\n<p>Happy coding!!!&#x2026;</p>\n</div>\n\t\t\t"}