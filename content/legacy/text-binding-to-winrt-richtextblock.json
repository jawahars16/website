{"meta":{"tags":[],"featuredImage":"https://s0.wp.com/i/blank.jpg","published_date":"2013-05-01T00:00:00.000Z","postId":"text-binding-to-winrt-richtextblock","title":"Text binding to WinRTÂ RichTextBlock","excerpt":"\t\t\t\nNormally it is not possible to bind text to WinRT RichTextBlock as we do for TextBlock. RichTextBlock is devoid of Text dependency property. So the only way is to populate the Blocks property with paragraphs in code behind. But by simply declaring an attached property, we can achieve binding to "},"content":"\n\t\t\t\t<div dir=\"ltr\">\n<div>Normally it is not possible to bind text to WinRT RichTextBlock as we do for TextBlock. RichTextBlock is devoid of Text dependency property. So the only way is to populate the Blocks property with paragraphs in code behind. But by simply declaring an attached property, we can achieve binding to text in RichTextBlock.</div>\n<div></div>\n<div></div>\n<p><span id=\"more-9\"></span></p>\n<pre><code>        public static string GetText(DependencyObject obj)<br>        {<br>            return (string)obj.GetValue(TextProperty);<br>        }<br><br>        public static void SetText(DependencyObject obj, string value)<br>        {<br>            obj.SetValue(TextProperty, value);<br>        }<br><br>        // Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...<br>        public static readonly DependencyProperty TextProperty =<br>               DependencyProperty.RegisterAttached(&quot;Text&quot;, typeof(string), typeof(BindingHelper), new PropertyMetadata(String.Empty, OnTextChanged));<br><br>        private static void OnTextChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)<br>        {<br>            var control = sender as RichTextBlock;<br>            if (control != null)<br>            {<br>                control.Blocks.Clear();<br>                string value = e.NewValue.ToString();<br>                var paragraph = new Paragraph();<br>                paragraph.Inlines.Add(new Run { Text = value });<br>                control.Blocks.Add(paragraph);<br>            }<br>        }<br></code></pre>\n<div>&#xA0;The XAML side binding will looks like below,</div>\n<div></div>\n<pre><code>&lt;RichTextBlock common1:BindingHelper.Text=&quot;{Binding ElementName=calendar, Path=SelectedDate}&quot; /&gt;<br></code></pre>\n<p><a href=\"https://dl.dropboxusercontent.com/u/71941230/BindingHelper.zip\">Download BindingHelper.zip</a></p>\n</div>\n\t\t\t"}