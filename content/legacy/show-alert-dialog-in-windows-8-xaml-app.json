{"meta":{"postId":"show-alert-dialog-in-windows-8-xaml-app","title":"Show Alert dialog in Windows 8 XAML App","excerpt":"\t\t\tIt is a well known fact, that Windows 8 UI is flat, chromeless and clean. Every single pixel on the screen is there to represent your information. App will be taken up the entire screen. Showing alert windows to users is more trivial for an App developer. But I am sure it is not possible to show ","tags":[],"featuredImage":"https://wpfplayground.files.wordpress.com/2012/08/e2dc8-screenshot_08122012_031904.png?w=300","published_date":"2012-08-12T00:00:00.000Z"},"content":"\n\t\t\t\t<div dir=\"ltr\">It is a well known fact, that Windows 8 UI is flat, chromeless and clean. Every single pixel on the screen is there to represent your information. App will be taken up&#xA0;the entire screen. Showing alert windows to users is more trivial for an App developer. But I am sure it is not possible to show something like below in new Windows 8 UI.<p></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/08/27235-thcazujxm5.jpg\"><img border=\"0\" src=\"https://wpfplayground.files.wordpress.com/2012/08/27235-thcazujxm5.jpg?w=736\"></a></div>\n<p>Windows 8 has an alternate way to show alert. The article shows how to show an alert dialog in Windows 8 XAML app. </p>\n<p>Include the following namespace in your XAML project.</p>\n<p><em>using Windows.UI.Popups;</em></p>\n<p>Unlike WPF or Windows Forms, Windows 8 has no static Message box class. Instead above namespace contains a non-singleton class called <em>MessageDialog</em>.</p>\n<p><span><span><span>protected override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;<span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0; dialog.ShowAsync();<br>}</span><br><span></span></span></p>\n<div><span><span><a href=\"https://wpfplayground.files.wordpress.com/2012/08/0e161-screenshot_08122012_025326.png\"><img border=\"0\" height=\"480\" src=\"https://wpfplayground.files.wordpress.com/2012/08/0e161-screenshot_08122012_025326.png?w=640&amp;h=480\" width=\"640\"></a></span></span></div>\n<p><span><br></span><span><span>Unlike WPF or Windows Forms, ShowAsync() method is not awaited by default. So&#xA0;the execution of current method continues before the call is completed. To avoid this Windows 8 introduced a new keyword <span><em>await</em>.</span></span></span></p>\n<p><span>More information about <em><span>await</span></em> keyword is available <a href=\"http://blogs.msdn.com/b/windowsappdev/archive/2012/04/24/diving-deep-with-winrt-and-await.aspx\" target=\"_blank\">here</a>.</span></p>\n<p>The below code will do the magic. To add <em>await</em> keyword, the entire method should be <em>async</em>.<br><span><span>protected <strong><u>async</u></strong> override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0;&#xA0;&#xA0;&#xA0; <span><strong><u>await</u></strong></span> dialog.ShowAsync();<span>//Execution waits here until dialog processed.</span><br>&#xA0;&#xA0;&#xA0;&#xA0; System.Diagnostics.<span>Debug</span>.WriteLine(<span>&#x201C;Go ahead!!&#x201D;</span>);<br>}</span><br><span><br></span>Commands can be added, which renders button for each command in dialog.</p>\n<p><span><span>protected async override void</span> OnNavigatedTo(<span>NavigationEventArgs</span> e)<br>{<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>var</span> dialog = new <span>MessageDialog</span>(<span>&#x201C;Hello !!! I am new to Windows 8 XAML&#x201D;</span>);<br>&#xA0;&#xA0;&#xA0;&#xA0; dialog.Commands.Add(<span>new </span><span>UICommand</span>(&#x201C;Done&#x201D;, new <span>UICommandInvokedHandler</span>(delegate(IUICommand command) <br>&#xA0;&#xA0;&#xA0;&#xA0; { <br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <span>//Action goes here&#x2026;.</span> </span><br><span>&#xA0;&#xA0;&#xA0;&#xA0; })));<br>&#xA0;&#xA0;&#xA0;&#xA0; dialog.Commands.Add(<span>new</span> <span>UICommand</span>(&#x201C;Retry&#x201D;, new <span>UICommandInvokedHandler</span>(delegate(IUICommand command)<br>&#xA0;&#xA0;&#xA0;&#xA0; {<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <span>//Action goes here&#x2026;.</span> </span><br><span>&#xA0;&#xA0;&#xA0;&#xA0; })));<br>&#xA0;&#xA0;&#xA0;&#xA0; <span>await</span> dialog.ShowAsync();&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br>}</span></p>\n<div><a href=\"https://wpfplayground.files.wordpress.com/2012/08/e2dc8-screenshot_08122012_031904.png\"><img border=\"0\" height=\"480\" src=\"https://wpfplayground.files.wordpress.com/2012/08/e2dc8-screenshot_08122012_031904.png?w=640&amp;h=480\" width=\"640\"></a></div>\n<p><span></span></p>\n<p></p></div>\n\t\t\t"}