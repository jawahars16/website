{"meta":{"tags":["fallbackvalue","priority binding","reference","targetnullvalue","textblock","wpf","xaml"],"featuredImage":"https://wpfplayground.files.wordpress.com/2014/12/window.png","published_date":"2014-12-05T00:00:00.000Z","postId":"5-tricks-you-should-know-in-wpf-part-2","title":"5 Tricks you should know in WPF – PART 2","excerpt":"\t\t\t1. TextBlock is not just for Text\nWe all know that TextBlock is an UI control, which will carry a piece of text. But actually MSDN explains it in a bit different way.\nProvides a lightweight control for displaying small amounts of flow content.\nFlow Content !!!, which not means only text. Lets loo"},"content":"\n\t\t\t\t<h1>1. TextBlock is not just for Text</h1>\n<p>We all know that TextBlock is an UI control, which will carry a piece of text. But actually MSDN explains it in a bit different way.</p>\n<blockquote><p>Provides a lightweight control for displaying small amounts of flow content.</p></blockquote>\n<p>Flow Content !!!, which not means only text. Lets look at the power of TextBlock. TextBlock can carry any UIElement. It may be an image, path or even a button.</p>\n<p><span id=\"more-555\"></span></p>\n<pre><code>&lt;TextBlock&gt;<br>    TextBlock can carry a <br>    &lt;Button Content=&quot;Button&quot;/&gt;<br>    and even a <br>    &lt;CheckBox Content=&quot;CheckBox&quot; IsChecked=&quot;True&quot;/&gt; .<br>    That is awesome. <br>    &lt;Image Source=&quot;smiley.png&quot; /&gt;<br>&lt;/TextBlock&gt;<br></code></pre>\n<p>The above code will give the following output.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png\"><img data-attachment-id=\"559\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/textblock-2/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png\" data-orig-size=\"539,187\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"textblock\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=539\" src=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=736\" alt=\"textblock\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/textblock.png 539w, https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=150 150w, https://wpfplayground.files.wordpress.com/2014/12/textblock.png?w=300 300w\" sizes=\"(max-width: 539px) 100vw, 539px\"></a></p>\n<h1>2. SharedSizeScope</h1>\n<p>Grid is the most flexible panel, where elements can arranged in rows and columns manner. Some situation, there might be multiple grids with same row and column sizing. So if there is any design change (design time or run time), we have to change the size in every grid. But SharedSizeScope feature will provide a flexibility, that multiple grids can share the size information. So if one grid affected by size change in its row/columns, others will get the change automatically.</p>\n<p>Rows and Columns having the same group name will share the size information.</p>\n<pre><code>    &lt;Grid Grid.IsSharedSizeScope=&quot;True&quot;&gt;<br>        &lt;Grid.RowDefinitions&gt;<br>            &lt;RowDefinition /&gt;<br>            &lt;RowDefinition /&gt;<br>        &lt;/Grid.RowDefinitions&gt;<br>        &lt;Grid x:Name=&quot;Grid1&quot; Margin=&quot;10&quot; ShowGridLines=&quot;True&quot;&gt;<br>            &lt;Grid.RowDefinitions&gt;<br>                &lt;RowDefinition Height=&quot;30&quot; SharedSizeGroup=&quot;HeaderRow&quot;/&gt;<br>                &lt;RowDefinition Height=&quot;120&quot; SharedSizeGroup=&quot;ContentRow&quot;/&gt;<br>            &lt;/Grid.RowDefinitions&gt;<br>            &lt;Rectangle Fill=&quot;LightCoral&quot;/&gt;<br>            &lt;Rectangle Fill=&quot;LightBlue&quot;<br>                       Grid.Row=&quot;1&quot;/&gt;<br>        &lt;/Grid&gt;<br>        &lt;Grid x:Name=&quot;Grid2&quot; Margin=&quot;10&quot; ShowGridLines=&quot;True&quot; Grid.Row=&quot;1&quot;&gt;<br>            &lt;Grid.RowDefinitions&gt;<br>                &lt;RowDefinition SharedSizeGroup=&quot;HeaderRow&quot;/&gt;<br>                &lt;RowDefinition SharedSizeGroup=&quot;ContentRow&quot;/&gt;<br>            &lt;/Grid.RowDefinitions&gt;<br>            &lt;Rectangle Fill=&quot;LightCoral&quot; /&gt;<br>            &lt;Rectangle Fill=&quot;LightBlue&quot;<br>                       Grid.Row=&quot;1&quot; /&gt;<br>        &lt;/Grid&gt;<br>    &lt;/Grid&gt;<br></code></pre>\n<p>The above code will produce the following output,</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/window.png\"><img data-attachment-id=\"565\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/window/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png\" data-orig-size=\"457,382\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"window\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=457\" src=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300&amp;h=251\" alt=\"window\" width=\"300\" height=\"251\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/window.png?w=300&amp;h=251 300w, https://wpfplayground.files.wordpress.com/2014/12/window.png?w=150&amp;h=125 150w, https://wpfplayground.files.wordpress.com/2014/12/window.png 457w\" sizes=\"(max-width: 300px) 100vw, 300px\"></a><br>\n<strong>Note</strong> : SharedSizeScope will not work for Star Sizing. Star will be considered as auto.</p>\n<h1>3. x:References in XAML</h1>\n<p>The markup will directly refer an instance which is declared elsewhere in the XAML. the reference will be identified by the x:Name.</p>\n<pre><code>&lt;StackPanel&gt;<br>    &lt;Label Content=&quot;_Name&quot; Target=&quot;{x:Reference txtName}&quot;/&gt;<br>    &lt;TextBox x:Name=&quot;txtName&quot;/&gt;<br>&lt;/StackPanel&gt;<br></code></pre>\n<p>In the above code, the TextBox with name txtName will become the target of the Label. This can also be achieved using ElementName binding as below,</p>\n<pre><code>&lt;StackPanel&gt;<br>    &lt;Label Content=&quot;_Name&quot; Target=&quot;{Binding ElementName=txtName}&quot;/&gt;<br>    &lt;TextBox x:Name=&quot;txtName&quot;/&gt;<br>&lt;/StackPanel&gt;<br></code></pre>\n<p><strong>Note</strong> : Anybody confused about Target property of Label? No Problem !!! The property referes to the element which will get focus, when user presses the label&#x2019;s access key. Here the access key is &#x201C;N&#x201D;.</p>\n<p><a href=\"https://wpfplayground.files.wordpress.com/2014/12/label.png\"><img data-attachment-id=\"571\" data-permalink=\"https://wpfplayground.wordpress.com/2014/12/05/5-tricks-you-should-know-in-wpf-part-2/label/\" data-orig-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png\" data-orig-size=\"265,93\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"Label\" data-image-description data-medium-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=265\" data-large-file=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=265\" src=\"https://wpfplayground.files.wordpress.com/2014/12/label.png?w=736\" alt=\"Label\" srcset=\"https://wpfplayground.files.wordpress.com/2014/12/label.png 265w, https://wpfplayground.files.wordpress.com/2014/12/label.png?w=150 150w\" sizes=\"(max-width: 265px) 100vw, 265px\"></a></p>\n<h1>4. FallBackValue and TargetNullValue</h1>\n<p>When the binding is unable to return a valid value, Fallback value will be used as the result. A binding can fail for following reasons,</p>\n<p>1. The path to the binding not resolved.<br>\n2. The Value Converter (if any), not able to convert the value.<br>\n3. The resulting value is not valid for target property.</p>\n<p>Whenever the binding fails, <strong>DependencyProperty.UnsetValue</strong> will be return as the result. Fallback value will replace the UnsetValue. The following code will show &#x201C;Name cannot be shown&#x201D;, if binding fails.</p>\n<pre><code>&lt;TextBlock Text=&quot;{Binding Name, FallbackValue=&apos;Name cannot be shown&apos;}&quot;/&gt;<br></code></pre>\n<p>TargetNullValue will be considered when the source value is <strong>NULL</strong>. The below code will show &#x201C;Name cannot be show&#x201D;, when the Name property is NULL.</p>\n<pre><code>&lt;TextBlock Text=&quot;{Binding Name, TargetNullValue=&apos;Name cannot be shown&apos;}&quot;/&gt;<br></code></pre>\n<h1>5. Priority Binding</h1>\n<p>PriorityBinding works with list of Bindings. The value of the property will be resolved in priority basis. If the highest priority binding returns the value successfully, the other bindings will not be processed. If the highest priority binding took time to resolve the value, then the second highest priority binding will be processed and return the value until the highest priority binding done resolving the value.</p>\n<pre><code>  &lt;TextBlock&gt;<br>    &lt;TextBlock.Text&gt;<br>      &lt;PriorityBinding FallbackValue=&quot;defaultvalue&quot;&gt;<br>        &lt;Binding Path=&quot;SlowestValue&quot; IsAsync=&quot;True&quot;/&gt;<br>        &lt;Binding Path=&quot;SlowerValue&quot; IsAsync=&quot;True&quot;/&gt;<br>        &lt;Binding Path=&quot;FastValue&quot; /&gt;<br>      &lt;/PriorityBinding&gt;<br>    &lt;/TextBlock.Text&gt;<br>  &lt;/TextBlock&gt;<br></code></pre>\n<p>When the binding engine processes the Binding objects, it starts with the first Binding, which is bound to the SlowestValue property. When this Binding is processed, it does not return a value successfully if it going to take long time, so the next Binding element is processed. The next Binding does not return a value successfully if that going to take a few time. The binding engine then moves onto the next Binding element, which is bound to the FastValue property. This Binding returns the value &#x201C;Fast Value&#x201D;. The TextBlock now displays the value &#x201C;Fast Value&#x201D;.</p>\n\t\t\t"}