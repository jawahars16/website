{"meta":{"title":"Different sized tile items in WinRTÂ GridView","excerpt":"\t\t\tGridView in WinRT allows you to arrange tile items in wrap manner. In case, if you want to arrange items as in Windows store app, we need different sized tile items. There is no direct way to configure different sized items while using data binding in Grid View. I am going to explain the solution","tags":[],"featuredImage":"https://s0.wp.com/i/blank.jpg","published_date":"2013-03-13T00:00:00.000Z","postId":"different-sized-tile-items-in-winrt-gridview"},"content":"\n\t\t\t\t<p>GridView in WinRT allows you to arrange tile items in wrap manner. In case, if you want to arrange items as in Windows store app, we need different sized tile items. There is no direct way to configure different sized items while using data binding in Grid View. I am going to explain the solution in this article.</p>\n<p>VariableSizedWrapGrid should be the panel for Grid View. This panel has two attached properties <em>ColumnSpan</em> and <em>RowSpan</em>. To set this property to the containers, we have to inherit the GridView class and override the <em>PrepareContainerForItemOverride</em>.</p>\n<p><span id=\"more-15\"></span></p>\n<pre><code>    public class VariableGrid : GridView<br>    {<br>        protected override void PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject element, object item)<br>        {<br>            var tile = item as Model;<br><br>            if (tile != null)<br>            {<br>                var griditem = element as GridViewItem;<br><br>                if (griditem != null)<br>                {<br>                    VariableSizedWrapGrid.SetColumnSpan(griditem, tile.ColumnSpan);<br>                    VariableSizedWrapGrid.SetRowSpan(griditem, tile.RowSpan);<br>                }<br>            }<br><br>            base.PrepareContainerForItemOverride(element, item);<br>        }<br>    }<br></code></pre>\n<p>I have the Model class as below. It contains the ColumnSpan and RowSpan property.</p>\n<pre><code>    public class Model<br>    {<br>        public int ColumnSpan { get; set; }<br><br>        public int RowSpan { get; set; }<br><br>        public string Header { get; set; }<br>    }<br></code></pre>\n<p>Our VariableGrid class will map the span properties from model to containers and you can see the following output.</p>\n<pre><code>        &lt;local:VariableGrid ItemsSource=&quot;{Binding Models}&quot;<br>                            Padding=&quot;0&quot;<br>                            Margin=&quot;100&quot;<br>                            Height=&quot;630&quot;&gt;<br>            &lt;local:VariableGrid.ItemTemplate&gt;<br>                &lt;DataTemplate&gt;<br>                    &lt;Grid Background=&quot;MediumOrchid&quot;&gt;<br>                        &lt;TextBlock Text=&quot;{Binding Header}&quot;<br>                                   Margin=&quot;10&quot;<br>                                   HorizontalAlignment=&quot;Left&quot;<br>                                   VerticalAlignment=&quot;Bottom&quot; /&gt;<br>                    &lt;/Grid&gt;<br>                &lt;/DataTemplate&gt;<br>            &lt;/local:VariableGrid.ItemTemplate&gt;<br>            &lt;local:VariableGrid.ItemsPanel&gt;<br>                &lt;ItemsPanelTemplate&gt;<br>                    &lt;VariableSizedWrapGrid ItemHeight=&quot;200&quot;<br>                                           ItemWidth=&quot;200&quot; /&gt;<br>                &lt;/ItemsPanelTemplate&gt;<br>            &lt;/local:VariableGrid.ItemsPanel&gt;<br>        &lt;/local:VariableGrid&gt;<br></code></pre>\n\t\t\t"}