{"meta":{"tags":[],"featuredImage":"http://i.msdn.microsoft.com/dynimg/IC576244.png","published_date":"2012-09-25T00:00:00.000Z","postId":"search-contract-for-windows-store-apps","title":"Search contract for Windows storeÂ apps","excerpt":"\t\t\tA contract is like an agreement between one or more apps. Contracts define the requirements that apps must meet to participate in these unique Windows interactions.\nFor XAML Metro style apps, the Windows.UI.Xaml.Application class does a lot of the work needed for your app to support activation. T"},"content":"\n\t\t\t\t<p>A contract is like an agreement between one or more apps. Contracts define the requirements that apps must meet to participate in these unique Windows interactions.</p>\n<p>For XAML Metro style apps, the Windows.UI.Xaml.Application class does a lot of the work needed for your app to support activation. This class exposes a set of strongly typed activation methods that you can override for supporting common contracts such as Search. For all contract activations that don&#x2019;t have a strongly typed method, you can override the OnActivated method and inspect the activation kind to determine the contract for which your app is activated. New XAML app projects in Visual Studio come with generated code that uses the Windows.UI.Xaml.Application class to make the app capable of being activated for a generic launch.</p>\n<p><span id=\"more-23\"></span></p>\n<p>There is an easier way than manually doing this work. You can use Visual Studio tooling for completing a lot of this work. Just right click on your project, select Add &gt; New Item, and choose Search Contract in the dialog. Most of the code you see here, and a search UI that displays results in a way that follows our <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh465233\">Search UX guidelines</a> is automatically created for you.</p>\n<p>To extend support for Search activation in your app:</p>\n<ol>\n<ol>\n<ol>\n<li>Add the Search declaration to your manifest using the Visual Studio Manifest Designer.</li>\n<li>Place in the App constructor of App.xaml.cs/cpp/vb any general initialization code that needs to run every time your application is started irrespective of the reason.</li>\n<li>Override the strongly typed OnSearchActivated method in App.xaml.cs/cpp/vb to handle search activation.</li>\n<li>Load your Search UI and show search results for the query you receive in the SearchActivatedEventArgs.</li>\n</ol>\n</ol>\n</ol>\n<p>We must override the OnSearchActivated method to support activation for Search:</p>\n<div>\n<pre><code>protected override void OnSearchActivated(SearchActivatedEventArgs args)<br>{<br>    // Load Search UI<br>    PhotoApp.SearchResultsPage.Activate(args.QueryText);<br>}<br></code></pre>\n</div>\n<p>The <b>Activate</b> method of the <b>SearchResultsPage</b> sets up a UI that shows search results for the user&#x2019;s search query:</p>\n<div>\n<pre><code>        // SearchResultsPage.xaml.cs code snippet<br>        public static void Activate(String queryText)<br>        {<br>            // If the window isn&apos;t already using Frame navigation, insert our own frame<br>            var previousContent = Window.Current.Content;<br>            var frame = previousContent as Frame;<br>            if (frame == null)<br>            {<br>                frame = new Frame();<br>                Window.Current.Content = frame;<br>            }<br>            // Use navigation to display the results, packing both the query text and the previous<br>            // Window content into a single parameter object<br>            frame.Navigate(typeof(SearchResultsPage1),<br>                new Tuple(queryText, previousContent));<br>            // The window must be activated in 15 seconds<br>            Window.Current.Activate();<br>        }<br></code></pre>\n</div>\n<p><img src=\"https://i1.wp.com/i.msdn.microsoft.com/dynimg/IC576244.png\" alt width=\"640\" height=\"307\"></p>\n\t\t\t"}